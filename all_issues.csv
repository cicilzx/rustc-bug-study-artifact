Issue ID,Issue Labels,Issue URL,Status,Found by,Symptoms,Test validity,Stage,Bug Cause,# Affected module,Issue Title,Issue create date,Issue closed date,PR ID,PR URL,PR Title,PR create date,PR closed date,Bug duration,Fix loc,Fix files,Fix modules,Bug priority,Reopen?,Test case (original),Test case (reduced),core,async,dyn,std,Lifetime,trait,flag,command,unstable features
134541,"{'I-ICE', 'A-MIR', 'T-compiler', 'C-bug', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/134541,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133904,"{'I-ICE', 'A-MIR', 'T-compiler', 'A-const-eval', 'S-has-mcve', 'C-bug', 'A-repr'}",https://github.com/rust-lang/rust/issues/133904,duplicate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133529,"{'A-async-await', 'A-impl-trait', 'requires-nightly', 'A-edition-2024'}",https://github.com/rust-lang/rust/issues/133529,Not a bug,,,,,,,Edition 2024 now reports: argument requires that `'1` must outlive `'static`,2024-11-27T09:36:42Z,2024-11-27T16:04:44Z,,,,,,0,,,,,0,,,,,,,,,,,
133427,"{'T-types', 'A-impl-trait', 'I-unsound', 'P-high', 'C-bug', 'F-return_position_impl_trait_in_trait'}",https://github.com/rust-lang/rust/issues/133427,valid,members,3. Miscompilation-Safe Rust Causes UB,,2. HIR-type & wf check,1. Type-Opaque Types,1,RPITITs may imply unsound outlives for late-bound args in signature,2024-11-24T22:32:26Z,2024-11-28T06:18:17Z,133428,https://github.com/rust-lang/rust/pull/133428,Actually use placeholder regions for trait method late bound regions in `collect_return_position_impl_trait_in_trait_tys`,2024/11/24 23:13,2024/11/28 6:18,3,136,"['compare_impl_item.rs', 'do-not-imply-from-trait-impl.rs', 'do-not-imply-from-trait-impl.stderr', 'method-signature-matches.lt.stderr', 'rpitit-hidden-types-self-implied-wf.stderr', 'signature-mismatch.failure.stderr', 'signature-mismatch.rs', 'rpitit-impl-captures-too-much.stderr']","['compiler/rustc_hir_analysis/src/check', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/precise-capturing']",P-high,0,"use std::sync::Mutex;
 
 static MUTEX: Mutex<Option<&'static str>> = Mutex::new(None);
 
 trait Foo {
 fn foo<'a: 'static>(&self) -> impl Sized;
 }
 
 impl Foo for str {
 fn foo<'a: 'static>(&'a self) -> impl Sized + 'a {
 *MUTEX.lock().unwrap() = Some(self);
 }
 }
 
 fn call_foo<T: Foo + ?Sized>(s: &T) {
 s.foo();
 }
 
 fn main() {
 let s = String::from(""hello, world"");
 call_foo(s.as_str());
 drop(s);
 println!(""> {}"", MUTEX.lock().unwrap().unwrap());
 }","use std::sync::Mutex;
 
 static MUTEX: Mutex<Option<&'static str>> = Mutex::new(None);
 
 trait Foo {
 fn foo<'a: 'static>(&self) -> impl Sized;
 }
 
 impl Foo for str {
 fn foo<'a: 'static>(&'a self) -> impl Sized + 'a {
 *MUTEX.lock().unwrap() = Some(self);
 }
 }
 
 fn call_foo<T: Foo + ?Sized>(s: &T) {
 s.foo();
 }
 
 fn main() {
 let s = String::from(""hello, world"");
 call_foo(s.as_str());
 drop(s);
 println!(""> {}"", MUTEX.lock().unwrap().unwrap());
 }",,,,1,1,Sized,,,
133388,"{'I-ICE', 'A-trait-objects', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/133388,valid,members,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-Trait & Bound,1,Check for `dyn` providing all of its projections is incomplete w.r.t. different supertrait substitutions,2024-11-23T17:09:06Z,2024-12-15T04:43:08Z,133392,https://github.com/rust-lang/rust/pull/133392,Fix ICE when multiple supertrait substitutions need assoc but only one is provided,2024/11/23 18:48,2024/12/15 4:43,21,347,"['dyn_compatibility.rs', 'errors.rs', 'missing-associated-types.stderr', 'assoc_type_bounds.rs', 'assoc_type_bounds.stderr', 'assoc_type_bounds2.rs', 'assoc_type_bounds2.stderr', 'require-assoc-for-all-super-substs.rs', 'require-assoc-for-all-super-substs.stderr', 'issue-28344.stderr']","['compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'tests/ui/associated-types', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/issues']",,0,"trait Sup<T> {
 type Assoc: Default;
 }
 
 impl<T: Default> Sup<T> for () {
 type Assoc = T;
 }
 impl<T: Default, U: Default> Dyn<T, U> for () {}
 
 trait Dyn<A, B>: Sup<A, Assoc = A> + Sup<B> {}
 
 fn main() {
 let q: <dyn Dyn<i32, u32> as Sup<u32>>::Assoc = Default::default();
 }","trait Sup<T> {
 type Assoc: Default;
 }
 
 impl<T: Default> Sup<T> for () {
 type Assoc = T;
 }
 impl<T: Default, U: Default> Dyn<T, U> for () {}
 
 trait Dyn<A, B>: Sup<A, Assoc = A> + Sup<B> {}
 
 fn main() {
 let q: <dyn Dyn<i32, u32> as Sup<u32>>::Assoc = Default::default();
 }",,,1,,,Default,,,
133252,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-borrow-checker', 'A-edition-2024'}",https://github.com/rust-lang/rust/issues/133252,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
133064,"{'I-ICE', 'S-has-bisection', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-macros'}",https://github.com/rust-lang/rust/issues/133064,valid,icemaker,1. Crash-Front-end Panic,invalid,1. AST,4. Basic syntax&structure,5,ICE: `node HirId .. cannot be placed in TypeckResults with hir_owner DefId ..`,2024-11-15T08:38:01Z,2024-11-28T18:59:52Z,133468,https://github.com/rust-lang/rust/pull/133468,always create `DefId`s for anon consts,2024/11/25 17:52,2024/11/28 18:59,13,803,"['ast.rs', 'asm.rs', 'expr.rs', 'lib.rs', 'def.rs', 'encoder.rs', 'def_collector.rs', 'late.rs', 'lib.rs', 'const_arg_trivial_macro_expansion-1.rs', 'const_arg_trivial_macro_expansion-3-pass.rs', 'const_arg_trivial_macro_expansion-4.rs', 'const_arg_trivial_macro_expansion-4.stderr', 'issue-36163.stderr']","['compiler/rustc_ast/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_hir/src', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_resolve/src', 'compiler/rustc_resolve/src', 'compiler/rustc_resolve/src', 'tests/ui/const-generics/early', 'tests/ui/const-generics/early', 'tests/ui/const-generics/early', 'tests/ui/const-generics/early', 'tests/ui/consts']",,0,"pub struct Foo<T, const N: usize>([T; 0]);
 
 impl<T, const N: usize> Foo<T, {
 thread_local! { pub static FOO : Foo = Foo { } ; }
 
 #[cfg(cfail2)]
 {
 FOO.with(|_f| ())
 }
 }> {
 pub fn new() -> Self {
 Foo([])
 }
 }
 
 fn STATIC_NO_MANGLE() {
 let _: Foo<u32, 0> = Foo::new();
 }","impl<T>
 Foo<
 T,
 {
 thread_local! { pub static FOO : Foo = Foo { } ; }
 },
 >
 {
 }",,,,,,,,,
132920,"{'I-ICE', 'A-trait-system', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/132920,valid,developer,1. Crash-Front-end Panic,valid,2. HIR-report,5. Exception Handling & Report,1,error: the compiler unexpectedly panicked. this is a bug.,2024-11-11T21:26:09Z,2024-11-27T04:53:00Z,133304,https://github.com/rust-lang/rust/pull/133304,Revert diagnostics hack to fix ICE 132920,2024/11/21 18:02,2024/11/27 4:53,15,126,"['fulfillment_errors.rs', 'rmake.rs', 'minibevy.rs', 'minirapier.rs', 'repro.rs', 'rmake.rs']","['compiler/rustc_trait_selection/src/error_reporting/traits', 'tests/run-make/crate-loading', 'tests/run-make/diagnostics-traits-from-duplicate-crates', 'tests/run-make/diagnostics-traits-from-duplicate-crates', 'tests/run-make/diagnostics-traits-from-duplicate-crates', 'tests/run-make/diagnostics-traits-from-duplicate-crates']",P-high,0,,,,,,,,,,bevy,
132805,"{'T-compiler', 'C-bug', 'A-CLI', 'A-mir-opt', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/132805,valid,icemaker,4. Diagnostic Issues-Incorrect Warning/Error,,3. MIR-report,5. Exception Handling & Report,2,`-Zmir-enable-passes=` has no error handling,2024-11-09T11:43:02Z,2024-11-12T21:18:13Z,132901,https://github.com/rust-lang/rust/pull/132901,Warn about invalid `mir-enable-passes` pass names,2024/11/11 13:06,2024/11/12 21:18,3,292,"['messages.ftl', 'errors.rs', 'lib.rs', 'pass_manager.rs', 'enable_passes_validation.all_unknown.stderr', 'enable_passes_validation.empty.stderr', 'enable_passes_validation.mixed.stderr', 'enable_passes_validation.rs', 'enable_passes_validation.unprefixed.stderr']","['compiler/rustc_mir_transform', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'tests/ui/mir', 'tests/ui/mir', 'tests/ui/mir', 'tests/ui/mir', 'tests/ui/mir']",,0,,,,,,,,,-Zmir-enable-passes=+X,=-Zmir-enable-passes=+ThisPassDoesNotExist,
132691,"{'I-ICE', 'A-associated-items', 'A-trait-objects', 'T-types', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132691,duplicate,,,,,,,[ICE]: error performing operation: fully_perform,2024-11-06T12:45:24Z,2024-11-06T15:48:46Z,,,,,,0,,,,,0,,,,,,,,,,,
132689,"{'I-ICE', 'A-trait-system', 'A-associated-items', 'fixed-by-next-solver', 'T-types', 'A-higher-ranked', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132689,duplicate,,,,,,,[ICE]: something not fully resolved,2024-11-06T12:42:52Z,2024-11-06T15:42:01Z,,,,,,0,,,,,0,,,,,,,,,,,
132688,"{'I-ICE', 'A-trait-system', 'A-associated-items', 'T-types', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132688,duplicate,,,,,,,[ICE]: error performing operation: fully_perform,2024-11-06T12:40:43Z,2024-11-06T15:44:09Z,,,,,,0,,,,,0,,,,,,,,,,,
132687,"{'I-ICE', 'A-trait-system', 'A-associated-items', 'fixed-by-next-solver', 'T-types', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132687,duplicate,,,,,,,[ICE]: error performing operation: fully_perform,2024-11-06T12:39:41Z,2024-11-06T15:46:51Z,,,,,,0,,,,,0,,,,,,,,,,,
132686,"{'I-ICE', 'A-trait-system', 'T-types', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132686,duplicate,,,,,,,[ICE]: unexpected ambiguity & error performing operation: fully_perform,2024-11-06T12:38:38Z,2024-11-06T15:49:50Z,,,,,,0,,,,,0,,,,,,,,,,,
132685,"{'I-ICE', 'A-trait-system', 'A-trait-objects', 'fixed-by-next-solver', 'T-types', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132685,duplicate,,,,,,,[ICE]: Broken MIR: `Box<dyn 鈥?T鈥?` is not a subtype of `Box<dyn 鈥?AssocTy鈥?`: No solution,2024-11-06T12:36:44Z,2024-11-06T15:56:02Z,,,,,,0,,,,,0,,,,,,,,,,,
132681,"{'I-ICE', 'A-trait-system', 'fixed-by-next-solver', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132681,duplicate,,,,,,,[ICE]: TyKind::Error constructed but no error reported,2024-11-06T12:27:30Z,2024-11-06T14:09:18Z,,,,,,0,,,,,0,,,,,,,,,,,
132678,"{'I-ICE', 'fixed-by-next-solver', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132678,duplicate,,,,,,,[ICE]: failure to relate an opaque to itself should result in an error later,2024-11-06T12:17:30Z,2024-11-06T14:05:35Z,,,,,,0,,,,,0,,,,,,,,,,,
132676,"{'I-ICE', 'A-trait-system', 'fixed-by-next-solver', 'T-types', 'A-higher-ranked', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/132676,duplicate,,,,,,,[ICE]: error performing operation: fully_perform,2024-11-06T07:19:43Z,2024-11-06T16:01:35Z,,,,,,0,,,,,0,,,,,,,,,,,
132372,"{'S-has-bisection', 'A-associated-items', 'T-types', 'regression-from-stable-to-nightly', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/132372,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,1,Shorthand projections inside RPITITs fail to resolve,2024-10-30T21:34:38Z,2024-10-31T03:35:01Z,132373,https://github.com/rust-lang/rust/pull/132373,Make sure `type_param_predicates` resolves correctly for RPITIT,2024/10/30 22:33,2024/10/31 3:35,0,23,"['predicates_of.rs', 'shorthand-projection-in-rpitit-bound.rs']","['compiler/rustc_hir_analysis/src/collect', 'tests/ui/impl-trait/in-trait']",,0,"#![allow(async_fn_in_trait)]
 pub trait foo {}
 
 pub trait bar {
 type foo: foo;
 }
 pub trait baz {
 async fn boom<X: bar>() -> Result<(), X::foo>;
 }","#![allow(async_fn_in_trait)]
 pub trait foo {}
 
 pub trait bar {
 type foo: foo;
 }
 pub trait baz {
 async fn boom<X: bar>() -> Result<(), X::foo>;
 }",,1,,,,,,,
132000,"{'T-types', 'A-trait-objects', 'regression-from-stable-to-beta', 'C-bug'}",https://github.com/rust-lang/rust/issues/132000,Not a bug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
131969,"{'A-trait-system', 'P-high', 'regression-from-stable-to-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/131969,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,1. Type-New Solver,2,Diesel new coherence failure: conflicting implementations of trait,2024-10-20T13:51:12Z,2024-10-21T20:18:01Z,132001,https://github.com/rust-lang/rust/pull/132001,fix coherence error for very large tuples鈩?2024-10-21 14:26,2024/10/21 20:18,1,122,"['canonical.rs', 'coherence.rs', 'do-not-bail-due-to-placeholders.rs', 'normalize-allow-too-many-vars.rs', 'coherence-alias-hang.rs', 'recursion-limit-zero-issue-115351.rs', 'recursion-limit-zero-issue-115351.stderr']","['compiler/rustc_next_trait_solver/src/solve/eval_ctxt', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/traits/next-solver/canonical', 'tests/ui/traits/next-solver/normalize', 'tests/ui/traits/next-solver/overflow', 'tests/ui/traits/next-solver/overflow', 'tests/ui/traits/next-solver/overflow']",P-high,0,,,,,,,,,,,,
131915,"{'I-ICE', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'A-ast', 'C-bug'}",https://github.com/rust-lang/rust/issues/131915,valid,icemaker,1. Crash-Front-end Panic,invalid,1. AST,4. Basic syntax&structure,2,ICE: `adding a def'n for node-id NodeId(13) and def kind AnonConst but a previous def'n exists: DefKey`,2024-10-19T06:33:25Z,2024-11-12T08:14:33Z,132653,https://github.com/rust-lang/rust/pull/132653,Don't use `maybe_unwrap_block` when checking for macro calls in a block expr,2024/11/5 17:26,2024/11/12 8:14,24,502,"['ast.rs', 'def_collector.rs', '131915.rs', 'const_arg_trivial_macro_expansion-2.rs', 'const_arg_trivial_macro_expansion-2.stderr', 'const_arg_trivial_macro_expansion.rs']","['compiler/rustc_ast/src', 'compiler/rustc_resolve/src', 'tests/crashes', 'tests/ui/const-generics/early', 'tests/ui/const-generics/early', 'tests/ui/const-generics/early']",,0,"macro_rules! y {
 ($macro_name:tt $($matcher:tt)*) => {
 x
 };
 }
 
 const _: A<{ y!{ test.tou8 } }>;","macro_rules! y {
 ( $($matcher:tt)*) => {
 x
 };
 }
 
 const _: A<
 {
 y! { test.tou8 }
 },
 >;
 ",,,,,,,,,
131902,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/131902,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,5. Exception Handling & Report,1,Panic in `rustc` when casting invalid enum discriminant,2024-10-18T20:03:13Z,2024-10-24T05:47:51Z,131909,https://github.com/rust-lang/rust/pull/131909,Prevent overflowing enum cast from ICEing,2024/10/18 22:09,2024/10/24 5:47,5,79,"['expr.rs', 'E0081.rs', 'E0081.stderr']","['compiler/rustc_mir_build/src/thir/cx', 'tests/ui/error-codes', 'tests/ui/error-codes']",,0,"#[repr(u8)]
 enum EnumU8 {
 // Uncomment the line below to trigger a panic
 // XXXX,
 X000, X001, X002, X003, X004, X005, X006, X007, X008, X009,
 X010, X011, X012, X013, X014, X015, X016, X017, X018, X019,
 X020, X021, X022, X023, X024, X025, X026, X027, X028, X029,
 X030, X031, X032, X033, X034, X035, X036, X037, X038, X039,
 X040, X041, X042, X043, X044, X045, X046, X047, X048, X049,
 X050, X051, X052, X053, X054, X055, X056, X057, X058, X059,
 X060, X061, X062, X063, X064, X065, X066, X067, X068, X069,
 X070, X071, X072, X073, X074, X075, X076, X077, X078, X079,
 X080, X081, X082, X083, X084, X085, X086, X087, X088, X089,
 X090, X091, X092, X093, X094, X095, X096, X097, X098, X099,
 X100, X101, X102, X103, X104, X105, X106, X107, X108, X109,
 X110, X111, X112, X113, X114, X115, X116, X117, X118, X119,
 X120, X121, X122, X123, X124, X125, X126, X127, X128, X129,
 X130, X131, X132, X133, X134, X135, X136, X137, X138, X139,
 X140, X141, X142, X143, X144, X145, X146, X147, X148, X149,
 X150, X151, X152, X153, X154, X155, X156, X157, X158, X159,
 X160, X161, X162, X163, X164, X165, X166, X167, X168, X169,
 X170, X171, X172, X173, X174, X175, X176, X177, X178, X179,
 X180, X181, X182, X183, X184, X185, X186, X187, X188, X189,
 X190, X191, X192, X193, X194, X195, X196, X197, X198, X199,
 X200, X201, X202, X203, X204, X205, X206, X207, X208, X209,
 X210, X211, X212, X213, X214, X215, X216, X217, X218, X219,
 X220, X221, X222, X223, X224, X225, X226, X227, X228, X229,
 X230, X231, X232, X233, X234, X235, X236, X237, X238, X239,
 X240, X241, X242, X243, X244, X245, X246, X247, X248, X249,
 X250, X251, X252, X253, X254, X255,
 }
 
 fn main() {
 let x = EnumU8::X255 as u8;
 }","#[repr(u8)]
 enum EnumU8 {
 // Uncomment the line below to trigger a panic
 // XXXX,
 X000, X001, X002, X003, X004, X005, X006, X007, X008, X009,
 X010, X011, X012, X013, X014, X015, X016, X017, X018, X019,
 X020, X021, X022, X023, X024, X025, X026, X027, X028, X029,
 X030, X031, X032, X033, X034, X035, X036, X037, X038, X039,
 X040, X041, X042, X043, X044, X045, X046, X047, X048, X049,
 X050, X051, X052, X053, X054, X055, X056, X057, X058, X059,
 X060, X061, X062, X063, X064, X065, X066, X067, X068, X069,
 X070, X071, X072, X073, X074, X075, X076, X077, X078, X079,
 X080, X081, X082, X083, X084, X085, X086, X087, X088, X089,
 X090, X091, X092, X093, X094, X095, X096, X097, X098, X099,
 X100, X101, X102, X103, X104, X105, X106, X107, X108, X109,
 X110, X111, X112, X113, X114, X115, X116, X117, X118, X119,
 X120, X121, X122, X123, X124, X125, X126, X127, X128, X129,
 X130, X131, X132, X133, X134, X135, X136, X137, X138, X139,
 X140, X141, X142, X143, X144, X145, X146, X147, X148, X149,
 X150, X151, X152, X153, X154, X155, X156, X157, X158, X159,
 X160, X161, X162, X163, X164, X165, X166, X167, X168, X169,
 X170, X171, X172, X173, X174, X175, X176, X177, X178, X179,
 X180, X181, X182, X183, X184, X185, X186, X187, X188, X189,
 X190, X191, X192, X193, X194, X195, X196, X197, X198, X199,
 X200, X201, X202, X203, X204, X205, X206, X207, X208, X209,
 X210, X211, X212, X213, X214, X215, X216, X217, X218, X219,
 X220, X221, X222, X223, X224, X225, X226, X227, X228, X229,
 X230, X231, X232, X233, X234, X235, X236, X237, X238, X239,
 X240, X241, X242, X243, X244, X245, X246, X247, X248, X249,
 X250, X251, X252, X253, X254, X255,
 }
 
 fn main() {
 let x = EnumU8::X255 as u8;
 }",,,,,,,,,
131839,"{'A-trait-system', 'T-compiler', 'C-bug', 'T-rustdoc'}",https://github.com/rust-lang/rust/issues/131839,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-trait solving,1. Type-New Solver,1,Some trait methods don't appear in the documentation for types that implement the trait,2024-10-17T15:53:19Z,2024-10-22T01:38:02Z,131840,https://github.com/rust-lang/rust/pull/131840,Dont consider predicates that may hold as impossible in `is_impossible_associated_item`,2024/10/17 16:34,2024/10/22 1:38,4,34,"['mod.rs', 'impossible-default.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/rustdoc']",,0,,,,,,,,,,,
131820,"{'A-trait-objects', 'T-types', 'T-compiler', 'C-bug', 'F-trait_upcasting', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/131820,duplicate,,,,,,,vtables may be include auto traits,2024-10-17T08:43:58Z,2024-10-17T20:41:18Z,,,,,,0,,,,,0,,,,,,,,,,,
131813,"{'A-trait-objects', 'I-unsound', 'T-types', 'requires-nightly', 'A-coercions', 'T-compiler', 'C-bug', 'F-trait_upcasting'}",https://github.com/rust-lang/rust/issues/131813,valid,developer,3. Miscompilation-Safe Rust Causes UB,,2. HIR-trait solving,1. Type-Trait & Bound,1,`trait_upcasting` unsoundness due to reordered super traits,2024-10-17T03:55:14Z,2024-10-18T20:05:26Z,131864,https://github.com/rust-lang/rust/pull/131864,Never emit `vptr` for empty/auto traits,2024/10/18 0:30,2024/10/18 20:05,1,50,"['vtable.rs', 'print_vtable_sizes.stdout', 'upcast_reorder.rs', 'multiple-markers.stderr']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/traits/object', 'tests/ui/traits', 'tests/ui/traits/vtable']",,0,"#![feature(trait_upcasting)]
 
 trait Pollable {
 #[allow(unused)]
 fn poll(&self) {}
 }
 trait FileIo: Pollable + Send + Sync {
 fn read(&self) {}
 }
 trait Terminal: Send + Sync + FileIo {}
 
 struct A;
 
 impl Pollable for A {}
 impl FileIo for A {}
 impl Terminal for A {}
 
 fn main() {
 let a = A;
 
 let b = &a as &dyn Terminal;
 let c = b as &dyn FileIo;
 
 c.read();
 }","#![feature(trait_upcasting)]
 
 trait Pollable {
 #[allow(unused)]
 fn poll(&self) {}
 }
 trait FileIo: Pollable + Send {
 fn read(&self) {}
 }
 trait Terminal: Send + FileIo {}
 
 struct A;
 
 impl Pollable for A {}
 impl FileIo for A {}
 impl Terminal for A {}
 
 fn main() {
 let a = A;
 
 let b = &a as &dyn Terminal;
 let c = b as &dyn FileIo;
 
 c.read();
 }",,,1,,,Send,,,#![feature(trait_upcasting)]
131603,"{'I-ICE', 'T-compiler', 'C-bug', 'A-borrow-checker', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/131603,duplicate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
131538,"{'I-ICE', 'A-trait-system', 'A-GATs', 'F-generic_associated_types_extended', 'F-trivial_bounds', 'A-inference', 'T-compiler', 'C-bug', 'F-return_type_notation'}",https://github.com/rust-lang/rust/issues/131538,exclude,,,,,,,ICE: unexpected const placeholder ,2024-10-11T09:36:52Z,2024-12-07T08:35:39Z,,,,,,56,,,,,0,,,,,,,,,,,
131535,"{'I-ICE', 'A-trait-system', 'F-non_lifetime_binders', 'S-bug-has-test', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/131535,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-Opaque Types,1,"ICE: `WellFormed .. has escaping bound vars, so it cannot be wrapped in a dummy binder.`",2024-10-11T08:44:48Z,2024-11-17T12:50:57Z,132832,https://github.com/rust-lang/rust/pull/132832,Deny capturing late-bound ty/const params in nested opaques,2024/11/10 4:37,2024/11/17 12:50,37,97,"['resolve_bound_vars.rs', '131535.rs', '131637.rs', '132530.rs', 'non-lifetime-binder-in-constraint.rs', 'non-lifetime-binder-in-constraint.stderr', 'non-lifetime-binder.rs', 'non-lifetime-binder.stderr']","['compiler/rustc_hir_analysis/src/collect', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(non_lifetime_binders)]
 trait v0<> {}
 fn kind :(v0<'_, v2 = impl v0<v4> + '_> impl for<v4> v0<'_, v2 = impl v0<v4> + '_>) {}","#![feature(non_lifetime_binders)]
 trait v0<> {}
 fn kind :(v0<'_, > impl for<v4> v0<'_, v2 = impl v0<v4> + '_>) {}
 ",,,,,1,,,,#![feature(non_lifetime_binders)]
131227,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/131227,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Missing Cases,1,[ICE]: got a pointer where a ScalarInt was expected: alloc1,2024-10-04T07:35:23Z,2024-12-10T06:31:22Z,134073,https://github.com/rust-lang/rust/pull/134073,dataflow_const_prop: do not eval a ptr address in SwitchInt,2024/12/9 12:31,2024/12/10 6:31,66,44,"['dataflow_const_prop.rs', '131227.rs', 'ptr-in-switch-int-issue-131227.rs']","['compiler/rustc_mir_transform/src', 'tests/crashes', 'tests/ui/dataflow_const_prop']",,0,"pub static mut G: i32 = 0;
 fn myfunc() -> i32 {
 let var: *mut i32 = &raw mut G;
 if !var.is_null() {
 return 0;
 }
 return 0;
 }
 pub fn main() {
 myfunc();
 }","pub static mut G: i32 = 0;
 fn myfunc() -> i32 {
 let var: *mut i32 = &raw mut G;
 if !var.is_null() {
 return 0;
 }
 return 0;
 }
 pub fn main() {
 myfunc();
 }",,,,,,,,,
131219,"{'C-optimization', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/131219,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
131195,"{'I-unsound', 'P-critical', 'I-miscompile', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/131195,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,`-Zmir-opt-level` miscompiles code with panic,2024-10-03T11:29:04Z,2024-10-04T06:46:43Z,131201,https://github.com/rust-lang/rust/pull/131201,Disable jump threading `UnOp::Not` for non-bool,2024/10/3 13:48,2024/10/4 6:46,0,111,"['jump_threading.rs', 'jump_threading.bitwise_not.JumpThreading.panic-abort.diff', 'jump_threading.bitwise_not.JumpThreading.panic-unwind.diff', 'jump_threading.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",P-critical,0,"pub fn myfunc() -> i32 {
 let mut c :i32 = 1;
 c = 1 ;
 if !c != 0 {
 return 1;
 }
 panic!(""Reached end of non-void function"");
 }
 
 pub fn main() {
 let e = myfunc();
 println!(""e={}"", e);
 }","pub fn myfunc() -> i32 {
 let mut c :i32 = 1;
 c = 1 ;
 if !c != 0 {
 return 1;
 }
 panic!(""Reached end of non-void function"");
 }
 
 pub fn main() {
 let e = myfunc();
 println!(""e={}"", e);
 }",,,,,,,,,
131123,"{'I-ICE', 'F-type_alias_impl_trait', 'T-rustdoc', 'A-synthetic-impls', 'C-bug', 'E-needs-mcve', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/131123,duplicate,,,,,,,ICE when running `cargo doc`: unexpected region kind: !2_1,2024-10-02T01:35:08Z,2024-10-02T13:34:56Z,,,,,,0,,,,,0,,,,,,,,,,,
131064,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/131064,valid,icemaker,1. Crash-Front-end Panic,valid,1. AST,4. Basic syntax&structure,2,"ICE: `assertion failed: matches!(scalar, Scalar::Int(..))`",2024-09-30T12:46:54Z,2024-10-07T03:20:58Z,131068,https://github.com/rust-lang/rust/pull/131068,Don't use Immediate::offset to transmute pointers to integers,2024/9/30 16:01,2024/10/7 3:21,6,122,"['operand.rs', 'place.rs', 'projection.rs', 'gvn.rs', 'closure_macro.cov-map', 'closure_macro_async.cov-map']","['compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_mir_transform/src', 'tests/coverage', 'tests/coverage']",,0,"use std::{mem, ptr};
 
 fn main() {
 basic();
 }
 
 fn basic() {
 let x = &42;
 let ptr = x as *const i32;
 
 let addr_mu: mem::MaybeUninit<usize> = unsafe { mem::transmute(ptr) };
 }
 ","use std::{mem, ptr};
 
 fn main() {
 basic();
 }
 
 fn basic() {
 let x = &42;
 let ptr = x as *const i32;
 
 let addr_mu: mem::MaybeUninit<usize> = unsafe { mem::transmute(ptr) };
 }
 ",,,,1,,,,,
130985,"{'relnotes', 'A-trait-objects', 'T-types', 'A-coercions', 'relnotes-tracking-issue', 'WG-trait-system-refactor', 'T-lang'}",https://github.com/rust-lang/rust/issues/130985,exclude,,,,,,,Tracking issue for release notes of #126660: Allow dropping `dyn Trait` principal,2024-09-28T16:36:21Z,2024-11-22T22:13:27Z,,,,,,55,,,,,0,,,,,,,,,,,
130853,"{'I-unsound', 'A-codegen', 'I-miscompile', 'WG-mir-opt', 'P-high', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/130853,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,2. Ownership-Borrow&Move,1,Miscompile in the GVN transform,2024-09-25T20:37:18Z,2024-11-27T18:41:45Z,133474,https://github.com/rust-lang/rust/pull/133474,Do not unify dereferences of shared borrows in GVN,2024/11/25 19:40,2024/11/27 18:41,62,1096,"['gvn.rs', 'closure.cov-map', 'issue-84561.cov-map', 'read_immutable_static.main.GVN.diff', 'read_immutable_static.rs', 'ref_deref.main.GVN.diff', 'ref_deref_project.main.GVN.diff', 'ref_deref_project.rs', 'slice_len.main.GVN.32bit.panic-abort.diff', 'slice_len.main.GVN.32bit.panic-unwind.diff', 'slice_len.main.GVN.64bit.panic-abort.diff', 'slice_len.main.GVN.64bit.panic-unwind.diff', 'slice_len.rs', 'gvn.borrowed.GVN.panic-abort.diff', 'gvn.borrowed.GVN.panic-unwind.diff', 'gvn.dereferences.GVN.panic-abort.diff', 'gvn.dereferences.GVN.panic-unwind.diff', 'gvn.fn_pointers.GVN.panic-abort.diff', 'gvn.fn_pointers.GVN.panic-unwind.diff', 'gvn.rs', 'gvn.slices.GVN.panic-abort.diff', 'gvn.slices.GVN.panic-unwind.diff', 'gvn.subexpression_elimination.GVN.panic-abort.diff', 'gvn.subexpression_elimination.GVN.panic-unwind.diff', 'gvn_uninhabited.f.GVN.panic-abort.diff', 'gvn_uninhabited.f.GVN.panic-unwind.diff', 'deref_nested_borrows.rs', 'deref_nested_borrows.src.GVN.panic-abort.diff', 'deref_nested_borrows.src.GVN.panic-unwind.diff', 'deref_nested_borrows.src.PreCodegen.after.panic-abort.mir', 'deref_nested_borrows.src.PreCodegen.after.panic-unwind.mir', 'slice_filter.variant_a-{closure#0}.PreCodegen.after.mir', 'slice_filter.variant_b-{closure#0}.PreCodegen.after.mir']","['compiler/rustc_mir_transform/src', 'tests/coverage', 'tests/coverage', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen']",P-high,0,"unsafe fn src(x: &&u8) -> bool {
 let y = **x;
 unknown();
 **x == y
 }
 
 static mut SUSSY: *mut u8 = core::ptr::null_mut();
 
 #[inline(never)]
 unsafe fn unknown() {
 *SUSSY = 1;
 }
 
 fn main() {
 let mut s = 0;
 unsafe {
 SUSSY = core::ptr::addr_of_mut!(s);
 println!(""{}"", src(&*core::ptr::addr_of!(SUSSY).cast::<&u8>()));
 }
 }","unsafe fn src(x: &&u8) -> bool {
 let y = **x;
 unknown();
 **x == y
 }
 
 static mut SUSSY: *mut u8 = core::ptr::null_mut();
 
 #[inline(never)]
 unsafe fn unknown() {
 *SUSSY = 1;
 }
 
 fn main() {
 let mut s = 0;
 unsafe {
 SUSSY = core::ptr::addr_of_mut!(s);
 println!(""{}"", src(&*core::ptr::addr_of!(SUSSY).cast::<&u8>()));
 }
 }",1,,,,,,,,
130769,"{'I-ICE', 'S-has-bisection', 'P-critical', 'regression-from-stable-to-nightly', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/130769,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,5,Panic while compiling http-body v0.4.6 with rustc 1.83.0-nightly (7042c269c 2024-09-23),2024-09-24T05:19:06Z,,130786,https://github.com/rust-lang/rust/pull/130786,,,,2,,,,P-critical,0,,"use std::task::Poll;
 
 pub fn poll(val: Poll<Result<Option<Vec<u8>>, u8>>) {
 match val {
 Poll::Ready(Ok(Some(_trailers))) => {}
 Poll::Ready(Err(_err)) => {}
 Poll::Ready(Ok(None)) => {}
 Poll::Pending => {}
 }
 }",,,,1,,,"+nightly
--release",cargo +nightly build --release,
130545,"{'T-compiler', 'A-diagnostics', 'A-suggestion-diagnostics', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/130545,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,2. Ownership-Lifetime,6,Improve borrow checking error in cases where `+ use<>` could be used,2024-09-19T05:51:16Z,2024-10-31T06:21:53Z,131186,https://github.com/rust-lang/rust/pull/131186,Try to point out when edition 2024 lifetime capture rules cause borrowck issues,2024/10/3 4:48,2024/10/31 6:21,42,852,"['lib.rs', 'conflict_errors.rs', 'mod.rs', 'opaque_suggestions.rs', 'opaque_types.rs', 'hir.rs', 'check.rs', 'collect.rs', 'mod.rs', '_match.rs', 'mod.rs', 'cstore_impl.rs', 'encoder.rs', 'mod.rs', 'erase.rs', 'mod.rs', 'context.rs', 'parameterized.rs', 'note_and_explain.rs', 'fulfillment_errors.rs', 'assoc.rs', 'opaque_types.rs', 'foreign.rs', 'foreign-2021.rs', 'foreign-2021.stderr', 'migration-note.rs', 'migration-note.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_infer/src/infer/opaque_types', 'compiler/rustc_metadata/src/rmeta/decoder', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_trait_selection/src/error_reporting/infer', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'compiler/rustc_ty_utils/src', 'compiler/rustc_ty_utils/src', 'tests/ui/impl-trait/precise-capturing/auxiliary', 'tests/ui/impl-trait/precise-capturing', 'tests/ui/impl-trait/precise-capturing', 'tests/ui/impl-trait/precise-capturing', 'tests/ui/impl-trait/precise-capturing']",,0,,"#![allow(warnings)]
 
 fn main() {
 let mut data = vec![1, 2, 3];
 let mut i = indices(&data);
 data.push(4);
 i.next();
 }
 
 fn indices<T>(
 slice: &[T],
 ) -> impl Iterator<Item = usize> {
 0 .. slice.len()
 }",,,,,,Iterator,,,
130400,"{'I-ICE', 'A-HIR', 'T-compiler', 'C-bug', 'requires-debug-assertions'}",https://github.com/rust-lang/rust/issues/130400,valid,icemaker,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,1,"ICE: assertion failed compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs:2557:13: `1 == 2`/ `params_with_generics.len(), matched_inputs.len()`",2024-09-15T13:12:27Z,2024-09-18T07:04:08Z,130496,https://github.com/rust-lang/rust/pull/130496,Fix circular fn_sig queries to correct number of args for methods,2024/9/18 1:32,2024/9/18 7:04,2,36,"['values.rs', 'mismatch-args-crash-issue-130400.rs', 'mismatch-args-crash-issue-130400.stderr']","['compiler/rustc_middle/src', 'tests/ui/mismatched_types', 'tests/ui/mismatched_types']",,0,"//@ run-pass
 #![allow(dead_code)]
 
 #[derive(m.len(), 0)]
 struct LM { resize_at: usize, size: usize }
 
 enum HashMap<K,V> {
 HashMap_(LM, Vec<(K,V)>)
 }
 
 fn linear_map<K,Vec>(&mut self) -> HashMap<_> {
 HashMap::HashMap_(LMlinear_map::<(),()>(), linear_map::<(),()>())
 }
 
 impl<K,V> HashMap<K,V> {
 pub fn len(& self) -> usize {
 match *self {
 HashMap::HashMap_(ref l, _) => l.size
 }
 }
 }
 
 pub fn len(&mut self) -> usize {
 match *self {
 HashMap::HashMap_(ref l, _) => l.size
 }
 }","fn linear_map<K, Vec>(&mut self) -> HashMap<_> {
 HashMap::HashMap_(LMlinear_map::<(), ()>(), linear_map::<(), ()>())
 }",,,,,,,,,
130347,"{'I-ICE', 'A-trait-objects', 'T-types', 'I-unsound', 'P-high', 'C-bug'}",https://github.com/rust-lang/rust/issues/130347,valid,developer,3. Miscompilation-Safe Rust Causes UB,,2. HIR-type & wf check,1. Type-Trait & Bound,3,Unconstrained lifetime in associated type using trait object leads to unsound lifetime extension and ICE,2024-09-14T10:14:15Z,2024-10-05T06:18:30Z,130367,https://github.com/rust-lang/rust/pull/130367,Check elaborated projections from dyn don't mention unconstrained late bound lifetimes,2024/9/14 19:59,2024/10/5 6:18,20,167,"['dyn_compatibility.rs', 'predicate.rs', 'elaborate.rs', 'inherent.rs', 'elaborated-predicates-unconstrained-late-bound.rs', 'elaborated-predicates-unconstrained-late-bound.stderr', 'pretty.rs', 'pretty.stderr']","['compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_middle/src/ty', 'compiler/rustc_type_ir/src', 'compiler/rustc_type_ir/src', 'tests/ui/traits/object', 'tests/ui/traits/object', 'tests/ui/traits/object', 'tests/ui/traits/object']",P-high,0,"trait A<T>: B<T = T> {}
 
 trait B {
 type T;
 }
 
 struct Erase<T: ?Sized + B>(T::T);
 
 fn main() {
 let x = {
 let x = String::from(""hello"");
 
 Erase::<dyn for<'a> A<&'a _>>(x.as_str())
 };
 
 dbg!(x.0);
 }","trait A<T>: B<T = T> {}
 
 trait B {
 type T;
 }
 
 struct Erase<T: ?Sized + B>(T::T);
 
 fn main() {
 let x = {
 let x = String::from(""hello"");
 
 Erase::<dyn for<'a> A<&'a _>>(x.as_str())
 };
 
 dbg!(x.0);
 }",,,1,,1,?Sized,,,
130103,"{'I-ICE', 'A-trait-system', 'T-compiler', 'C-bug', 'WG-compiler-parallel'}",https://github.com/rust-lang/rust/issues/130103,duplicate,,,,,,,Internal Compiler Error when trying to compile a small project (only dependency: clap),2024-09-08T15:10:52Z,2024-09-10T02:37:18Z,,,,,,1,,,,,0,,,,,,,,,,,
130030,"{'A-trait-objects', 'T-types', 'T-compiler', 'D-terse', 'A-raw-pointers', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/130030,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-MIR Transform,2. Ownership-Lifetime,6,Confusing diagnostic for invalid casts of pointers to trait objects,2024-09-06T12:36:15Z,2024-09-25T04:53:47Z,130234,https://github.com/rust-lang/rust/pull/130234,improve compile errors for invalid ptr-to-ptr casts with trait objects,2024/9/11 17:08,2024/9/25 4:53,18,946,"['explain_borrow.rs', 'region_errors.rs', 'mod.rs', 'base.rs', 'rvalue.rs', 'check.rs', 'cast.rs', 'cast.rs', 'coercion.rs', 'expr_use_visitor.rs', 'query.rs', 'statement.rs', 'syntax.rs', 'thir.rs', 'visit.rs', 'adjustment.rs', 'cast.rs', 'as_place.rs', 'as_rvalue.rs', 'test.rs', 'expr.rs', 'print.rs', 'cleanup_post_borrowck.rs', 'dataflow_const_prop.rs', 'gvn.rs', 'mentioned_items.rs', 'async_destructor_ctor.rs', 'validate.rs', 'collector.rs', 'mir.rs', 'ty.rs', 'body.rs', 'qualify_min_const_fn.rs', 'dyn-upcast-trait-mismatch.stderr', 'address_of.address_of_reborrow.SimplifyCfg-initial.after.mir', 'build_correct_coerce.main.built.after.mir', 'receiver_ptr_mutability.main.built.after.mir', 'storage_live_dead_in_statics.XXX.built.after.mir', 'const_promotion_extern_static.BAR.PromoteTemps.diff', 'const_promotion_extern_static.FOO.PromoteTemps.diff', 'bad_op_unsafe_oob_for_slices.main.GVN.32bit.panic-abort.diff', 'bad_op_unsafe_oob_for_slices.main.GVN.32bit.panic-unwind.diff', 'bad_op_unsafe_oob_for_slices.main.GVN.64bit.panic-abort.diff', 'bad_op_unsafe_oob_for_slices.main.GVN.64bit.panic-unwind.diff', 'reify_fn_ptr.main.GVN.diff', 'reify_fn_ptr.rs', 'slice_len.main.GVN.32bit.panic-abort.diff', 'slice_len.main.GVN.32bit.panic-unwind.diff', 'slice_len.main.GVN.64bit.panic-abort.diff', 'slice_len.main.GVN.64bit.panic-unwind.diff', 'slice_len.rs', 'issue_107511.main.CopyProp.panic-abort.diff', 'issue_107511.main.CopyProp.panic-unwind.diff', 'default_boxed_slice.main.GVN.32bit.panic-abort.diff', 'default_boxed_slice.main.GVN.32bit.panic-unwind.diff', 'default_boxed_slice.main.GVN.64bit.panic-abort.diff', 'default_boxed_slice.main.GVN.64bit.panic-unwind.diff', 'slice_len.main.DataflowConstProp.32bit.panic-abort.diff', 'slice_len.main.DataflowConstProp.32bit.panic-unwind.diff', 'slice_len.main.DataflowConstProp.64bit.panic-abort.diff', 'slice_len.main.DataflowConstProp.64bit.panic-unwind.diff', 'gvn.array_len.GVN.panic-abort.diff', 'gvn.array_len.GVN.panic-unwind.diff', 'gvn.fn_pointers.GVN.panic-abort.diff', 'gvn.fn_pointers.GVN.panic-unwind.diff', 'gvn.wide_ptr_provenance.GVN.panic-abort.diff', 'gvn.wide_ptr_provenance.GVN.panic-unwind.diff', 'gvn.wide_ptr_same_provenance.GVN.panic-abort.diff', 'gvn.wide_ptr_same_provenance.GVN.panic-unwind.diff', 'dyn_trait.get_query.Inline.panic-abort.diff', 'dyn_trait.get_query.Inline.panic-unwind.diff', 'dyn_trait.try_execute_query.Inline.panic-abort.diff', 'dyn_trait.try_execute_query.Inline.panic-unwind.diff', 'issue_76432.test.SimplifyComparisonIntegral.panic-abort.diff', 'issue_76432.test.SimplifyComparisonIntegral.panic-unwind.diff', 'lower_array_len.array_bound.GVN.panic-abort.diff', 'lower_array_len.array_bound.GVN.panic-unwind.diff', 'lower_array_len.array_bound_mut.GVN.panic-abort.diff', 'lower_array_len.array_bound_mut.GVN.panic-unwind.diff', 'lower_array_len.array_len.GVN.panic-abort.diff', 'lower_array_len.array_len.GVN.panic-unwind.diff', 'lower_array_len.array_len_by_value.GVN.panic-abort.diff', 'lower_array_len.array_len_by_value.GVN.panic-unwind.diff', 'lower_array_len.array_len_raw.GVN.panic-abort.diff', 'lower_array_len.array_len_raw.GVN.panic-unwind.diff', 'lower_array_len.array_len_reborrow.GVN.panic-abort.diff', 'lower_array_len.array_len_reborrow.GVN.panic-unwind.diff', 'issue_117368_print_invalid_constant.main.GVN.32bit.panic-abort.diff', 'issue_117368_print_invalid_constant.main.GVN.64bit.panic-abort.diff', 'retag.main.SimplifyCfg-pre-optimizations.after.panic-abort.mir', 'retag.main.SimplifyCfg-pre-optimizations.after.panic-unwind.mir', 'simplify_locals.c.SimplifyLocals-before-const-prop.diff', 'lifetimes.foo.ScalarReplacementOfAggregates.diff', 'two-phase-surprise-no-conflict.stderr', 'casts-differing-anon.stderr', 'ptr-to-trait-obj-different-args.rs', 'ptr-to-trait-obj-different-args.stderr', 'ptr-to-trait-obj-different-regions-id-trait.current.stderr', 'ptr-to-trait-obj-different-regions-id-trait.next.stderr', 'ptr-to-trait-obj-different-regions-misc.rs', 'ptr-to-trait-obj-different-regions-misc.stderr', 'ptr-to-trait-obj-wrap-upcast.stderr', 'dropck_trait_cycle_checked.stderr', 'dyn-to-rigid.rs', 'dyn-to-rigid.stderr', 'enum-cast.rs', 'kindck-impl-type-params.stderr', 'issue-90600-expected-return-static-indirect.stderr', 'cast-rfc0401.stderr', 'issue-54779-anon-static-lifetime.stderr', 'cast_static_lifetime.stderr', 'type_ascription_static_lifetime.stderr', 'regions-close-object-into-object-4.stderr', 'regions-close-object-into-object-5.stderr', 'regions-close-over-type-parameter-1.stderr', 'suggest-using-tick-underscore-lifetime-in-return-trait-object.stderr', 'trait-object-lifetime-default-note.rs', 'trait-object-lifetime-default-note.stderr', 'type-checking-test-3.stderr', 'type-checking-test-4.stderr', 'upcast_soundness_bug.rs', 'upcast_soundness_bug.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/check_consts', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src', 'compiler/rustc_middle/src/thir', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/thir/cx', 'compiler/rustc_mir_build/src/thir', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src/shim', 'compiler/rustc_mir_transform/src', 'compiler/rustc_monomorphize/src', 'compiler/rustc_smir/src/rustc_smir/convert', 'compiler/rustc_smir/src/rustc_smir/convert', 'compiler/stable_mir/src/mir', 'src/tools/clippy/clippy_utils/src', 'src/tools/miri/tests/fail', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/building', 'tests/mir-opt/building', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/sroa', 'tests/ui/borrowck', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/cast', 'tests/ui/dropck', 'tests/ui/dyn-star', 'tests/ui/dyn-star', 'tests/ui/dyn-star', 'tests/ui/kindck', 'tests/ui/lifetimes', 'tests/ui/mismatched_types', 'tests/ui/nll', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/suggestions/lifetimes', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits/trait-upcasting', 'tests/ui/traits/trait-upcasting', 'tests/ui/traits', 'tests/ui/traits']",,0,"fn main() {
 let ptr: *const dyn Fn() = &|| ();
 _ = ptr as *const dyn Fn(u8);
 }","fn main() {
 let ptr: *const dyn Fn() = &|| ();
 _ = ptr as *const dyn Fn(u8);
 }",,,1,,,,,,
129950,"{'A-trait-system', 'T-types', 'C-bug', 'E-needs-bisection'}",https://github.com/rust-lang/rust/issues/129950,duplicate,,,,,,,Trait bound requiring the same trait with different lifetimes results in a compile error,2024-09-04T04:54:03Z,2024-09-05T09:02:55Z,,,,,,1,,,,,0,,,,,,,,,,,
129811,"{'F-async_closure', 'A-mir-opt', 'C-bug', 'I-cycle'}",https://github.com/rust-lang/rust/issues/129811,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Cycle detected when optimizing MIR on nightly,2024-08-31T09:28:09Z,2024-09-08T01:26:34Z,129847,https://github.com/rust-lang/rust/pull/129847,Do not call query to compute coroutine layout for synthetic body of async closure,2024/9/1 9:43,2024/9/8 1:26,7,32,"['validate.rs', 'validate-synthetic-body.rs']","['compiler/rustc_mir_transform/src', 'tests/ui/async-await/async-closures']",,0,,"#![feature(async_closure)]
 
 use std::future::Future;
 
 async fn orchestrate_memd_routing<Fut: Future>(operation: impl Fn() -> Fut) {
 operation().await;
 }
 
 pub async fn orchestrate_simple_crud() {
 orchestrate_memd_routing(async || async {}.await).await;
 }",,1,,1,,,+nightly,cargo +nightly build,#![feature(async_closure)]
129247,"{'C-cleanup', 'T-compiler', 'A-HIR'}",https://github.com/rust-lang/rust/issues/129247,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
129112,"{'I-ICE', 'A-trait-system', 'T-compiler', 'C-bug', 'S-needs-repro', 'WG-compiler-parallel'}",https://github.com/rust-lang/rust/issues/129112,valid,developer,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-New Solver,3,ICE `assertion failed: prev.is_none()` with nightly `13a52890d 2024-08-14`,2024-08-15T02:05:29Z,,130094,https://github.com/rust-lang/rust/pull/130094,,,,26,,,,,0,,"#[derive(Clone, Eq)] //~ ERROR [E0277]
 pub struct Struct<T>(T);
 
 impl<T: Clone, U> PartialEq<U> for Struct<T>
 where
 U: Into<Struct<T>> + Clone
 {
 fn eq(&self, _other: &U) -> bool {
 todo!()
 }
 }
 
 fn main() {}",,,,,,"Into
Clone",-Zthreads=X,=-Zthreads=16,
129075,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/129075,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,4,ICE: tcx: index out of bounds,2024-08-14T03:02:29Z,2024-12-01T04:52:57Z,133365,https://github.com/rust-lang/rust/pull/133365,Make `compare_impl_item` into a query,2024/11/23 4:52,2024/12/1 4:52,109,351,"['check.rs', 'compare_impl_item.rs', 'refine.rs', 'mod.rs', 'mod.rs', 'instance.rs', '119701.rs', '121127.rs', '121411.rs', '129075.rs', '129127.rs', '129214.rs', '131294-2.rs', '131294.rs', 'issue-83765.stderr', 'refine-cycle.rs', 'eval-bad-signature.rs', 'eval-bad-signature.stderr']","['compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check/compare_impl_item', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_middle/src/query', 'compiler/rustc_ty_utils/src', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/const-generics/issues', 'tests/ui/impl-trait/in-trait', 'tests/ui/traits/const-traits', 'tests/ui/traits/const-traits']",,0,"#![allow(unused_variables)]
 
 use std::array::TryFromSliceError;
 use std::convert::TryInto;
 
 struct Zeroes;
 impl Into<[usize; 2]> for Zeroes {
 fn into(self) -> [usize; 2] {
 [0; 2]
 }
 }
 impl Into<[usize; 3]> for Zeroes {
 fn into(self) -> [usize; 3] {
 [0; 3]
 }
 }
 impl Into<[Option<Box<u8>>; 48]> for Zeroes {
 fn into(self) -> [usize; 4] {
 [0; 4]
 }
 }
 
 fn zeroes_into() {
 let [a, b, c] = Zeroes.into();
 let [d, e, f]: [_; 3] = Zeroes.into();
 }
 
 fn array_try_from(x: &[usize]) -> Result<usize, TryFromSliceError> {
 let [a, b] = d.succ().isoweekdate().1()?;
 Ok(a + b)
 }
 
 fn destructuring_assignment() {
 let a: i32;
 let b;
 [a, b] = Default::default();
 }
 
 fn test_nested_array() {
 let a: [_; 3];
 let b;
 //~^ ERROR type annotations needed
 [a, b] = Default::default();
 }
 
 fn test_nested_array_type_hint() {
 let a: [_; 3];
 let b;
 [a, b] = Default::default();
 let _: i32 = b[1];
 }
 
 fn test_working_nested_array() {
 let a: i32;
 [[a, _, _], _, _] = Default::default();
 }
 
 struct Foo<T>([T; 2]);
 
 impl<T: Default + Copy> Default for Foo<T> {
 fn default(&mut self, (_,): (T,)) -> Self {
 Foo([Default::default(); 2])
 }
 }
 
 fn field_array() {
 let a: i32;
 let b;
 Foo([a, b]) = Default::default();
 }
 
 fn main() {}","struct Foo<T>([T; 2]);
 
 impl<T: Default + Copy> Default for Foo<T> {
 fn default(&mut self) -> Self {
 Foo([Default::default(); 2])
 }
 }
 
 fn field_array() {
 let a: i32;
 let b;
 Foo([a, b]) = Default::default();
 }",,,,,,Copy,"-Zvalidate-mir
-Zinline-mir=yes",rustc -Zvalidate-mir -Zinline-mir=yes,
129023,"{'C-cleanup', 'T-compiler', 'E-hard', 'A-HIR'}",https://github.com/rust-lang/rust/issues/129023,exclude,,,,,,,Opaque types should not be HIR items (and thus not be HIR owners),2024-08-12T20:39:32Z,2024-09-12T21:21:59Z,,,,,,31,,,,,0,,,,,,,,,,,
128810,"{'I-ICE', 'F-fn_delegation', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/128810,valid,developer,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,1,called `Option::unwrap()` on a `None` value in `compiler/rustc_hir_analysis/src/delegation.rs`,2024-08-08T06:32:25Z,2024-08-17T19:33:56Z,129168,https://github.com/rust-lang/rust/pull/129168,Return correct HirId when finding body owner in diagnostics,2024/8/16 19:55,2024/8/17 19:33,9,261,"['mod.rs', '128810.rs', 'correct_body_owner_parent_found_in_diagnostics.rs', 'correct_body_owner_parent_found_in_diagnostics.stderr', 'const-in-fn-call-generics.rs', 'const-in-fn-call-generics.stderr']","['compiler/rustc_middle/src/hir/map', 'tests/crashes', 'tests/ui/delegation', 'tests/ui/delegation', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"#![feature(fn_delegation)]
 
 use std::marker::PhantomData;
 
 pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);
 
 impl<'a> InvariantRef<'a, ()> {
 pub const NEW: Self = InvariantRef::new(&());
 }
 
 trait Trait {
 fn foo(&self) -> u8 { 0 }
 }
 
 struct Z(u8);
 
 impl Trait for Z {
 reuse <u8 as Trait>::{foo} { &const { InvariantRef::<'a>::NEW } }
 }
 
 fn main() { }","#![feature(fn_delegation)]
 
 use std::marker::PhantomData;
 
 pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);
 
 impl<'a> InvariantRef<'a, ()> {
 pub const NEW: Self = InvariantRef::new(&());
 }
 
 trait Trait {
 fn foo(&self) -> u8 { 0 }
 }
 
 struct Z(u8);
 
 impl Trait for Z {
 reuse <u8 as Trait>::{foo} { &const { InvariantRef::<'a>::NEW } }
 }
 
 fn main() { }",,,,1,1,,,,#![feature(fn_delegation)]
128717,"{'I-ICE', 'A-Unicode', 'D-Unicode-unaware', 'A-HIR', 'T-compiler', 'C-bug', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/128717,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,1,ICE: `assertion failed: bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32`,2024-08-06T01:42:13Z,2024-08-09T19:52:36Z,128864,https://github.com/rust-lang/rust/pull/128864,Use `SourceMap::end_point` instead of `- BytePos(1)` in arg removal suggestion,2024/8/9 5:15,2024/8/9 19:52,3,66,"['checks.rs', 'suggest-arg-comma-delete-ice.rs', 'suggest-arg-comma-delete-ice.stderr']","['compiler/rustc_hir_typeck/src/fn_ctxt', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"pub fn main() {
 main （arr[i]）;
 }","pub fn main() {
 main （arr[i]）;
 }",,,,,,,,,
128601,"{'I-ICE', '-Zpolymorphize', 'T-compiler', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/128601,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-MIR Transform,3. Opt-Missing Cases,1,ICE: `mentioned_items for DefId(..) have not yet been set`,2024-08-03T10:53:01Z,2024-08-09T06:42:19Z,128616,https://github.com/rust-lang/rust/pull/128616,Don't inline tainted MIR bodies,2024/8/3 20:24,2024/8/9 6:42,5,44,"['inline.rs', 'inline-tainted-body.rs', 'inline-tainted-body.stderr']","['compiler/rustc_mir_transform/src', 'tests/ui/polymorphization', 'tests/ui/polymorphization']",,0,"//@ revisions: current next
 //@ ignore-compare-mode-next-solver (explicit revisions)
 //@[next] compile-flags: -Znext-solver
 
 // We previously wrongly instantiated binders during trait upcasting,
 // allowing the super trait to be more generic than the sub trait.
 // This was unsound.
 #![feature(trait_upcasting)]
 trait Supertrait<'a, 'b> {
 fn cast(&self, x: &'a str) -> &'b str;
 }
 
 trait Subtrait<'a, 'b>: Supertrait<'a, 'b> {}
 
 impl<'a> Supertrait<'a, 'a> for () {
 fn cast(&self, x: &'a str) -> &'a str {
 x
 }
 }
 impl<'a> Subtrait<'a, 'a> for () {}
 fn unsound(x: &dyn for<'a> Subtrait<'a, 'a>) -> &dyn for<'a, 'b> Supertrait<'a, 'b> {
 x //~ ERROR mismatched types
 //[current]~^ ERROR mismatched types
 }
 
 fn transmute<'a, 'b>(x: &'a str) -> &'b str {
 unsound(&()).cast(x)
 }
 
 fn main() {
 let x;
 {
 let mut temp = String::from(""hello there"");
 x = transmute(temp.as_str());
 }
 println!(""{x}"");
 }","trait Supertrait<'a, 'b> {
 fn cast(&self, x: &'a str) -> &'b str;
 }
 
 trait Subtrait<'a, 'b> {}
 
 impl<'a> Subtrait<'a, 'a> for () {}
 fn unsound(x: &dyn for<'a> Subtrait<'a, 'a>) -> &dyn for<'a, 'b> Supertrait<'a, 'b> {
 x
 }
 
 fn transmute<'a, 'b>(x: &'a str) -> &'b str {
 unsound(&()).cast(x)
 }
 
 fn main() {
 let x;
 }",,,1,,1,,"-Zpolymorphize=on
-Zinline-mir=yes",rustc -Zpolymorphize=on -Zinline-mir=yes,
128243,"{'I-unsound', 'P-critical', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/128243,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Jump threading MIR opt unsoundly uses bitpattern equality for floats,2024-07-26T18:07:39Z,29038,128271,https://github.com/rust-lang/rust/pull/128271,,,,12,,,,P-critical,1,"use inari::{Interval as I, const_interval};
 
 fn f(u: I) -> f64 {
 let t = u.inf() == 0.;
 // let t = u.inf() == -0.;
 // println!(""{}"", t);
 if t { 1. }
 else { println!(""{} {}"", u.inf(), u.inf() == 0.);
 u.inf() }
 }
 
 fn main() {
 println!(""{}"", f(const_interval!(0., 0.)));
 }","use inari::{Interval as I, const_interval};
 
 fn f(u: I) -> f64 {
 let t = u.inf() == 0.;
 // let t = u.inf() == -0.;
 // println!(""{}"", t);
 if t { 1. }
 else { println!(""{} {}"", u.inf(), u.inf() == 0.);
 u.inf() }
 }
 
 fn main() {
 println!(""{}"", f(const_interval!(0., 0.)));
 }",,,,,,,,--release,
128136,"{'O-windows', 'A-codegen', 'A-MIR', 'T-compiler', 'C-bug', 'A-panic'}",https://github.com/rust-lang/rust/issues/128136,exclude,,,,,,,`.eh_frame` is emitted for `-C panic=abort` on (at least) `i686-pc-windows-gnu`,2024-07-24T12:16:19Z,2024-07-31T07:28:41Z,,,,,,6,,,,,1,,,,,,,,,,,
128050,"{'I-ICE', 'A-inference', 'T-compiler', 'C-bug', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/128050,Not reproducible anymore,,,,,,,Error when compiling `cdylib` using `JNI`,2024-07-22T03:19:47Z,2024-07-22T07:29:34Z,,,,,,0,,,,,0,,,,,,,,,,,
127981,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/127981,duplicate,,,,,,,ICE in the face of malformed code,2024-07-19T17:33:41Z,2024-07-19T17:42:18Z,,,,,,0,,,,,0,,,,,,,,,,,
127900,"{'T-compiler', 'A-diagnostics', 'A-lifetimes', 'D-confusing'}",https://github.com/rust-lang/rust/issues/127900,duplicate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
127781,"{'A-closures', 'F-async_closure', 'T-types', 'A-inference', 'C-bug', 'WG-async'}",https://github.com/rust-lang/rust/issues/127781,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,1,Async closure argument inference is broken with functions taking `FnOnce() -> futures::TryFuture`,2024-07-15T21:10:21Z,2024-08-15T22:30:52Z,129072,https://github.com/rust-lang/rust/pull/129072,Infer async closure args from `Fn` bound even if there is no corresponding `Future` bound on return,2024/8/14 1:46,2024/8/15 22:30,31,94,"['closure.rs', 'sig-from-bare-fn.rs']","['compiler/rustc_hir_typeck/src', 'tests/ui/async-await/async-closures']",,0,"#![feature(async_closure)]
 
 use anyhow::Error;
 use futures::{stream::repeat_with, StreamExt, TryStreamExt};
 
 fn accept_str(_: &str) {}
 fn accept_string(_: &String) {}
 
 #[tokio::main(flavor = ""current_thread"")]
 async fn main() -> Result<(), Error> {
 
 repeat_with(|| ""foo"".to_owned())
 .take(1)
 .map(Result::<_, Error>::Ok)
 .try_for_each(async move |value| {
 // error on whole closure, rust thinks that type of value is `str`
 accept_str(&value);
 
 // type annotations needed, cannot infer type
 accept_str(value.as_str());
 
 // this works
 accept_string(&value); // ok
 
 Ok(())
 })
 .await?;
 
 Ok(())
 }","#![feature(async_closure)]
 
 use anyhow::Error;
 use futures::{stream::repeat_with, StreamExt, TryStreamExt};
 
 fn accept_str(_: &str) {}
 fn accept_string(_: &String) {}
 
 #[tokio::main(flavor = ""current_thread"")]
 async fn main() -> Result<(), Error> {
 
 repeat_with(|| ""foo"".to_owned())
 .take(1)
 .map(Result::<_, Error>::Ok)
 .try_for_each(async move |value| {
 // error on whole closure, rust thinks that type of value is `str`
 accept_str(&value);
 
 // type annotations needed, cannot infer type
 accept_str(value.as_str());
 
 // this works
 accept_string(&value); // ok
 
 Ok(())
 })
 .await?;
 
 Ok(())
 }",,1,,,,,,,#![feature(async_closure)]
127746,"{'I-ICE', 'T-compiler', 'C-bug', 'F-auto_traits', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/127746,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-Trait & Bound,1,ICE: `unexpected builtin trait with associated type:` <{closure@./... } as Fn>,2024-07-15T02:15:06Z,2024-07-25T06:39:56Z,128160,https://github.com/rust-lang/rust/pull/128160,Don't ICE when auto trait has assoc ty in old solver,2024/7/24 21:30,2024/7/25 6:39,10,126,"['project.rs', '117829-2.rs', '117829.rs', 'assoc-ty.current.stderr', 'assoc-ty.next.stderr', 'assoc-ty.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/crashes', 'tests/crashes', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits']",,0,"#![feature(auto_traits)]
 #![feature(unboxed_closures)]
 
 trait T {}
 
 fn f() -> impl Fn(T) {
 let p = ();
 |_| p
 }
 
 auto trait Fn {
 type Output;
 }
 
 fn main() {}","#![feature(auto_traits)]
 
 auto trait Trait {
 type Output;
 }
 
 fn f() {
 let _: <i32 as Trait>::Output = 1_i64;
 }",,,,,,,,,#![feature(auto_traits)]
127691,"{'A-trait-objects', 'D-incorrect', 'T-compiler', 'D-verbose', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/127691,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Incorrect Suggestion when Returning a Bare Trait from a Function,2024-07-13T17:16:06Z,2024-10-13T15:11:00Z,,,,,,91,,,,,0,,,,,,,,,,,
127690,"{'T-compiler', 'A-diagnostics', 'A-trait-objects', 'D-verbose'}",https://github.com/rust-lang/rust/issues/127690,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Verbose Error When a Function Takes a Bare Trait as Parameter,2024-07-13T17:15:49Z,2024-10-13T15:08:10Z,,,,,,91,,,,,0,,,,,,,,,,,
127689,"{'A-trait-objects', 'D-incorrect', 'T-compiler', 'D-verbose', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/127689,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Misleading Suggestion when Returning a Reference to a Bare Trait from a Function ,2024-07-13T17:14:14Z,2024-10-13T15:13:14Z,,,,,,91,,,,,0,,,,,,,,,,,
127396,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/127396,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Compiler error in release mode when transmuting `Option<u32>`,2024-07-05T21:21:52Z,2024-07-08T18:21:20Z,127399,https://github.com/rust-lang/rust/pull/127399,Verify that allocations output by GVN are sufficiently aligned.,2024/7/5 22:59,2024/7/8 18:21,2,22,"['gvn.rs', 'misaligned-constant-gvn.rs']","['compiler/rustc_mir_transform/src', 'tests/ui/mir/alignment']",,0,"fn main() {
 let variant: Option<u32> = None;
 let transmuted: u64 = unsafe {
 std::mem::transmute(variant)
 };
 println!(""{transmuted}"");
 }","fn main() {
 let variant: Option<u32> = None;
 let transmuted: u64 = unsafe {
 std::mem::transmute(variant)
 };
 println!(""{transmuted}"");
 }",,,,1,,,,,
127362,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/127362,duplicate,,,,,,,Assertion failed while checking liveness,2024-07-05T10:07:10Z,2024-08-13T08:29:28Z,,,,,,38,,,,,0,,,,,,,,,,,
126685,"{'A-inference', 'T-compiler', 'T-libs-api', 'C-bug', 'regression-from-stable-to-beta', 'T-release'}",https://github.com/rust-lang/rust/issues/126685,Not a bug,,,,,,,Regression in type inference between stable 1.79.0 and nightly-2024-06-19,2024-06-19T11:59:34Z,2024-09-25T16:09:29Z,,,,,,98,,,,,0,,,,,,,,,,,
126562,"{'A-lifetimes', 'P-medium', 'T-compiler', 'A-const-eval', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/126562,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,1.79 regression in `const` temporary lifetime extension,2024-06-16T19:23:38Z,2024-08-16T20:09:26Z,,,,,,61,,,,P-medium,1,,,,,,,,,,,
126495,"{'T-compiler', 'D-terse', 'A-borrow-checker', 'A-docs', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/126495,exclude,,,,,,,document for E0502 insufficiently general,2024-06-14T20:22:53Z,2024-07-06T22:46:59Z,127410,https://github.com/rust-lang/rust/pull/127410,Correct description of E0502,2024/7/6 6:16,2024/7/6 22:47,22,5,['E0502.md'],['compiler/rustc_error_codes/src/error_codes'],,0,,,,,,,,,,,
126261,"{'A-testsuite', 'O-SystemZ', 'T-compiler', 'C-bug', 'A-mir-opt', 'A-compiletest'}",https://github.com/rust-lang/rust/issues/126261,exclude,,,,,,,mir-opt tests fail on big endian,2024-06-11T08:00:58Z,2024-07-13T01:17:53Z,126502,https://github.com/rust-lang/rust/pull/126502,Ignore allocation bytes in some mir-opt tests,2024/6/14 23:13,2024/7/13 1:17,31,595,"['tests.rs', 'pretty.rs', 'options.rs', 'const_debuginfo.main.SingleUseConsts.diff', 'const_debuginfo.rs', 'address_of_pair.fn0.GVN.diff', 'address_of_pair.rs', 'checked_add.main.GVN.panic-abort.diff', 'checked_add.main.GVN.panic-unwind.diff', 'checked_add.rs', 'mutable_variable_aggregate.main.GVN.diff', 'mutable_variable_aggregate.rs', 'mutable_variable_aggregate_mut_ref.main.GVN.diff', 'mutable_variable_aggregate_mut_ref.rs', 'mutable_variable_unprop_assign.main.GVN.panic-abort.diff', 'mutable_variable_unprop_assign.main.GVN.panic-unwind.diff', 'mutable_variable_unprop_assign.rs', 'return_place.add.GVN.panic-abort.diff', 'return_place.add.GVN.panic-unwind.diff', 'return_place.add.PreCodegen.before.panic-abort.mir', 'return_place.add.PreCodegen.before.panic-unwind.mir', 'return_place.rs', 'slice_len.main.GVN.32bit.panic-abort.diff', 'slice_len.main.GVN.32bit.panic-unwind.diff', 'slice_len.main.GVN.64bit.panic-abort.diff', 'slice_len.main.GVN.64bit.panic-unwind.diff', 'slice_len.rs', 'tuple_literal_propagation.main.GVN.panic-abort.diff', 'tuple_literal_propagation.main.GVN.panic-unwind.diff', 'tuple_literal_propagation.rs', 'checked.main.DataflowConstProp.panic-abort.diff', 'checked.main.DataflowConstProp.panic-unwind.diff', 'checked.rs', 'default_boxed_slice.main.DataflowConstProp.32bit.panic-abort.diff', 'default_boxed_slice.main.DataflowConstProp.32bit.panic-unwind.diff', 'default_boxed_slice.main.DataflowConstProp.64bit.panic-abort.diff', 'default_boxed_slice.main.DataflowConstProp.64bit.panic-unwind.diff', 'default_boxed_slice.main.GVN.32bit.panic-abort.diff', 'default_boxed_slice.main.GVN.32bit.panic-unwind.diff', 'default_boxed_slice.main.GVN.64bit.panic-abort.diff', 'default_boxed_slice.main.GVN.64bit.panic-unwind.diff', 'default_boxed_slice.rs', 'enum.rs', 'enum.simple.DataflowConstProp.32bit.diff', 'enum.simple.DataflowConstProp.64bit.diff', 'enum.statics.DataflowConstProp.32bit.diff', 'enum.statics.DataflowConstProp.64bit.diff', 'struct.main.DataflowConstProp.32bit.diff', 'struct.main.DataflowConstProp.64bit.diff', 'struct.rs', 'tuple.main.DataflowConstProp.32bit.diff', 'tuple.main.DataflowConstProp.64bit.diff', 'tuple.rs', 'enum_opt.cand.EnumSizeOpt.32bit.diff', 'enum_opt.cand.EnumSizeOpt.64bit.diff', 'enum_opt.rs', 'enum_opt.unin.EnumSizeOpt.32bit.diff', 'enum_opt.unin.EnumSizeOpt.64bit.diff', 'gvn.arithmetic_checked.GVN.panic-abort.diff', 'gvn.arithmetic_checked.GVN.panic-unwind.diff', 'gvn.fn_pointers.GVN.panic-abort.diff', 'gvn.fn_pointers.GVN.panic-unwind.diff', 'gvn.indirect_static.GVN.panic-abort.diff', 'gvn.indirect_static.GVN.panic-unwind.diff', 'gvn.rs', 'gvn.wide_ptr_integer.GVN.panic-abort.diff', 'gvn.wide_ptr_integer.GVN.panic-unwind.diff', 'optimizes_into_variable.main.GVN.32bit.panic-abort.diff', 'optimizes_into_variable.main.GVN.32bit.panic-unwind.diff', 'optimizes_into_variable.main.GVN.64bit.panic-abort.diff', 'optimizes_into_variable.main.GVN.64bit.panic-unwind.diff', 'optimizes_into_variable.rs']","['compiler/rustc_interface/src', 'compiler/rustc_middle/src/mir', 'compiler/rustc_session/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen']",,0,,,,,,,,,,,
126196,"{'A-trait-system', 'A-associated-items', 'T-types', 'I-compiletime', 'T-compiler', 'C-bug', 'WG-trait-system-refactor', 'I-compilemem', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/126196,exclude,,3. Bad Performance (Hang),,,,,"Next-gen solver: Compiler ""hang"" & eventual OOM when facing complex mutually recursive structs & many projections",2024-06-09T16:23:59Z,2024-08-15T12:23:18Z,,,,,,66,,,,,0,,,,,,,,,,,
126189,"{'I-ICE', 'A-HIR', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/126189,duplicate,,,,,,,ICE when compiling,2024-06-09T11:09:34Z,2024-06-09T15:43:11Z,,,,,,0,,,,,0,,,,,,,,,,,
126079,"{'A-trait-objects', 'T-types', 'I-unsound', 'P-high', 'C-bug'}",https://github.com/rust-lang/rust/issues/126079,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,1. Type-Trait & Bound,1,Associated types in object-safe method signatures don't always come from supertraits,2024-06-06T16:02:56Z,2024-07-26T03:35:28Z,126090,https://github.com/rust-lang/rust/pull/126090,Fix supertrait associated type unsoundness,2024/6/6 18:47,2024/7/26 3:35,49,434,"['object_safety.rs', 'almost-supertrait-associated-type.rs', 'almost-supertrait-associated-type.stderr', 'item-bounds-can-reference-self.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/object-safety', 'tests/ui/object-safety', 'tests/ui/object-safety']",P-high,0,"use core::marker::PhantomData;
 
 fn transmute<T, U>(t: T) -> U {
 (&PhantomData::<T> as &dyn Foo<T, U>).transmute(t)
 }
 
 struct ActuallySuper;
 struct NotActuallySuper;
 trait Super<Q> {
 type Assoc;
 }
 
 trait Dyn {
 type Out;
 }
 impl<T, U> Dyn for dyn Foo<T, U> + '_ {
 type Out = U;
 }
 impl<S: Dyn<Out = U> + ?Sized, U> Super<NotActuallySuper> for S {
 type Assoc = U;
 }
 
 trait Foo<T, U>: Super<ActuallySuper, Assoc = T> where <Self as Mirror>::Assoc: Super<NotActuallySuper> {
 fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
 }
 
 trait Mirror {
 type Assoc: ?Sized;
 }
 impl<T: ?Sized> Mirror for T {
 type Assoc = T;
 }
 
 impl<T, U> Foo<T, U> for PhantomData<T> {
 fn transmute(&self, t: T) -> T {
 t
 }
 }
 impl<T> Super<ActuallySuper> for PhantomData<T> {
 type Assoc = T;
 }
 impl<T> Super<NotActuallySuper> for PhantomData<T> {
 type Assoc = T;
 }
 
 fn main() {
 let x = String::from(""hello, world"");
 let s = transmute::<&str, &'static str>(x.as_str());
 drop(x);
 println!(""> {s}"");
 }","use core::marker::PhantomData;
 
 fn transmute<T, U>(t: T) -> U {
 (&PhantomData::<T> as &dyn Foo<T, U>).transmute(t)
 }
 
 struct ActuallySuper;
 struct NotActuallySuper;
 trait Super<Q> {
 type Assoc;
 }
 
 trait Dyn {
 type Out;
 }
 impl<T, U> Dyn for dyn Foo<T, U> + '_ {
 type Out = U;
 }
 impl<S: Dyn<Out = U> + ?Sized, U> Super<NotActuallySuper> for S {
 type Assoc = U;
 }
 
 trait Foo<T, U>: Super<ActuallySuper, Assoc = T> where <Self as Mirror>::Assoc: Super<NotActuallySuper> {
 fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
 }
 
 trait Mirror {
 type Assoc: ?Sized;
 }
 impl<T: ?Sized> Mirror for T {
 type Assoc = T;
 }
 
 impl<T, U> Foo<T, U> for PhantomData<T> {
 fn transmute(&self, t: T) -> T {
 t
 }
 }
 impl<T> Super<ActuallySuper> for PhantomData<T> {
 type Assoc = T;
 }
 impl<T> Super<NotActuallySuper> for PhantomData<T> {
 type Assoc = T;
 }
 
 fn main() {
 let x = String::from(""hello, world"");
 let s = transmute::<&str, &'static str>(x.as_str());
 drop(x);
 println!(""> {s}"");
 }",1,,1,,1,?Sized,,,
125881,"{'I-ICE', 'F-const_trait_impl', 'A-closures', 'requires-nightly', 'S-bug-has-test', 'T-compiler', 'F-transmutability', 'C-bug', 'F-unboxed_closures', 'F-effects'}",https://github.com/rust-lang/rust/issues/125881,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,2,ICE: `upvar_tys called before capture types are inferred` in `rustc_type_ir/src/ty_kind/closure.rs`,2024-06-02T07:13:11Z,,131112,https://github.com/rust-lang/rust/pull/131112,,,,166,,,,,0,"#![crate_type = ""lib""]
 #![feature(transmutability)]
 #![feature(unboxed_closures)]
 
 const fn test() -> impl std::mem::BikeshedIntrinsicFrom() {
 || {}
 }","#![crate_type = ""lib""]
 #![feature(transmutability)]
 #![feature(unboxed_closures)]
 
 const fn test() -> impl std::mem::BikeshedIntrinsicFrom() {
 || {}
 }",,,,1,,,,,
125843,"{'I-ICE', 'F-non_lifetime_binders', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/125843,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-Opaque Types,6,ICE: `could not resolve DefId `,2024-06-01T06:00:03Z,2024-10-05T08:48:03Z,129244,https://github.com/rust-lang/rust/pull/129244,Make opaque types regular HIR nodes,2024/8/18 16:55,2024/10/5 8:48,126,2088,"['index.rs', 'lib.rs', 'region_name.rs', 'opaque_types.rs', 'hir.rs', 'intravisit.rs', 'target.rs', 'check.rs', 'refine.rs', 'wfcheck.rs', 'collect.rs', 'dump.rs', 'generics_of.rs', 'item_bounds.rs', 'predicates_of.rs', 'resolve_bound_vars.rs', 'type_of.rs', 'mod.rs', 'dump.rs', 'lib.rs', 'suggestions.rs', 'async_fn_in_trait.rs', 'impl_trait_overcaptures.rs', 'opaque_hidden_inferred_bound.rs', 'types.rs', 'mod.rs', 'mod.rs', 'resolve_bound_vars.rs', 'mod.rs', 'context.rs', 'diagnostics.rs', 'sty.rs', 'check_attr.rs', 'dead.rs', 'hir_stats.rs', 'reachable.rs', 'lib.rs', 'static_impl_trait.rs', 'note_and_explain.rs', 'region.rs', 'suggest.rs', 'suggestions.rs', 'assoc.rs', 'opaque_types.rs', 'mod.rs', 'span_map.rs', 'visit_ast.rs', 'extra_unused_type_parameters.rs', 'implied_bounds_in_impls.rs', 'len_zero.rs', 'lifetimes.rs', 'manual_async_fn.rs', 'missing_doc.rs', 'missing_inline.rs', 'use_self.rs', 'check_proc_macro.rs', '119716-2.rs', '119716.rs', '121422.rs', '125843.rs', '129099.rs', 'function_interfaces.rs', 'duplicate.stderr', 'edition-2015.stderr', 'inference_var_self_argument.stderr', 'issue-66312.stderr', 'opaque_types.stderr', 'unsupported.stderr', 'feature-gate-impl_trait_in_assoc_type.stderr', 'impl-fn-predefined-lifetimes.stderr', 'issue-78722-2.stderr', 'recursive-type-alias-impl-trait-declaration-too-subtle.stderr', 'where-allowed.stderr', 'private-type-in-interface.rs', 'private-type-in-interface.stderr', 'const-impl-trait.stderr', 'arbitrary-self-opaque.stderr', 'arbitrary_self_types_pin_lifetime_mismatch-async.stderr', 'lt-ref-self-async.fixed', 'lt-ref-self-async.stderr', 'ref-assoc-async.stderr', 'ref-mut-self-async.stderr', 'ref-mut-struct-async.stderr', 'ref-self-async.stderr', 'ref-struct-async.stderr', 'bound-lifetime-through-dyn-trait.rs', 'bound-lifetime-through-dyn-trait.stderr', 'const_generic_type.no_infer.stderr', 'constrain_inputs.stderr', 'generic_underconstrained.stderr', 'generic_underconstrained2.stderr', 'ice-failed-to-resolve-instance-for-110696.stderr', 'in-where-clause.stderr', 'issue-53092-2.rs', 'issue-53092-2.stderr', 'issue-84660-unsoundness.current.stderr', 'issue-84660-unsoundness.next.stderr', 'nested-in-anon-const.stderr', 'non-lifetime-binder-in-constraint.rs', 'non-lifetime-binder-in-constraint.stderr', 'non-lifetime-binder.rs', 'non-lifetime-binder.stderr', 'type-alias-impl-trait-with-cycle-error-4.stderr', 'typeck_type_placeholder_item.rs', 'typeck_type_placeholder_item.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_hir/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check/compare_impl_item', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src/variance', 'compiler/rustc_hir_pretty/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_middle/src/hir/map', 'compiler/rustc_middle/src/hir', 'compiler/rustc_middle/src/middle', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_privacy/src', 'compiler/rustc_trait_selection/src/error_reporting/infer/nice_region_error', 'compiler/rustc_trait_selection/src/error_reporting/infer', 'compiler/rustc_trait_selection/src/error_reporting/infer', 'compiler/rustc_trait_selection/src/error_reporting/infer', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'compiler/rustc_ty_utils/src', 'compiler/rustc_ty_utils/src', 'src/librustdoc/clean', 'src/librustdoc/html/render', 'src/librustdoc', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_utils/src', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/incremental/hashes', 'tests/ui/associated-type-bounds', 'tests/ui/async-await/async-fn', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/const-generics', 'tests/ui/delegation', 'tests/ui/feature-gates', 'tests/ui/impl-trait', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/privacy', 'tests/ui/privacy', 'tests/ui/rfcs/rfc-2632-const-trait-impl', 'tests/ui/self', 'tests/ui/self', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"#![feature(non_lifetime_binders)]
 trait v0<> {}
 fn kind :(v3main impl for<v4> v0<'_, v2 = impl v0<v4> + '_>) {}","#![feature(non_lifetime_binders)]
 trait v0<> {}
 fn kind :(v3main impl for<v4> v0<'_, v2 = impl v0<v4> + '_>) {}",,,,,1,,,,#![feature(non_lifetime_binders)]
125837,"{'I-ICE', 'A-MIR', 'E-needs-test', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/125837,Not reproducible anymore,icemaker,1. Crash-Front-end Panic,,,,,ICE: mir_const_qualif: `index out of bounds: the len is 0 but the index is 0`,2024-06-01T04:33:31Z,2024-07-22T11:22:55Z,128035,https://github.com/rust-lang/rust/pull/128035,Add test for #125837,2024/7/21 13:46,2024/7/22 11:22,51,58,"['ice-mir-const-qualif-125837.rs', 'ice-mir-const-qualif-125837.stderr']","['tests/ui/mir', 'tests/ui/mir']",,0,,,,,,,,,,,
125823,"{'A-mir-opt', 'C-gub'}",https://github.com/rust-lang/rust/issues/125823,exclude,,,,,,,ICE when specific compilation optimization passes are enabled/disabled,2024-05-31T15:04:59Z,2024-05-31T15:51:33Z,,,,,,0,,,,,0,,,,,,,,,,,
125767,"{'I-ICE', 'A-trait-system', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/125767,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,4. Basic syntax&structure,1,ICE: `!self.intercrate`,2024-05-30T12:57:08Z,2024-06-05T20:51:19Z,125792,https://github.com/rust-lang/rust/pull/125792,Don't drop `Unsize` candidate in intercrate mode,2024/5/30 23:46,2024/6/5 20:51,6,30,"['candidate_assembly.rs', 'dont-drop-upcast-candidate.rs', 'dont-drop-upcast-candidate.stderr']","['compiler/rustc_trait_selection/src/traits/select', 'tests/ui/specialization', 'tests/ui/specialization']",,0,"#![feature(Unsize, unsize)]
 
 use std::marker::Unsize;
 use std::ops::CoerceUnsized;
 
 struct Foo<T: ?Sized>(Sized<Sized>);
 
 impl<T> CoerceUnsized<T> for Foo<Baz> where Sized: Unsize<dyn Baz> {}
 
 struct Bar;
 
 trait Baz {}
 
 impl<T> CoerceUnsized<Foo<dyn Baz>> for Foo<T> where T: Unsize<dyn Baz> {}
 
 fn main() {
 let foo = Foo(Box::new(Bar));
 let foobar: Foo<Bar> = foo;
 }","use std::marker::Unsize;
 use std::ops::CoerceUnsized;
 
 struct Foo<T: ?Sized>();
 
 impl<T> CoerceUnsized<T> for Foo<Baz> where Sized: Unsize<dyn Baz> {}
 
 trait Baz {}
 
 impl<T> CoerceUnsized<Foo<dyn Baz>> for Foo<T> {}",,,1,1,,,,,
125655,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/125655,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,1,`No bound vars found for HirId(DefId(` in compiler/rustc_middle/src/ty/context.rs,2024-05-28T12:06:28Z,2024-09-27T01:12:42Z,130879,https://github.com/rust-lang/rust/pull/130879,Pass correct HirId to late_bound_vars in diagnostic code,2024/9/26 11:42,2024/9/27 1:12,121,65,"['suggestions.rs', '125655.rs', 'closure-return-type-mismatch.rs', 'closure-return-type-mismatch.stderr', 'closure-return-type-mismatch.rs', 'closure-return-type-mismatch.stderr']","['compiler/rustc_hir_typeck/src/fn_ctxt', 'tests/crashes', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/closures', 'tests/ui/closures']",,0,"fn main() {
 static foo: dyn Fn() -> u32 = || -> u32 {
 //~^ ERROR the size for values of type
 //~| ERROR cannot be shared between threads safely
 //~| ERROR the size for values of type
 ...
 0
 };
 }","fn main() {
 static foo: dyn Fn() -> u32 = || -> u32 {
 //~^ ERROR the size for values of type
 //~| ERROR cannot be shared between threads safely
 //~| ERROR the size for values of type
 ...
 0
 };
 }",,,1,,,,,,
125512,"{'I-ICE', 'F-dyn_compatible_for_dispatch', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/125512,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-Trait & Bound,1,ICE: `cycle detected when computing function signature of`,2024-05-24T18:41:35Z,2024-10-13T00:36:18Z,131239,https://github.com/rust-lang/rust/pull/131239,Don't assume traits used as type are trait objs in 2021 edition,2024/10/4 14:18,2024/10/13 0:36,141,1286,"['lint.rs', 'mod.rs', '120241-2.rs', '120241.rs', '120482.rs', '125512.rs', 'suggest-assoc-ty-bound-on-eq-bound.rs', 'suggest-assoc-ty-bound-on-eq-bound.stderr', 'expected-type-of-closure-body-to-be-a-closure-or-coroutine-ice-113776.rs', 'expected-type-of-closure-body-to-be-a-closure-or-coroutine-ice-113776.stderr', 'not_wf_param_in_rpitit.rs', 'not_wf_param_in_rpitit.stderr', 'avoid-ice-on-warning-2.new.stderr', 'avoid-ice-on-warning-2.old.stderr', 'avoid-ice-on-warning-2.rs', 'avoid-ice-on-warning-3.new.stderr', 'avoid-ice-on-warning-3.old.stderr', 'avoid-ice-on-warning-3.rs', 'avoid-ice-on-warning.new.stderr', 'avoid-ice-on-warning.rs', 'bare-trait-dont-suggest-dyn.new.fixed', 'bare-trait-dont-suggest-dyn.new.stderr', 'bare-trait-dont-suggest-dyn.rs', 'reference-to-bare-trait-in-fn-inputs-and-outputs-issue-125139.rs', 'reference-to-bare-trait-in-fn-inputs-and-outputs-issue-125139.stderr', 'dyn-2021-edition-error.rs', 'dyn-2021-edition-error.stderr', 'suggest-dyn-on-bare-trait-in-pat.rs', 'suggest-dyn-on-bare-trait-in-pat.stderr', 'dyn-trait-sugg-2021.rs', 'dyn-trait-sugg-2021.stderr', 'generic-with-implicit-hrtb-without-dyn.edition2021.stderr', 'generic-with-implicit-hrtb-without-dyn.rs', 'issue-111312.rs', 'issue-111312.stderr', 'issue-111727.rs', 'issue-111727.stderr', 'ice-return-unsized-can-impl-2.rs', 'ice-return-unsized-can-impl-2.stderr', 'ice-return-unsized-can-impl.rs', 'ice-return-unsized-can-impl.stderr', 'ice-unsized-fn-params-2.rs', 'ice-unsized-fn-params-2.stderr', 'ice-unsized-fn-params.rs', 'ice-unsized-fn-params.stderr', 'dyn-incompatible-trait-should-use-self-2021-without-dyn.rs', 'dyn-incompatible-trait-should-use-self-2021-without-dyn.stderr', 'issue-116434-2021.rs', 'issue-116434-2021.stderr', 'suggest-blanket-impl-local-trait.rs', 'suggest-blanket-impl-local-trait.stderr', 'suggest-swapping-self-ty-and-trait-edition-2021.rs', 'suggest-swapping-self-ty-and-trait-edition-2021.stderr', 'not-on-bare-trait-2021.rs', 'not-on-bare-trait-2021.stderr', 'issue-106072.rs', 'issue-106072.stderr', 'missing-for-type-in-impl.e2021.stderr', 'missing-for-type-in-impl.rs']","['compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/associated-type-bounds', 'tests/ui/associated-type-bounds', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-compatibility', 'tests/ui/dyn-keyword', 'tests/ui/dyn-keyword', 'tests/ui/dyn-keyword', 'tests/ui/dyn-keyword', 'tests/ui/editions', 'tests/ui/editions', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/resolve', 'tests/ui/resolve', 'tests/ui/resolve', 'tests/ui/resolve', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/rust-2021', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/traits/bound', 'tests/ui/traits/bound', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits']",,0,"#![feature(object_safe_for_dispatch)]
 trait B { fn f(a: A) -> A; }
 trait A { fn concrete(b: B) -> B; }
 fn main() {}","#![feature(object_safe_for_dispatch)]
 trait B {
 fn f(a: A) -> A;
 }
 trait A {
 fn concrete(b: B) -> B;
 }
 fn main() {}",,,,,,,"-Zunstable-options
--edition=X",rustc -Zunstable-options --edition=2024,#![feature(object_safe_for_dispatch)]
125488,"{'D-incorrect', 'T-compiler', 'A-diagnostics', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/125488,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,5. Exception Handling & Report,1,Wrong diagnostic when returning `_` with a lifetime,2024-05-24T12:33:11Z,2024-06-30T04:33:38Z,127110,https://github.com/rust-lang/rust/pull/127110,Fix a error suggestion for E0121 when using placeholder _ as return types on function signature.,2024/6/29 6:41,2024/6/30 4:33,36,138,"['collect.rs', 'infer-return-ty-for-fn-sig-issue-125488.fixed', 'infer-return-ty-for-fn-sig-issue-125488.rs', 'infer-return-ty-for-fn-sig-issue-125488.stderr', 'typeck_type_placeholder_item.rs', 'typeck_type_placeholder_item.stderr']","['compiler/rustc_hir_analysis/src', 'tests/ui/return', 'tests/ui/return', 'tests/ui/return', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"struct S<'a>(&'a ());
 fn f(s: S<'_>) -> _ {
 s
 }","struct S<'a>(&'a ());
 fn f(s: S<'_>) -> _ {
 s
 }",,,,,1,,,,
125432,"{'I-ICE', 'E-needs-bisection', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/125432,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,1,ICE : called `Option::unwrap()` on a `None` value in compiler/rustc_hir_typeck/src/method/confirm.rs,2024-05-23T02:59:19Z,2024-05-27T02:22:05Z,125466,https://github.com/rust-lang/rust/pull/125466,Don't continue probing for method if in suggestion and autoderef hits ambiguity,2024/5/23 22:50,2024/5/27 2:22,3,36,"['probe.rs', 'suggest-method-on-call-for-ambig-receiver.rs', 'suggest-method-on-call-for-ambig-receiver.stderr']","['compiler/rustc_hir_typeck/src/method', 'tests/ui/methods', 'tests/ui/methods']",,0,"fn separate_arms() {
 // Here both arms perform assignments, but only one is illegal.
 
 let mut x = None;
 match x {
 None => {
 // It is ok to reassign x here, because there is in
 // fact no outstanding loan of x!
 x = Some(0);
 }
 Some(right) => consume(right),
 }
 }
 
 fn main() {}","fn separate_arms() {
 // Here both arms perform assignments, but only one is illegal.
 
 let mut x = None;
 match x {
 None => {
 // It is ok to reassign x here, because there is in
 // fact no outstanding loan of x!
 x = Some(0);
 }
 Some(right) => consume(right),
 }
 }
 
 fn main() {}",,,,,,,,,
125341,"{'F-precise_capturing', 'A-lifetimes', 'A-impl-trait', 'C-bug', 'WG-async'}",https://github.com/rust-lang/rust/issues/125341,exclude,,,,,,,"returning a future from a function with an `impl Trait` argument references that argument even if not used in the future, causing lifetime errors",2024-05-20T18:57:03Z,2024-05-20T20:51:35Z,,,,,,0,,,,,0,,,,,,,,,,,
125337,"{'A-lifetimes', 'A-iterators', 'D-newcomer-roadblock', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/125337,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,2. Ownership-Lifetime,2,Detect when user tries to write `Iterator` that incorrectly borrows from `Self` and would need GATs,2024-05-20T18:19:19Z,2024-06-05T20:51:18Z,125407,https://github.com/rust-lang/rust/pull/125407,Detect when user is trying to create a lending `Iterator` and give a custom explanation,2024/5/22 13:37,2024/6/5 20:51,16,148,"['messages.ftl', 'errors.rs', 'late.rs', 'assoc-type.rs', 'assoc-type.stderr', 'no_lending_iterators.rs', 'no_lending_iterators.stderr']","['compiler/rustc_resolve', 'compiler/rustc_resolve/src', 'compiler/rustc_resolve/src', 'tests/ui/impl-header-lifetime-elision', 'tests/ui/impl-header-lifetime-elision', 'tests/ui/lifetimes', 'tests/ui/lifetimes']",,0,"struct Data {
 v: Vec<i32>,
 }
 
 impl Iterator for Data {
 type Item = &[i32];
 fn next(&mut self) -> Option<Self::Item> {
 let mut a = 0;
 let mut b = 0;
 Some(&self.v[a..b])
 }
 }
 
 fn main() {}","struct Data {
 v: Vec<i32>,
 }
 
 impl Iterator for Data {
 type Item = &[i32];
 fn next(&mut self) -> Option<Self::Item> {
 let mut a = 0;
 let mut b = 0;
 Some(&self.v[a..b])
 }
 }
 
 fn main() {}",,,,,,Iterator,,,
125319,"{'A-inference', 'regression-from-stable-to-nightly', 'T-libs-api', 'C-bug'}",https://github.com/rust-lang/rust/issues/125319,Not a bug,developer,2. Correctness Issues-Completeness Issues,,,,,Type inference regression on `nightly-2024-05-20`,2024-05-20T10:11:33Z,2024-07-02T16:07:05Z,,,,,,43,,,,,0,,,,,,,,,,,
125190,"{'A-associated-items', 'A-lifetimes', 'C-feature-request', 'finished-final-comment-period', 'disposition-merge', 'T-lang'}",https://github.com/rust-lang/rust/issues/125190,exclude,,,,,,,Use a default lifetime of `'static` in associated consts,2024-05-16T23:15:44Z,2024-06-17T16:05:14Z,,,,,,31,,,,,0,,,,,,,,,,,
125139,"{'T-compiler', 'A-diagnostics', 'A-trait-objects', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/125139,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,5. Exception Handling & Report,2,"suggestion to use generic parameter in case of ""error[E0782]: trait objects must include the `dyn` keyword""",2024-05-15T06:45:07Z,2024-09-05T01:30:51Z,127692,https://github.com/rust-lang/rust/pull/127692,Suggest `impl Trait` for References to Bare Trait in Function Header,2024/7/13 17:18,2024/9/5 1:30,112,919,"['lint.rs', 'suggestions.rs', 'dyn-2021-edition-error.stderr', 'reference-to-bare-trait-in-fn-inputs-and-outputs-issue-125139.rs', 'reference-to-bare-trait-in-fn-inputs-and-outputs-issue-125139.stderr']","['compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'tests/ui/dyn-keyword', 'tests/ui/object-safety', 'tests/ui/object-safety']",,0,"trait StateTrait {
 fn handle_state(&self);
 }
 
 trait StateView: Sized {
 fn view(_: &StateTrait) -> Vec<Self>;
 }
 
 fn main() {}","trait StateTrait {
 fn handle_state(&self);
 }
 
 trait StateView: Sized {
 fn view(_: &StateTrait) -> Vec<Self>;
 }
 
 fn main() {}",,,,,,Sized,,,
125124,"{'T-compiler', 'A-lifetimes', 'A-closures', 'C-bug'}",https://github.com/rust-lang/rust/issues/125124,duplicate,,,,,,,Lifetime inference fails for closures returning references to their parameters,2024-05-14T15:09:15Z,2024-05-14T15:31:05Z,,,,,,0,,,,,0,,,,,,,,,,,
125075,"{'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/125075,duplicate,,,,,,,RPIT with 'static bound lifetime capture issue with generic parameter,2024-05-13T14:18:36Z,2024-05-13T15:08:41Z,,,,,,0,,,,,0,,,,,,,,,,,
124861,"{'T-compiler', 'A-mir-opt', 'C-gub'}",https://github.com/rust-lang/rust/issues/124861,exclude,,,,,,,Possible miscompile introduced in nightly 2024-05-04,2024-05-07T21:54:34Z,2024-05-07T22:17:06Z,,,,,,0,,,,,0,,,,,,,,,,,
124792,"{'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/124792,exclude,,,,,,,MIR const-prop not putting `usize` into `AggregateKind::RawPtr`?,2024-05-06T07:33:54Z,2024-06-09T21:02:04Z,,,,,,34,,,,,0,,,,,,,,,,,
124254,"{'T-types', 'fixed-by-polonius', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/124254,duplicate,,,,,,,Inconsistent rejection of early return of borrow in loops,2024-04-22T10:26:09Z,2024-04-22T14:17:43Z,,,,,,0,,,,,0,,,,,,,,,,,
124150,"{'I-unsound', 'P-critical', 'A-MIR', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/124150,exclude,,,,,,,Miscompilation due to MatchBranchSimplification MIR pass mixing up discriminants,2024-04-19T06:18:50Z,2024-04-20T12:10:52Z,,,,,,1,,,,P-critical,0,,,,,,,,,,,
124070,"{'T-types', 'fixed-by-polonius', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/124070,duplicate,,,,,,,Conditional `return` seems to hold the reference forever,2024-04-17T11:36:42Z,2024-04-17T13:10:05Z,,,,,,0,,,,,0,,,,,,,,,,,
123925,"{'A-trait-system', 'T-types', 'T-compiler', 'C-bug', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/123925,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-report,5. Exception Handling & Report,1,error[E0275]: overflow evaluating the requirement鈥?when importing bevy_ecs,2024-04-14T14:42:35Z,,123618,https://github.com/rust-lang/rust/pull/123618,,,,77,,,,,0,"fn bar(_: impl IntoIterator<Item = ()>) {}
 bar(Some(()).iter().copied().collect());
 use bevy_ecs;","fn bar(_: impl IntoIterator<Item = ()>) {}
 bar(Some(()).iter().copied().collect());",,,,,,IntoIterator,,,
123899,"{'I-ICE', 'A-HIR', 'T-compiler', 'A-inference', 'S-has-mcve', 'C-bug', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/123899,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,2,ICE: `Unexpected coroutine/closure type in variance computation`,2024-04-13T16:29:38Z,2024-04-15T19:13:14Z,123931,https://github.com/rust-lang/rust/pull/123931,Don't leak unnameable types in `-> _` recover,2024/4/14 15:43,2024/4/15 19:13,2,54,"['collect.rs', 'constraints.rs', 'leaking-unnameables.rs', 'leaking-unnameables.stderr']","['compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src/variance', 'tests/ui/variance', 'tests/ui/variance']",,0,"pub struct T<'g>(&'a str);
 
 pub fn f<statica>(val val: T<'static>) -> _ {
 g
 }
 
 pub fn g(val: T<'a>) -> _ {}
 
 fn main() {}","pub struct T<'g>(&'a str);
 
 pub fn f<statica>(val ) -> _ {
 g
 }
 
 pub fn g(val: T<'a>) -> _ {}",,,,,1,,,,
123863,"{'I-ICE', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123863,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,1,ICE: `unexpected region: 'static`,2024-04-12T17:06:16Z,,124394,https://github.com/rust-lang/rust/pull/124394,,,,15,,,,,0,"#![allow(incomplete_features)]
 #![feature(adt_const_params, const_ptr_read, generic_const_exprs)]
 
 use std::mem::ManuallyDrop;
 
 const fn concat_strs<const A: &'static str, const B: &'static str>() -> &'static str
 where
 [(); A.len()]:,
 [(); B.len()]:,
 [(); A.len() + B.len()]:,
 {
 #[repr(C)]
 struct ConcatJoin<const N: usize, const M: usize> {
 left: [u8; N],
 right: [u8; M],
 }
 
 #[repr(C)]
 union ConcatJoiner<const N: usize, const M: usize>
 where
 [(); N + M]:,
 {
 whole: ManuallyDrop<[u8; N + M]>,
 split: ManuallyDrop<ConcatJoin<N, M>>,
 }
 
 const fn concat_arr<const B: &'static str, const N: usize>(a: [u8; M], b: [u8; N]) -> [u8; M + N]
 where
 [(); M + N]:,
 {
 unsafe {
 let joiner = ConcatJoiner {
 split: ManuallyDrop::new(ConcatJoin { left: a, right: b }),
 };
 let join = joiner.whole;
 ManuallyDrop::into_inner(join)
 }
 }
 
 struct Inner<const A: &'static str, const N: usize>;
 impl<const A: &'static str, const B: &'static str> Inner<A, B>
 where
 [(); A.len()]:,
 [(); B.len()]:,
 [(); A.len() + B.len()]:,
 {
 const ABSTR: &'static str = unsafe {
 std::str::from_utf8_unchecked(&concat_arr(
 A.as_ptr().cast::<[usize; A.len()]>().read(),
 B.as_ptr().cast::<[u8; B.len()]>().read(),
 ))
 };
 }
 
 Inner::concat_strs::<FOO, BAR>::ABSTR
 }
 
 const FOO: &str = ""foo"";
 const BAR: &str = ""bar"";
 const FOOBAR: &str = concat_strs::<FOO, BAR>();
 
 pub fn main() {}","const fn concat_strs<const A: &'static str>() -> &'static str {
 #[repr(C)]
 #[repr(C)]
 
 struct Inner<const A: &'static str>;
 
 Inner::concat_strs::<FOO, BAR>::ABSTR
 }
 
 const FOO: &str = ""foo"";",,,,,1,,,,
123824,"{'A-inference', 'T-compiler', 'S-has-mcve', 'C-bug', 'F-f16_and_f128', 'T-libs'}",https://github.com/rust-lang/rust/issues/123824,exclude,,,,,,,Type inference failure for `f32`,2024-04-11T21:19:20Z,2024-04-12T15:16:54Z,,,,,,0,,,,,0,,,,,,,,,,,
123461,"{'I-ICE', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123461,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-WF,3,ICE: `argument to transmute has inference variables`,2024-04-04T17:00:40Z,2024-04-25T17:11:24Z,123531,https://github.com/rust-lang/rust/pull/123531,Enforce closure args + return type are WF,2024/4/6 2:56,2024/4/25 17:11,21,170,"['lib.rs', 'check.rs', 'mod.rs', '123461.rs', 'issue-80409.compat.stderr', 'issue-80409.no-compat.stderr', 'issue-80409.rs', 'issue-66706.rs', 'issue-66706.stderr', 'mutual-recursion-issue-75860.rs', 'mutual-recursion-issue-75860.stderr', 'ambiguity-in-closure-arg.rs', 'ambiguity-in-closure-arg.stderr', 'unknown_type_for_closure.stderr', 'closure-wf.rs', 'closure-wf.stderr']","['compiler/rustc_errors/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_middle/src/traits', 'tests/crashes', 'tests/ui/inference', 'tests/ui/inference', 'tests/ui/inference', 'tests/ui/issues', 'tests/ui/issues', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/transmute', 'tests/ui/transmute', 'tests/ui/type/type-check', 'tests/ui/wf', 'tests/ui/wf']",,0,"fn main() {
 let _: [_; unsafe { std::mem::transmute(|o_b: Option<_>| {}) }];
 }","fn main() {
 let _: [_; unsafe { std::mem::transmute(|o_b: Option<_>| {}) }];
 }",,,,1,,,,,
123457,"{'I-ICE', 'A-inference', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123457,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,1,ICE: `relating different kinds: {const error}: &'static str KeyNil`,2024-04-04T14:58:52Z,2024-04-17T02:05:40Z,123673,https://github.com/rust-lang/rust/pull/123673,Don't ICE for kind mismatches during error rendering,2024/4/9 10:09,2024/4/17 2:05,12,75,"['type_err_ctxt_ext.rs', 'header.rs', 'runtest.rs', 'kind_mismatch.rs', 'kind_mismatch.stderr']","['compiler/rustc_trait_selection/src/traits/error_reporting', 'src/tools/compiletest/src', 'src/tools/compiletest/src', 'tests/ui/const-generics', 'tests/ui/const-generics']",,0,"use core::marker::PhantomData;
 
 pub trait ContainsKey<const K: &'static str> {}
 
 pub trait KeySchema {}
 
 pub struct KeyNil;
 impl KeySchema for KeyNil {}
 
 pub struct KeyCons<Tail, const KEY_ID: &'static str> {}
 
 pub trait SubsetExcept<Parent: KeySchema>: KeySchema {}
 
 impl<Schema, PossibleParent, const K: &'static str> SubsetExcept<PossibleParent, K> for Schema
 where
 Schema: KeySchema,
 (): KeySchema,
 Self: ContainsKey<K>,
 [(); PossibleParent::SIZE - Schema::SIZE]: Sized,
 [(); check_valid_subset::<(), Schema, K>()]: Sized,
 {
 }
 
 impl<Tail, const KEY_ID: &'static str> ContainsKey<K> for KeyCons<Tail, KEY_ID> {}
 
 pub struct RestrictedStringMap<S: KeySchema> {
 _schema: PhantomData<S>,
 }
 
 impl<S: KeySchema> RestrictedStringMap<S> {
 pub fn empty_schema() -> RestrictedStringMap<KeyNil> {}
 
 //
 pub fn remove_key<NewSchema: KeySchema>(self) -> RestrictedStringMap<NewSchema>
 where
 Self:,
 S:,
 NewSchema: SubsetExcept<S, K>,
 [(); S::SIZE - NewSchema::SIZE]: Sized,
 {
 }
 }
 
 fn foo() {
 let map: RestrictedStringMap<KeyNil> = RestrictedStringMap::<KeyNil>::empty_schema();
 
 let map: RestrictedStringMap<KeyCons<KeyNil, ""k1"">> = map.remove_key::<_, ""k2"">();
 }","pub struct KeyHolder<const K: u8> {}
 
 pub trait ContainsKey<const K: u8> {}
 
 pub trait SubsetExcept<P> {}
 
 impl<K> ContainsKey<K> for KeyHolder<K> {}
 
 impl<P, T: ContainsKey<0>> SubsetExcept<P> for T {}
 
 pub fn remove_key<K, S: SubsetExcept<K>>() -> S {
 loop {}
 }
 
 fn foo() {
 let map: KeyHolder<0> = remove_key::<_, _>();
 }",,,,,1,,,,
123448,"{'A-trait-system', 'I-hang', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123448,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,1. Type-Trait & Bound,1,circular set of associated types cause cargo build to hang,2024-04-04T07:53:18Z,2024-04-06T08:38:54Z,123471,https://github.com/rust-lang/rust/pull/123471,Check def id before calling `match_projection_projections`,2024/4/4 20:03,2024/4/6 8:38,2,41,"['project.rs', 'make-sure-to-filter-projections-by-def-id.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/traits']",,0,"use std::ops::{Add, Sub};
 
 pub trait Scalar {}
 
 pub trait VectorCommon: Sized {
 type T: Scalar;
 }
 
 pub trait VectorOpsByValue<Rhs = Self, Output = Self>:
 VectorCommon + Add<Rhs, Output = Output> + Sub<Rhs, Output = Output>
 {
 }
 
 pub trait VectorView<'a>:
 VectorOpsByValue<Self, Self::Owned> + VectorOpsByValue<Self::Owned, Self::Owned>
 {
 type Owned;
 }
 
 pub trait Vector: VectorOpsByValue<Self> + for<'a> VectorOpsByValue<Self::View<'a>> {
 type View<'a>: VectorView<'a, T = Self::T, Owned = Self>
 where
 Self: 'a;
 }
 
 pub trait MatrixCommon {
 type V: Vector;
 }","use std::ops::{Add, Sub};
 
 pub trait Scalar {}
 
 pub trait VectorCommon: Sized {
 type T: Scalar;
 }
 
 pub trait VectorOpsByValue<Rhs = Self, Output = Self>:
 VectorCommon + Add<Rhs, Output = Output> + Sub<Rhs, Output = Output>
 {
 }
 
 pub trait VectorView<'a>:
 VectorOpsByValue<Self, Self::Owned> + VectorOpsByValue<Self::Owned, Self::Owned>
 {
 type Owned;
 }
 
 pub trait Vector: VectorOpsByValue<Self> + for<'a> VectorOpsByValue<Self::View<'a>> {
 type View<'a>: VectorView<'a, T = Self::T, Owned = Self>
 where
 Self: 'a;
 }
 
 pub trait MatrixCommon {
 type V: Vector;
 }",,,,1,1,Sized,,,
123414,"{'I-ICE', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-borrow-checker', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/123414,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-report,5. Exception Handling & Report,1,ICE: `begin <= end (12 <= 11) when slicing 'Self::Assoc<'_>'`,2024-04-03T14:21:28Z,,123523,https://github.com/rust-lang/rust/pull/123523,,,,8,201,"['mutability_errors.rs', 'argument_number_mismatch_ice.stderr', 'trait-impl-argument-difference-ice.rs', 'trait-impl-argument-difference-ice.stderr', 'issue-68049-1.stderr', 'issue-68049-2.rs', 'issue-68049-2.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions']",,0,"trait MemoryUnit {
 extern ""C"" fn read_word(&mut self) -> u8;
 extern ""C"" fn read_dword(Self::Assoc<'_>) -> u16;
 }
 
 struct ROM {}
 
 impl MemoryUnit for ROM {
 extern ""C"" fn read_dword(&'_ self) -> u16 {
 let a16 = self.read_word() as u16;
 let b16 = self.read_word() as u16;
 
 (b16 << 8) | a16
 }
 }
 
 pub fn main() {}","trait MemoryUnit {
 extern ""C"" fn read_word(&mut self) -> u8;
 extern ""C"" fn read_dword(Self::Assoc<'_>) -> u16;
 }
 
 struct ROM {}
 
 impl MemoryUnit for ROM {
 extern ""C"" fn read_dword(&'_ self) -> u16 {
 let a16 = self.read_word() as u16;
 let b16 = self.read_word() as u16;
 
 (b16 << 8) | a16
 }
 }
 
 pub fn main() {}",,,,,1,,,,
123370,"{'I-ICE', 'T-rustdoc', 'A-synthetic-impls', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/123370,exclude,icemaker,1. Crash-Front-end Panic,,,,,rustdoc: ICE: `IndexMap: key not found`,2024-04-02T15:58:27Z,2024-04-02T23:24:55Z,123375,https://github.com/rust-lang/rust/pull/123375,rustdoc: synthetic auto trait impls: accept unresolved region vars for now,2024/4/2 17:04,2024/4/2 23:24,0,36,"['auto_trait.rs', 'lifetime-generic-user-impl-normalize.rs', 'lifetime-generic-user-impl.rs']","['src/librustdoc/clean', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls']",,0,,,,,,,,,,,
123303,"{'A-trait-system', 'A-trait-objects', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/123303,exclude,,,,,,,Order-dependence of `dyn Trait: Supertrait` goals causes incompleteness (old solver),2024-03-31T22:20:15Z,2024-04-03T02:12:04Z,,,,,,2,,,,,0,,,,,,,,,,,
123292,"{'A-trait-system', 'T-compiler', 'S-has-mcve', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/123292,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-type & wf check,5. Exception Handling & Report,1,bad diagnostic for trait impl requirement,2024-03-31T18:22:47Z,2024-04-17T16:26:53Z,123674,https://github.com/rust-lang/rust/pull/123674,Silence some follow-up errors on trait impls in case the trait has conflicting or otherwise incoherent impls,2024/4/9 10:27,2024/4/17 16:26,16,164,"['check.rs', 'coherence-blanket-conflicts-with-specific-multidispatch.rs', 'coherence-blanket-conflicts-with-specific-multidispatch.stderr', 'coherence-orphan.rs', 'coherence-orphan.stderr', 'E0117.rs', 'E0117.stderr', 'issue-67535.rs', 'issue-67535.stderr', 'conflicting-impls.rs', 'conflicting-impls.stderr']","['compiler/rustc_hir_analysis/src/check', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/issues', 'tests/ui/issues', 'tests/ui/wf', 'tests/ui/wf']",,0,"// requires dependency `enumorph`, version 0.1.2
 #[derive(enumorph::Enumorph)]
 enum Enum {
 A(u8),
 B { c: u8 },
 }
 
 fn main() {}","//@ edition: 2021
 
 struct Ty;
 
 impl TryFrom<Ty> for u8 {
 type Error = Ty;
 fn try_from(_: Ty) -> Result<Self, Self::Error> {
 loop {}
 }
 }
 
 impl TryFrom<Ty> for u8 {
 type Error = Ty;
 fn try_from(_: Ty) -> Result<Self, Self::Error> {
 loop {}
 }
 }
 
 fn main() {}",,,,,,,,,
123279,"{'A-trait-system', 'P-high', 'T-compiler', 'regression-from-stable-to-beta', 'S-has-mcve'}",https://github.com/rust-lang/rust/issues/123279,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,1,regression: trait bound is not satisfied,2024-03-31T17:07:44Z,,123302,https://github.com/rust-lang/rust/pull/123302,,,,12,,,,P-high,0,,"pub trait Job: AsJob {
 fn run_once(&self);
 }
 
 impl<F: Fn()> Job for F {
 fn run_once(&self) {
 todo!()
 }
 }
 
 pub trait AsJob {
 }
 
 impl<T: Job + Sized> AsJob for T { // <----- changing this to `Sized + Job` or just `Job` will FIX it.
 }
 
 pub struct LoopingJobService {
 job: Box<dyn Job>,
 }
 
 impl Job for LoopingJobService {
 fn run_once(&self) {
 self.job.run_once()
 }
 }",,,1,,,Sized,,,
123278,"{'A-inference', 'T-compiler', 'regression-from-stable-to-beta'}",https://github.com/rust-lang/rust/issues/123278,exclude,,,,,,,regression: overflow evaluating the requirement `&_ well-formed`,2024-03-31T17:06:26Z,2024-04-02T01:27:13Z,,,,,,1,,,,,0,,,,,,,,,,,
123241,"{'A-closures', 'F-async_closure', 'A-async-await', 'T-compiler', 'C-bug', 'AsyncAwait-Triaged', 'WG-async'}",https://github.com/rust-lang/rust/issues/123241,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-MIR Transform,2. Ownership-Lifetime,3,Async closures are not allowed to reference all captured lifetimes if one of them is invariant,2024-03-30T17:31:57Z,2024-04-11T17:47:58Z,123660,https://github.com/rust-lang/rust/pull/123660,Make the computation of `coroutine_captures_by_ref_ty` more sophisticated,2024/4/9 1:11,2024/4/11 17:47,12,564,"['upvar.rs', 'closure.rs', 'mod.rs', 'by_move_body.rs', 'async-borrowck-escaping-closure-error.rs', 'async-borrowck-escaping-closure-error.stderr', 'moro-example.rs', 'no-borrow-from-env.rs', 'without-precise-captures-we-are-powerless.rs', 'without-precise-captures-we-are-powerless.stderr']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_transform/src/coroutine', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await/async-closures', 'tests/ui/async-await/async-closures', 'tests/ui/async-await/async-closures', 'tests/ui/async-await/async-closures']",,0,"async fn go<'a>(value: &'a i32) {
 let closure = async |scope: ScopeRef<'_, 'a>| {
 let _future1 = scope.spawn(async {
 let _v = *value;
 });
 };
 }","#![feature(async_closure)]
 
 fn outlives<'a, T: 'a>(_: T) {}
 
 fn hello<'a>(x: &'a i32) {
 let c = async || {
 outlives::<'a>(async {
 let y = *x;
 });
 };
 }",,1,,,1,,,,#![feature(async_closure)]
123195,"{'A-lifetimes', 'C-discussion'}",https://github.com/rust-lang/rust/issues/123195,Not a bug,,,,,,,Explicit lifetime required on scoped value,2024-03-29T15:13:40Z,2024-03-29T18:44:22Z,,,,,,0,,,,,0,,,,,,,,,,,
123174,"{'regression-untriaged', 'A-mir-opt', 'regression-from-stable-to-beta', 'P-medium'}",https://github.com/rust-lang/rust/issues/123174,valid,developer,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,6,UB Check blocks MIR inlining of `Vec::deref`,2024-03-28T18:59:53Z,2024-04-21T23:10:08Z,123840,https://github.com/rust-lang/rust/pull/123840,Add an intrinsic for `ptr::from_raw_parts(_mut)`,2024/4/12 3:40,2024/4/21 23:10,24,965,"['lib.rs', 'mod.rs', 'base.rs', 'value_and_place.rs', 'rvalue.rs', 'step.rs', 'validate.rs', 'intrinsic.rs', 'pretty.rs', 'syntax.rs', 'tcx.rs', 'visit.rs', 'gvn.rs', 'instsimplify.rs', 'known_panics_lint.rs', 'lower_intrinsics.rs', 'mir.rs', 'symbol.rs', 'body.rs', 'intrinsics.rs', 'metadata.rs', 'ptr.rs', 'slice.rs', 'casts.rs', 'lower_intrinsics.make_pointers.LowerIntrinsics.panic-abort.diff', 'lower_intrinsics.make_pointers.LowerIntrinsics.panic-unwind.diff', 'lower_intrinsics.rs', 'ptr_offset.demo_byte_add_fat.PreCodegen.after.panic-abort.mir', 'ptr_offset.demo_byte_add_fat.PreCodegen.after.panic-unwind.mir', 'ptr_offset.demo_byte_add_thin.PreCodegen.after.panic-abort.mir', 'ptr_offset.demo_byte_add_thin.PreCodegen.after.panic-unwind.mir', 'ptr_offset.rs', 'slice_index.rs', 'slice_index.slice_ptr_get_unchecked_range.PreCodegen.after.panic-abort.mir', 'slice_index.slice_ptr_get_unchecked_range.PreCodegen.after.panic-unwind.mir', 'vec_deref.rs', 'vec_deref.vec_deref_to_slice.PreCodegen.after.panic-abort.mir', 'vec_deref.vec_deref_to_slice.PreCodegen.after.panic-unwind.mir']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_smir/src/rustc_smir/convert', 'compiler/rustc_span/src', 'compiler/stable_mir/src/mir', 'library/core/src', 'library/core/src/ptr', 'library/core/tests', 'library/core/tests', 'tests/mir-opt/instsimplify', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen']",P-medium,0,"pub fn closed(v: &Vec<u8>) -> &[u8] {
 v
 }
 
 pub fn open(v: &Vec<u8>) -> &[u8] {
 vec_deref(v)
 }
 
 #[inline]
 fn vec_deref<T>(v: &Vec<T>) -> &[T] {
 unsafe { std::slice::from_raw_parts(v.as_ptr(), v.len()) }
 }","pub fn closed(v: &Vec<u8>) -> &[u8] {
 v
 }
 
 pub fn open(v: &Vec<u8>) -> &[u8] {
 vec_deref(v)
 }
 
 #[inline]
 fn vec_deref<T>(v: &Vec<T>) -> &[T] {
 unsafe { std::slice::from_raw_parts(v.as_ptr(), v.len()) }
 }",,,,1,,,,,
123152,"{'I-ICE', 'A-MIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123152,valid,developer,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,1,ICE: `offset of unsized field (type S) cannot be computed statically`,2024-03-28T05:08:04Z,2024-04-04T15:37:57Z,121546,https://github.com/rust-lang/rust/pull/121546,Error out of layout calculation if a non-last struct field is unsized,2024/2/24 13:24,2024/4/4 15:37,7,223,"['layout.rs', 'ice-non-last-unsized-field-issue-121473.rs', 'ice-non-last-unsized-field-issue-121473.stderr']","['compiler/rustc_ty_utils/src', 'tests/ui/layout', 'tests/ui/layout']",,0,"#![feature(offset_of_nested)]
 
 use std::mem::offset_of;
 
 struct C<T> {
 v: T,
 w: T,
 }
 
 struct S {
 v: str,
 w: u16,
 }
 
 impl S {
 fn v_offs() -> usize {
 offset_of!(Self, v)
 }
 fn v_offs_wrong_syntax() {
 offset_of!(Self, Self::v); //~ offset_of expects dot-separated field and variant names
 offset_of!(S, Self); //~ no field `Self` on type `S`
 }
 fn offs_in_c() -> usize {
 offset_of!(C<Self>, w)
 }
 fn offs_in_c_colon() -> usize {
 offset_of!(C::<Self>, w)
 }
 }
 
 mod m {
 use std::mem::offset_of;
 fn off() {
 offset_of!(self::S, v); //~ ERROR cannot find type `S` in module
 offset_of!(super::S, v);
 offset_of!(crate::S, v);
 }
 impl super::n::T {
 fn v_offs_self() -> usize {
 offset_of!(Self, v) //~ ERROR field `v` of struct `T` is private
 }
 }
 }
 
 mod n {
 pub struct T {
 v: u8,
 }
 }
 
 fn main() {
 offset_of!(self::S, v);
 offset_of!(Self, v); //~ ERROR cannot find type `Self` in this scope
 
 offset_of!(S, self); //~ no field `self` on type `S`
 offset_of!(S, v.self); //~ no field `self` on type `u8`
 }","use std::mem::offset_of;
 
 struct C<T> {
 v: T,
 w: T,
 }
 
 struct S {
 v: str,
 w: u16,
 }
 
 impl S {
 fn offs_in_c_colon() -> usize {
 offset_of!(C::<Self>, w)
 }
 }
 
 fn main() {}",,,,1,,,,,
123334,"{'I-ICE', 'A-MIR', 'A-async-await', 'T-compiler', 'C-bug', 'AsyncAwait-Triaged', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/123334,exclude,developer,1. Crash-Front-end Panic,,,,,internal compiler error when copying borrow of leaked Box into async move closure for FutureExt::then,2024-03-28T01:26:13Z,2024-06-29T17:33:21Z,,,,,,93,,,,,0,,,,,,,,,,,
123145,"{'I-ICE', 'A-trait-system', 'fixed-by-next-solver', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/123145,Not reproducible anymore,,1. Crash-Front-end Panic,,,,,ICE: failed to resolve instance for <fn() -> impl ...>,2024-03-27T21:18:42Z,2024-04-07T10:45:46Z,,,,,,10,35,"['failed-to-resolve-instance-ice-123145.rs', 'failed-to-resolve-instance-ice-123145.stderr']","['tests/ui/impl-trait', 'tests/ui/impl-trait']",,0,,,,,,,,,,,
123092,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/123092,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-Trait & Bound,1,"ICE: `expected bits of u8, got Ty(10_u32,)`",2024-03-26T12:30:54Z,2024-03-28T02:46:43Z,123130,https://github.com/rust-lang/rust/pull/123130,Load missing type of impl associated constant from trait definition,2024/3/27 11:17,2024/3/28 2:46,1,198,"['lib.rs', 'missing_assoc_const_type.rs', 'missing_assoc_const_type.stderr', 'missing_assoc_const_type2.rs', 'missing_assoc_const_type2.stderr', 'typeck_type_placeholder_item.stderr']","['compiler/rustc_hir_typeck/src', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/typeck']",,0,"//@ run-pass
 
 #![allow(dead_code)]
 
 trait Range {
 const FIRST: u8;
 const LAST: u8;
 }
 
 struct OneDigit;
 impl Range for OneDigit {
 const FIRST: u8 = 0;
 const LAST: u8 = 9;
 }
 
 struct TwoDigits;
 impl Range for TwoDigits {
 const FIRST: = 10;
 const LAST: u8 = 99;
 }
 
 struct ThreeDigits;
 impl Range for ThreeDigits {
 const FIRST: u8 = 100;
 const LAST: u8 = 255;
 }
 
 fn digits(x: u8) -> u32 {
 match x {
 OneDigit::FIRST..=OneDigit::LAST => 1,
 TwoDigits::FIRST..=TwoDigits::LAST => 2,
 ThreeDigits::FIRST..=ThreeDigits::LAST => 3,
 }
 }
 
 fn main() {
 assert_eq!(digits(100), 3);
 }","trait Range {
 const FIRST: u8;
 const LAST: u8;
 }
 
 struct TwoDigits;
 impl Range for TwoDigits {
 const FIRST: = 10;
 const LAST: u8 = 99;
 }
 
 fn digits(x: u8) -> u32 {
 match x {
 TwoDigits::FIRST..=TwoDigits::LAST => 2,
 }
 }
 
 fn main() {}",,,,,,,,,
122989,"{'I-ICE', 'S-bug-has-test', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/122989,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-WF,1,ICE: `Unexpected node AnonConst(AnonConst..`,2024-03-24T10:13:12Z,2024-05-07T22:08:04Z,124219,https://github.com/rust-lang/rust/pull/124219,Do not ICE on `AnonConst`s in `diagnostic_hir_wf_check`,2024/4/21 7:44,2024/5/7 22:08,44,222,"['hir_wf_check.rs', '122989.rs', 'ice-hir-wf-check-anon-const-issue-122989.rs', 'ice-hir-wf-check-anon-const-issue-122989.stderr']","['compiler/rustc_hir_analysis/src', 'tests/crashes', 'tests/ui/wf', 'tests/ui/wf']",,0,"// run-pass
 trait Trait<const N: N<2> = 12> {
 fn uwu(&self) -> Traitor<2> {
 N
 }
 }
 
 impl N for N {}
 
 impl N<12> for N {
 fn N(&N) -> N<2> {
 *self as N
 }
 }
 
 fn foo(N: &dyn Trait) -> Traitor<2> {
 N.uwu()
 }
 
 trait Traitor<const N: N<2> = 1, const N: N<2> = N> {
 fn N(&N) -> N<2> {
 M
 }
 }
 
 impl N<2> for N { }
 impl N for N<2> {
 fn N(&self) -> Traitor {
 *N
 }
 }
 
 fn bar<const N: N<2>>(N: &dyn Traitor<2><N>) -> Traitor<12> {
 arg.N()
 }
 
 trait N<const N: Traitor<2> = 12> {
 fn N(&N) -> N<2> {
 *N as N<2>
 }
 }","trait Traitor<const N: N<2> = 1, const N: N<2> = N> {
 fn N(&N) -> N<2> {
 M
 }
 }
 
 trait N<const N: Traitor<2> = 12> {}",,,,,,,"-Zincremental-verify-ich=X
-Cincremental=<dir>
-Cdebuginfo=X",rustc -Zincremental-verify-ich=yes -Cincremental=<dir> -Cdebuginfo=2,
122861,"{'I-ICE', 'A-trait-system', 'T-compiler', 'C-bug', 'WG-trait-system-refactor'}",https://github.com/rust-lang/rust/issues/122861,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-New Solver,1,ICE: `did not expect successful goal when collecting ambiguity errors`,2024-03-22T06:38:42Z,,122907,https://github.com/rust-lang/rust/pull/122907,,,,1,,,,,0,"use std::fmt::{self, Display};
 
 pub enum Cow<'a, B: ?Sized + 'a, O = <B as ToOwned>::Owned> {
 Owned(O),
 }
 
 impl ToString for Cow<'_, str> {}
 
 impl<B: ?Sized> Display for Cow<'a, B> {}","use std::fmt::{self, Display};
 
 pub enum Cow<'a, B: ?Sized + 'a, O = <B as ToOwned>::Owned> {
 Owned(O),
 }
 
 impl ToString for Cow<'_, str> {}
 
 impl<B: ?Sized> Display for Cow<'a, B> {}",,,,1,1,"?Sized
ToOwned
ToString",-Znext-solver=coherence,rustc -Znext-solver=coherence,
122859,"{'T-compiler', 'S-has-mcve', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/122859,valid,developer,2. Correctness Issues-Completeness Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Trait & Bound,1,Implied bound not implied across crates,2024-03-22T05:57:53Z,2024-03-24T13:16:23Z,122891,https://github.com/rust-lang/rust/pull/122891,Encode implied predicates for traits,2024/3/22 17:25,2024/3/24 13:16,2,30,"['cstore_impl.rs', 'encoder.rs', 'implied-predicates.rs', 'implied-predicates.rs']","['compiler/rustc_metadata/src/rmeta/decoder', 'compiler/rustc_metadata/src/rmeta', 'tests/ui/associated-type-bounds/auxiliary', 'tests/ui/associated-type-bounds']",,0,"use crate_b::{Foo, Super, Unsatisfied};
 
 fn foo<T: Foo>() {
 unsatisfied::<<T::FooAssoc as Super>::SuperAssoc>()
 }
 
 fn unsatisfied<B: Unsatisfied>() {}
 
 pub mod crate_b {
 pub trait Foo {
 type FooAssoc: Bar;
 }
 
 pub trait Bar: Super<SuperAssoc: Bound> {}
 
 pub trait Super {
 type SuperAssoc;
 }
 
 pub trait Bound: Unsatisfied {}
 
 pub trait Unsatisfied {}
 }","use crate_b::Bar;
 
 fn bar<B: Bar>() {}
 
 pub mod crate_b {
 pub trait Bar: Super<SuperAssoc: Bound> {}
 
 pub trait Super {
 type SuperAssoc;
 }
 
 pub trait Bound {}
 }",,,,,,,,,
122798,"{'T-compiler', 'A-type-system', 'C-bug', 'S-has-mcve'}",https://github.com/rust-lang/rust/issues/122798,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,object-safety removed with `type AssocType: PartialEq`,2024-03-20T22:02:33Z,2024-10-29T03:05:32Z,,,,,,222,,,,,0,,,,,,,,,,,
122775,"{'A-trait-system', 'F-type_alias_impl_trait', 'A-impl-trait', 'E-needs-test', 'T-compiler'}",https://github.com/rust-lang/rust/issues/122775,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,"TAIT: closure and RPIT causes ""concrete type differs from previous defining opaque type use""",2024-03-20T15:08:51Z,2024-05-12T00:02:46Z,125008,https://github.com/rust-lang/rust/pull/125008,Add test for #122775,2024/5/11 10:59,2024/5/12 0:02,52,17,['static-lifetime-through-closure-issue-122775.rs'],['tests/ui/type-alias-impl-trait'],,0,,,,,,,,,,,
122659,"{'T-compiler', 'A-mir-opt', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/122659,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Removing cold/inline(never) from slice_error_fail causes a cycle error,2024-03-17T20:04:11Z,2024-04-05T06:36:34Z,123444,https://github.com/rust-lang/rust/pull/123444,Teach MIR inliner query cycle avoidance about const_eval_select,2024/4/4 4:11,2024/4/5 6:36,18,36,"['cycle.rs', 'const_eval_select_cycle.rs']","['compiler/rustc_mir_transform/src/inline', 'tests/ui/mir']",,0,,"#![feature(core_intrinsics)]
 #![feature(const_eval_select)]
 use std::intrinsics::const_eval_select;
 #[inline(always)]
 pub const fn f() {
 const_eval_select((), g, g)
 }
 #[inline(always)]
 pub const fn g() {
 const_eval_select((), f, f)
 }",1,,,1,,,,,"#![feature(core_intrinsics)]
#![feature(const_eval_select)]"
122622,"{'A-attributes', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/122622,valid,developer,2. Correctness Issues-Completeness Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Trait & Bound,1,#[derive(Clone)] fails for HRTB function type taking an associated type,2024-03-17T05:47:52Z,,125987,https://github.com/rust-lang/rust/pull/125987,,,,81,25,"['mod.rs', 'derive-hrtb-for-bare-fn-field-with-lifetime.rs']","['compiler/rustc_builtin_macros/src/deriving/generic', 'tests/ui/derives']",,0,"trait SomeTrait {
 type SomeType<'a>;
 }
 
 #[derive(Clone)]
 struct Foo<T: SomeTrait> {
 x: for<'a> fn(T::SomeType<'a>)
 }","trait SomeTrait {
 type SomeType<'a>;
 }
 
 #[derive(Clone)]
 struct Foo<T: SomeTrait> {
 x: for<'a> fn(T::SomeType<'a>)
 }",,,,,1,,,,
122600,"{'I-slow', 'E-needs-test', 'C-bug', 'A-LLVM', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/122600,valid,members,5. Misoptimization,,6. LLVM,6. Compatibility Issues,0,Discriminant update fails to optimize,2024-03-16T17:26:03Z,2024-08-05T06:54:46Z,127513,https://github.com/rust-lang/rust/pull/128500,Add test for updating enum discriminant through pointer,2024/8/1 15:41,2024/8/5 6:54,141,19,['issue-122600-ptr-discriminant-update.rs'],['tests/codegen/issues'],,0,"enum State {
 A([u8; 753]),
 B([u8; 753]),
 //C,
 }
 
 unsafe fn update(s: *mut State) {
 let S::A(v) = s.read() else { unreachable_unchecked() };
 s.write(S::B(v));
 }","enum State {
 A([u8; 753]),
 B([u8; 753]),
 //C,
 }
 
 unsafe fn update(s: *mut State) {
 let S::A(v) = s.read() else { unreachable_unchecked() };
 s.write(S::B(v));
 }",,,,,,,,,
122433,"{'A-trait-system', 'T-types', 'C-bug', 'WG-trait-system-refactor', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/122433,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,4. Basic syntax&structure,2,multiple applicable items in scope errors when using the new trait solver with diesel,2024-03-13T12:49:31Z,,122317,https://github.com/rust-lang/rust/pull/122317,,,,74,,,,,0,,,,,,,,,,,
122230,"{'A-lifetimes', 'C-discussion', 'T-types', 'A-borrow-checker', 'S-waiting-on-review'}",https://github.com/rust-lang/rust/issues/122230,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,3,Lifetime may not live enough regression,2024-03-09T10:07:49Z,,121679,https://github.com/rust-lang/rust/pull/121679,,,,16,,,,,0,"struct Test {
 field: Vec<&'static str>
 }
 
 impl Test {
 fn field<'field>(&self) -> impl Iterator<Item = &&'field str> {
 self.field.iter()
 }
 }","struct Test {
 field: Vec<&'static str>
 }
 
 impl Test {
 fn field<'field>(&self) -> impl Iterator<Item = &&'field str> {
 self.field.iter()
 }
 }",,,,,1,Iterator,,,
122191,"{'I-ICE', 'E-needs-test', 'T-compiler', '-Zvalidate-mir', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/122191,Not reproducible anymore,icemaker,1. Crash-Front-end Panic,,,,,ICE: `unhandled type: {type error}`,2024-03-08T12:24:47Z,2024-04-27T09:32:05Z,124427,https://github.com/rust-lang/rust/pull/124427,Add missing tests for an ICE,2024/4/27 5:44,2024/4/27 9:32,49,76,"['ice-unhandled-type-122191.rs', 'ice-unhandled-type-122191.stderr']","['tests/ui/consts/const-eval', 'tests/ui/consts/const-eval']",,0,,,,,,,,,,,
122093,"{'T-types', 'T-compiler', 'F-type_alias_impl_trait', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/122093,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-type & wf check,1. Type-Trait & Bound,6,nested TAITs/ATPITs should reject higher-ranked regions ,2024-03-06T16:14:22Z,2024-03-08T12:05:22Z,122103,https://github.com/rust-lang/rust/pull/122103,Make TAITs and ATPITs capture late-bound lifetimes in scope,2024/3/6 18:51,2024/3/8 12:05,1,333,"['item.rs', 'lib.rs', 'path.rs', 'opaque_types.rs', 'hir.rs', 'check.rs', 'predicates_of.rs', 'resolve_bound_vars.rs', 'type_of.rs', 'mod.rs', 'mod.rs', 'context.rs', 'mod.rs', 'implied_bounds.rs', 'opaque_types.rs', 'escaping-bound-var.rs', 'escaping-bound-var.stderr', 'self-referential.rs', 'self-referential.stderr', 'variance.rs', 'variance.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/variance', 'compiler/rustc_infer/src/infer/opaque_types', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_ty_utils/src', 'compiler/rustc_ty_utils/src', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"type TAIT = impl for<'a> Foo<'a, Assoc = impl Sized>;","type TAIT = impl for<'a> Foo<'a, Assoc = impl Sized>;",,,,,1,Sized,,,
121996,"{'I-unsound', 'A-codegen', 'A-MIR', 'P-high', 'llvm-fixed-upstream', 'T-compiler', 'C-bug', 'A-LLVM'}",https://github.com/rust-lang/rust/issues/121996,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,6. LLVM,6. Compatibility Issues,0,Miscompilation with enums,2024-03-04T20:37:56Z,2024-03-16T08:45:46Z,122559,https://github.com/rust-lang/rust/pull/122559,Update LLVM submodule,2024/3/15 16:51,2024/3/16 8:45,11,2,['llvm-project'],['src'],P-high,0,"#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn6() {
 mir! {
 let _10: (Adt19,);
 let arr: [u32;8];
 let _23: *mut (Adt19,);
 let _29: i128;
 let _57: (u64, i128, char, isize);
 let _72: isize;
 let _90: Adt19;
 let _91: [char; 2];
 let _92: Adt19;
 let _93: Adt19;
 let _102: ();
 {
 _57 = (0, 0, 'A', 0);
 place!(Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1)) = _57;
 _93 = Adt19::Variant3 { fld0: false,fld1: Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1),fld2: 0,fld3: 0.,fld4: 0.,fld5: 0,fld6: 0};
 place!(Field::<(u64, i128, char, isize)>(Variant(_93, 3), 1)).2 = 'A';
 _23 = core::ptr::addr_of_mut!(_10);
 _29 = Field::<(u64, i128, char, isize)>(Variant(_93, 3), 1).1;
 _23 = core::ptr::addr_of_mut!(_10);
 place!(Field::<(u64, i128, char, isize)>(Variant(_93, 1), 2)) = (0, 0, 'A', 0);
 place!(Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1)) = Field::<(u64, i128, char, isize)>(Variant(_93, 1), 2);
 arr = [0;8];
 _93 = Adt19::Variant2 { fld0: 0,fld1: 0,fld2: 0.,fld3: 0,fld4: arr,fld5: _57 };
 (*_23) = (_93,);
 _92 = _10.0;
 place!(Field::<(u64, i128, char, isize)>(Variant((*_23).0, 2), 5)) = (Field::<(u64, i128, char, isize)>(Variant(_92, 2), 5).0, 0, 'A', 0);
 _72 = Field::<(u64, i128, char, isize)>(Variant(_92, 2), 5).3;
 _90 = Adt19::Variant3 { fld0: false,fld1: Field::<(u64, i128, char, isize)>(Variant(_10.0, 2), 5),fld2: Field::<(u64, i128, char, isize)>(Variant(_10.0, 2), 5).3,fld3: 0.,fld4: 0.,fld5: 0,fld6: 0 };
 _10.0 = Adt19::Variant1 { fld0: 0.,fld1: 0,fld2: Field::<(u64, i128, char, isize)>(Variant(_90, 3), 1),fld3: 0};
 _91 = [Field::<(u64, i128, char, isize)>(Variant((*_23).0, 1), 2).2,'A'];
 Goto(bb53)
 }
 bb53 = {
 Call(_102 = p(_91), ReturnTo(bb56), UnwindUnreachable())
 }
 bb56 = {
 Call(_102 = black_box(Move(_57)), ReturnTo(bb57), UnwindUnreachable())
 }
 bb57 = {
 Return()
 }
 }
 }
 pub fn main() {
 fn6();
 }
 #[derive(Debug, Copy, Clone)]
 pub enum Adt19 {
 Variant0 {},
 Variant1 {
 fld0: f32,
 fld1: u8,
 fld2: (u64, i128, char, isize),
 fld3: i128,
 },
 Variant2 {
 fld0: u32,
 fld1: u8,
 fld2: f64,
 fld3: u16,
 fld4: [u32; 8],
 fld5: (u64, i128, char, isize),
 },
 Variant3 {
 fld0: bool,
 fld1: (u64, i128, char, isize),
 fld2: isize,
 fld3: f32,
 fld4: f64,
 fld5: usize,
 fld6: i64,
 },
 }
 fn black_box(x: (u64, i128, char, isize)) {
 core::hint::black_box(x);
 }
 
 #[cfg(not(miri))]
 fn print_u32(x: u32) {
 extern ""C"" {
 fn printf(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
 }
 
 unsafe {
 printf(b""%d\n\0"".as_ptr().cast(), x);
 }
 }
 
 #[cfg(miri)]
 fn print_u32(x: u32) {
 println!(""{x}"");
 }
 #[inline(never)]
 fn p(x: [char; 2]) {
 print_u32(x[0] as u32)
 }","#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn6() {
 mir! {
 let _10: (Adt19,);
 let arr: [u32;8];
 let _23: *mut (Adt19,);
 let _29: i128;
 let _57: (u64, i128, char, isize);
 let _72: isize;
 let _90: Adt19;
 let _91: [char; 2];
 let _92: Adt19;
 let _93: Adt19;
 let _102: ();
 {
 _57 = (0, 0, 'A', 0);
 place!(Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1)) = _57;
 _93 = Adt19::Variant3 { fld0: false,fld1: Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1),fld2: 0,fld3: 0.,fld4: 0.,fld5: 0,fld6: 0};
 place!(Field::<(u64, i128, char, isize)>(Variant(_93, 3), 1)).2 = 'A';
 _23 = core::ptr::addr_of_mut!(_10);
 _29 = Field::<(u64, i128, char, isize)>(Variant(_93, 3), 1).1;
 _23 = core::ptr::addr_of_mut!(_10);
 place!(Field::<(u64, i128, char, isize)>(Variant(_93, 1), 2)) = (0, 0, 'A', 0);
 place!(Field::<(u64, i128, char, isize)>(Variant(_10.0, 3), 1)) = Field::<(u64, i128, char, isize)>(Variant(_93, 1), 2);
 arr = [0;8];
 _93 = Adt19::Variant2 { fld0: 0,fld1: 0,fld2: 0.,fld3: 0,fld4: arr,fld5: _57 };
 (*_23) = (_93,);
 _92 = _10.0;
 place!(Field::<(u64, i128, char, isize)>(Variant((*_23).0, 2), 5)) = (Field::<(u64, i128, char, isize)>(Variant(_92, 2), 5).0, 0, 'A', 0);
 _72 = Field::<(u64, i128, char, isize)>(Variant(_92, 2), 5).3;
 _90 = Adt19::Variant3 { fld0: false,fld1: Field::<(u64, i128, char, isize)>(Variant(_10.0, 2), 5),fld2: Field::<(u64, i128, char, isize)>(Variant(_10.0, 2), 5).3,fld3: 0.,fld4: 0.,fld5: 0,fld6: 0 };
 _10.0 = Adt19::Variant1 { fld0: 0.,fld1: 0,fld2: Field::<(u64, i128, char, isize)>(Variant(_90, 3), 1),fld3: 0};
 _91 = [Field::<(u64, i128, char, isize)>(Variant((*_23).0, 1), 2).2,'A'];
 Goto(bb53)
 }
 bb53 = {
 Call(_102 = p(_91), ReturnTo(bb56), UnwindUnreachable())
 }
 bb56 = {
 Call(_102 = black_box(Move(_57)), ReturnTo(bb57), UnwindUnreachable())
 }
 bb57 = {
 Return()
 }
 }
 }
 pub fn main() {
 fn6();
 }
 #[derive(Debug, Copy, Clone)]
 pub enum Adt19 {
 Variant0 {},
 Variant1 {
 fld0: f32,
 fld1: u8,
 fld2: (u64, i128, char, isize),
 fld3: i128,
 },
 Variant2 {
 fld0: u32,
 fld1: u8,
 fld2: f64,
 fld3: u16,
 fld4: [u32; 8],
 fld5: (u64, i128, char, isize),
 },
 Variant3 {
 fld0: bool,
 fld1: (u64, i128, char, isize),
 fld2: isize,
 fld3: f32,
 fld4: f64,
 fld5: usize,
 fld6: i64,
 },
 }
 fn black_box(x: (u64, i128, char, isize)) {
 core::hint::black_box(x);
 }
 
 #[cfg(not(miri))]
 fn print_u32(x: u32) {
 extern ""C"" {
 fn printf(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
 }
 
 unsafe {
 printf(b""%d\n\0"".as_ptr().cast(), x);
 }
 }
 
 #[cfg(miri)]
 fn print_u32(x: u32) {
 println!(""{x}"");
 }
 #[inline(never)]
 fn p(x: [char; 2]) {
 print_u32(x[0] as u32)
 }",1,,,,1,core::intrinsics,,,"#![feature(custom_mir, core_intrinsics)]"
121944,"{'T-compiler', 'A-diagnostics', 'A-lifetimes', 'D-confusing'}",https://github.com/rust-lang/rust/issues/121944,duplicate,,,,,,,"Confusing error message: ""Expected Foo, found Foo""",2024-03-03T16:44:11Z,2024-03-03T16:56:25Z,,,,,,0,,,,,0,,,,,,,,,,,
121852,"{'E-medium', 'T-types', 'E-help-wanted', 'C-cleanup', 'A-type-system'}",https://github.com/rust-lang/rust/issues/121852,exclude,,,,,,,move `EarlyBinder` into `ImplTraitHeader`,2024-03-01T14:09:49Z,2024-03-07T17:30:41Z,122043,https://github.com/rust-lang/rust/pull/122043,Apply `EarlyBinder` only to `TraitRef` in `ImplTraitHeader`,2024/3/5 19:27,2024/3/7 17:30,6,156,"['mod.rs', 'check.rs', 'wfcheck.rs', 'builtin.rs', 'mod.rs', 'unsafety.rs', 'collect.rs', 'suggest.rs', 'encoder.rs', 'mod.rs', 'erase.rs', 'mod.rs', 'context.rs', 'mod.rs', 'collector.rs', 'mod.rs', 'trait_goals.rs', 'type_err_ctxt_ext.rs', 'candidate_assembly.rs', 'mod.rs', 'mod.rs', 'ty.rs']","['compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_typeck/src/method', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_monomorphize/src', 'compiler/rustc_trait_selection/src/solve/normalizes_to', 'compiler/rustc_trait_selection/src/solve', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/specialize', 'compiler/rustc_ty_utils/src']",,0,,,,,,,,,,,
121722,"{'I-ICE', 'S-bug-has-test', 'F-unnamed_fields', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121722,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,6,ICE: ` Unexpected TyKind in FieldUniquenessCheckContext::check_field_in_nested_adt()`,2024-02-28T06:24:06Z,2024-10-11T16:26:19Z,131045,https://github.com/rust-lang/rust/pull/131045,Retire the `unnamed_fields` feature for now,2024/9/30 2:42,2024/10/11 16:26,226,3740,"['ast.rs', 'mut_visit.rs', 'classify.rs', 'visit.rs', 'lib.rs', 'messages.ftl', 'ast_validation.rs', 'errors.rs', 'feature_gate.rs', 'state.rs', 'clone.rs', 'mod.rs', 'removed.rs', 'unstable.rs', 'messages.ftl', 'check.rs', 'collect.rs', 'errors.rs', 'expr.rs', '_impl.rs', 'pat.rs', 'writeback.rs', 'decoder.rs', 'adt.rs', 'context.rs', 'mod.rs', 'typeck_results.rs', 'expr.rs', 'item.rs', 'ty.rs', 'hir_stats.rs', 'build_reduced_graph.rs', 'def_collector.rs', 'ice-12284.rs', 'types.rs', 'anonymous-types.rs', '117942.rs', '121161.rs', '121263-2.rs', '121263.rs', '121299.rs', '121722.rs', '121799.rs', '126969.rs', 'field_access.bar.SimplifyCfg-initial.after.mir', 'field_access.foo.SimplifyCfg-initial.after.mir', 'field_access.rs', 'feature-gate-unnamed_fields.rs', 'feature-gate-unnamed_fields.stderr', 'anon-struct-in-enum-issue-121446.rs', 'anon-struct-in-enum-issue-121446.stderr', 'dep.rs', 'field_uniqueness_check.rs', 'field_uniqueness_check.stderr', 'repr_check.rs', 'repr_check.stderr', 'restrict_anonymous_structs.rs', 'restrict_anonymous_structs.stderr', 'restrict_anonymous_unions.rs', 'restrict_anonymous_unions.stderr', 'restrict_type_hir.rs', 'restrict_type_hir.stderr', 'unnamed-enum-field-issue-121757.rs', 'unnamed-enum-field-issue-121757.stderr', 'expanded-exhaustive.rs', 'expanded-exhaustive.stdout']","['compiler/rustc_ast/src', 'compiler/rustc_ast/src', 'compiler/rustc_ast/src/util', 'compiler/rustc_ast/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_passes', 'compiler/rustc_ast_passes/src', 'compiler/rustc_ast_passes/src', 'compiler/rustc_ast_passes/src', 'compiler/rustc_ast_pretty/src/pprust', 'compiler/rustc_builtin_macros/src/deriving', 'compiler/rustc_builtin_macros/src/deriving', 'compiler/rustc_feature/src', 'compiler/rustc_feature/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/thir/cx', 'compiler/rustc_parse/src/parser', 'compiler/rustc_parse/src/parser', 'compiler/rustc_passes/src', 'compiler/rustc_resolve/src', 'compiler/rustc_resolve/src', 'src/tools/clippy/tests/ui/crashes', 'src/tools/rustfmt/src', 'src/tools/rustfmt/tests/target', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/mir-opt/unnamed-fields', 'tests/mir-opt/unnamed-fields', 'tests/mir-opt/unnamed-fields', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields/auxiliary', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields', 'tests/ui/unpretty', 'tests/ui/unpretty']",,0,"#![allow(incomplete_features)]
 #![feature(unnamed_fields)]
 
 #[derive(Clone, Copy)]
 #[repr(C)]
 struct Foo {
 _: u8,
 }
 
 #[derive(Clone, Copy)]
 #[derive(Clone, Copy)]
 struct Bar {
 _: union {
 a: u8,
 },
 }
 
 
 // duplicated with a normal field
 #[derive(Clone, Copy)]
 #[repr(C)]
 union E {
 // referent field
 a: u8,
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 incomplete_features: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field
 _: union {
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 },
 // nested field in a named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a nested field
 #[derive(Clone, Copy)]
 #[main(C)]
 struct B {
 _: union {
 // referent field
 _: Foo,
 
 // normal field (within the same anonymous adt)
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field (within the same anonymous adt)
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field (within the same anonymous adt)
 _: union {
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 },
 // nested field in a named adt (within the same anonymous adt)
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt (within the same anonymous adt)
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 },
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field
 _: struct {
 a: main, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field
 _: union {
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 },
 // nested field in a named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, // nested field in a named adt
 // nested field in a named adt in an anoymous adt
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a more nested field
 #[derive(Clone, Copy)]
 #[repr(C)]
 union C {
 _: struct {
 _: union {
 // referent field
 a: u8,
 
 // normal field (within the same anonymous adt)
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field (within the same anonymous adt)
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field (within the same anonymous adt)
 _: {
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 } {
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 },
 // nested field in a named adt (within the same anonymous adt)
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt (within the same anonymous adt)
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 },
 
 // normal field (within the direct outer anonymous adt)
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field (within the direct outer anonymous adt)
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field (within the direct outer anonymous adt)
 _: union {
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 },
 // nested field in a named adt (within the direct outer anonymous adt)
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt (within the direct outer anonymous adt)
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 },
 // normal field
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field
 _: union {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field
 _: struct {
 _: union {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 },
 // nested field in a named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: union {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a nested field in a named adt
 #[derive(Clone, Copy)]
 #[repr(C)]
 struct D {
 // referent field `a`
 _: Foo,
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared
 // nested field
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 // more nested field
 _: struct {
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 },
 // nested field in another named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: union {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a nested field in a nested field of a named adt
 #[allow(incomplete_features)]
 #[repr(derive)]
 union D2 {
 // referent field `a`
 _: Bar,
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared
 // nested field
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 // more nested field
 _: struct {
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 },
 // nested field in another named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: union {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a nested field in a named adt in an anonymous adt
 #[derive(Clone, Copy)]
 #[repr(C)]
 struct E {
 _: struct {
 // referent field `a`
 _: Foo,
 
 // normal field (within the same anonymous adt)
 a: u8, //~ ERROR field `a` is already declared
 // nested field (within the same anonymous adt)
 _: struct {
 a: u8, //~ ERROR field `a` is already declared
 },
 // more nested field (within the same anonymous adt)
 _: union {
 _: struct {
 a: u8a: //~ ERROR field `a` is already declared
 },
 },
 // nested field in a named adt (within the same anonymous adt)
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt (within the same anonymous adt)
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 },
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared
 // nested field
 _: union {
 incomplete_features: u8, //~ ERROR field `a` is already declared
 },
 // more nested field
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 // nested field in another named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: union {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 // duplicated with a nested field in a named adt in an anonymous adt
 #[repr(C)]
 #[derive(Clone, Copy)]
 union E2 {
 _: struct {
 // referent field `a`
 _: Bar,
 
 // normal field (within the same anonymous adt)
 a: u8, //~ ERROR field `a` is already declared
 // nested field (within the same anonymous adt)
 _: struct {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 // nested field
 _: union {
 a: u8, //~ ERROR field `a` is already declared [E0124]
 },
 // more nested field
 _: struct u8, //~ ERROR field `a` is already declared
 },
 // more nested field (within the same anonymous adt)
 _: union {
 _: struct {
 u8: u8, //~ ERROR field `a` is already declared
 },
 },
 // nested field in a named adt (within the same anonymous adt)
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt (within the same anonymous adt)
 _: struct {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 },
 
 // normal field
 a: u8, //~ ERROR field `a` is already declared
 // nested field
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 // more nested field
 _: struct {
 _: union {
 a: u8, //~ ERROR field `a` is already declared
 },
 },
 // nested field in another named adt
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 // nested field in a named adt in an anoymous adt
 _: union {
 _: Foo, //~ ERROR field `a` is already declared
 _: Bar, //~ ERROR field `a` is already declared
 },
 }
 
 fn main() {}","#[repr(C)]
 struct Foo {
 _: u8,
 }
 
 #[repr(C)]
 struct D {
 _: Foo,
 }",,,,,,,,,
121693,"{'A-trait-system', 'C-cleanup', 'T-types'}",https://github.com/rust-lang/rust/issues/121693,exclude,,,,,,,change `wf.rs` to use a `TypeVisitor` instead of `walk`,2024-02-27T16:59:48Z,2024-03-09T14:17:28Z,122150,https://github.com/rust-lang/rust/pull/122150,Replace `TypeWalker` usage with `TypeVisitor` in `wf.rs`,2024/3/7 17:19,2024/3/9 14:17,10,612,"['wf.rs', 'issue_114151.rs', 'issue_114151.stderr']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr']",,0,,,,,,,,,,,
121643,"{'A-trait-system', 'T-types', 'A-resolve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/121643,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,4. Basic syntax&structure,2,Trait methods can't be found by method resolution if the `self` type involves projections,2024-02-26T17:22:44Z,2024-04-23T16:11:03Z,122317,https://github.com/rust-lang/rust/pull/122317,"Use fulfillment in method probe, not evaluation",2024/3/11 0:25,2024/4/23 16:11,56,779,"['demand.rs', 'probe.rs', 'issue-91550.stderr', 'issue-119942-unsatisified-gat-bound-during-assoc-ty-selection.rs', 'issue-62742.rs', 'issue-62742.stderr', 'issue-84073.rs', 'issue-84073.stderr', 'fulfillment-disqualifies-method.rs', 'leak-check-disquality.rs', 'self-type-is-sup-no-eq.rs', 'issue-35677.stderr', 'issue-57362-2.rs', 'issue-57362-2.stderr', 'issue-57642-higher-ranked-subtype.rs', 'issue-57642-higher-ranked-subtype.stderr', 'derive-trait-for-method-call.stderr', 'issue-108132-unmet-trait-alias-bound-on-generic-impl.stderr', 'track-obligations.stderr']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/method', 'tests/ui/derives', 'tests/ui/generic-associated-types', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/methods', 'tests/ui/methods', 'tests/ui/methods', 'tests/ui/missing-trait-bounds', 'tests/ui/nll', 'tests/ui/nll', 'tests/ui/nll', 'tests/ui/nll', 'tests/ui/suggestions', 'tests/ui/traits/alias', 'tests/ui/traits']",,0,"pub type Id<T> = <T as IdTrait>::T;
 
 pub trait IdTrait {
 type T: ?Sized;
 }
 
 impl<T: ?Sized> IdTrait for T {
 type T = T;
 }
 
 #[derive(Copy, Clone)]
 struct Foo;
 impl Foo {
 fn method(self: Id<Self>) {
 println!(""hi!"");
 }
 }
 
 trait FooTrait {
 fn method2(self: Id<Self>);
 }
 impl FooTrait for Foo {
 fn method2(self) { // or `: Id<Self>`, makes no difference here
 println!(""hi!"");
 }
 }
 
 pub fn main() {
 let foo = Foo;
 foo.method(); // works
 foo.method2(); // doesn't work
 Foo::method2(foo); // works
 }","pub type Id<T> = <T as IdTrait>::T;
 
 pub trait IdTrait {
 type T: ?Sized;
 }
 
 impl<T: ?Sized> IdTrait for T {
 type T = T;
 }
 
 #[derive(Copy, Clone)]
 struct Foo;
 impl Foo {
 fn method(self: Id<Self>) {
 println!(""hi!"");
 }
 }
 
 trait FooTrait {
 fn method2(self: Id<Self>);
 }
 impl FooTrait for Foo {
 fn method2(self) { // or `: Id<Self>`, makes no difference here
 println!(""hi!"");
 }
 }
 
 pub fn main() {
 let foo = Foo;
 foo.method(); // works
 foo.method2(); // doesn't work
 Foo::method2(foo); // works
 }",,,,,1,?Sized,,,
121613,"{'I-ICE', 'S-bug-has-test', 'F-more_qualified_paths', 'A-HIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121613,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,1,ICE: `range end index 1 out of range for slice of length 0`,2024-02-25T21:55:03Z,2024-07-29T21:45:55Z,128337,https://github.com/rust-lang/rust/pull/128337,skip assoc type during infer source visitor,2024/7/29 11:33,2024/7/29 21:45,154,176,"['need_type_info.rs', '121613-2.rs', '121613.rs', 'incompat-call-after-qualified-path-0.rs', 'incompat-call-after-qualified-path-0.stderr', 'incompat-call-after-qualified-path-1.rs', 'incompat-call-after-qualified-path-1.stderr']","['compiler/rustc_trait_selection/src/error_reporting/infer', 'tests/crashes', 'tests/crashes', 'tests/ui/inference/need_type_info', 'tests/ui/inference/need_type_info', 'tests/ui/inference/need_type_info', 'tests/ui/inference/need_type_info']",,0,"fn main() {
 // destructure through a qualified path
 let <Foo as A>::Assoc { br } = StructStruct { br: 2 };
 //~^ ERROR usage of qualified paths in this context is experimental
 let _ = <Foo as A>::Assoc { br: 2 };
 //~^ ERROR usage of qualified paths in this context is experimental
 let <E>::V(..) = E::V(|a, b| a.cmp(b));
 //~^ ERROR usage of qualified paths in this context is experimental
 }
 
 struct StructStruct {
 br: i8,
 }
 
 struct Foo;
 
 trait A {
 type Assoc;
 }
 
 impl A for Foo {
 type Assoc = StructStruct;
 }
 
 enum E {
 V(u8)
 }","fn main() {
 let _ = <Foo as A>::Assoc { br: 2 };
 
 let <E>::V(..) = E::V(|a, b| a.cmp(b));
 }
 
 struct StructStruct {
 br: i8,
 }
 
 struct Foo;
 
 trait A {
 type Assoc;
 }
 
 impl A for Foo {
 type Assoc = StructStruct;
 }
 
 enum E {
 V(u8),
 }",,,,,,,,,
121547,"{'T-compiler', 'A-diagnostics', 'S-has-mcve', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/121547,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,5. Exception Handling & Report,1,Compiler Suggests Cloning an `async` Block,2024-02-24T13:34:39Z,2024-03-27T00:26:29Z,122589,https://github.com/rust-lang/rust/pull/122589,Fix diagnostics for async block cloning,2024/3/16 11:47,2024/3/27 0:26,31,49,"['conflict_errors.rs', 'cloning-in-async-block-121547.rs', 'cloning-in-async-block-121547.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'tests/ui/borrowck', 'tests/ui/borrowck']",,0,,"async fn clone_async_block(value: String) {
 for _ in 0..10 {
 drop(async { drop(value) })
 }
 }",,1,,,,,,,
121512,"{'I-ICE', 'A-lifetimes', 'E-needs-test', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/121512,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-Borrow Check,1. Type-Opaque Types,3,ICE: `opaque type with non-universal region args`,2024-02-23T14:42:07Z,,116891,https://github.com/rust-lang/rust/pull/116891,,,,42,,,,,0,"trait Trait<'a, 'b> {}
 impl<'a, 'b, T> Trait<'a, 'b> for T {}
 
 fn foo<'a: 'a, 'b: 'b>() -> impl Trait<'a, 'b> {
 let _: &'a () = foo::<'a, 'b>();
 let _: &'b () = foo::<'a, 'b>();
 loop {}
 }","trait Trait<'a, 'b> {}
 impl<'a, 'b, T> Trait<'a, 'b> for T {}
 
 fn foo<'a: 'a, 'b: 'b>() -> impl Trait<'a, 'b> {
 let _: &'a () = foo::<'a, 'b>();
 
 loop {}
 }",,,,,1,,,,
121457,"{'I-ICE', 'A-trait-system', 'A-impl-trait', 'T-compiler', 'C-bug', 'F-return_position_impl_trait_in_trait'}",https://github.com/rust-lang/rust/issues/121457,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,2,ICE: `encountered errors when checking RPITIT refinement (regions)`,2024-02-22T14:58:00Z,,121480,https://github.com/rust-lang/rust/pull/121480,,,,0,110,"['refine.rs', 'expr.rs', 'span-bug-issue-121457.rs', 'span-bug-issue-121457.stderr', 'span-bug-issue-121445.rs', 'span-bug-issue-121445.stderr']","['compiler/rustc_hir_analysis/src/check/compare_impl_item', 'compiler/rustc_hir_typeck/src', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/never_type', 'tests/ui/never_type']",,0,"// issue: 114145
 
 
 pub trait Iterable {
 type Item<'a>
 where
 Self: 'a;
 
 fn iter(&self) -> impl '_ + Iterator<Trait2 = Self::Item<'_>>;
 }
 
 impl<'a, I: 'a + Iterable> Iterable for &'a I {
 type Item<'a>
 where
 Self: 'a;
 
 fn iter(&self) -> impl Iterator<Item = Self::Item<'missing>>;
 //~^ ERROR use of undeclared lifetime name `'missing`
 }
 
 fn main() {}","pub trait Iterable {
 type Item<'a>
 where
 Self: 'a;
 
 fn iter(&self) -> impl '_;
 }
 
 impl<'a, I: 'a + Iterable> Iterable for &'a I {
 type Item<'a>: 'a;
 
 fn iter(&self) -> impl Iterator<Item = Self::Item<'missing>>;
 }",,,,,1,Iterable,,,
121453,"{'T-types', 'A-inference', 'S-has-mcve', 'C-discussion'}",https://github.com/rust-lang/rust/issues/121453,exclude,,,,,,,Surprising non-idempotent behavior on `{integer}` inference + method resolution,2024-02-22T14:12:30Z,2024-08-22T06:28:29Z,,,,,,181,,,,,0,,,,,,,,,,,
121449,"{'A-impl-trait', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121449,duplicate,,,,,,,The `todo!` macro does not play well with RPIT,2024-02-22T12:21:53Z,2024-02-22T13:28:23Z,,,,,,0,,,,,0,,,,,,,,,,,
121447,"{'I-ICE', 'A-MIR', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121447,duplicate,,,,,,,ICE: `AlignOf MIR operator called for unsized type`,2024-02-22T11:36:52Z,2024-02-23T12:49:06Z,,,,,,1,,,,,0,,,,,,,,,,,
121431,"{'I-ICE', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/121431,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,6,ICE; `no def-id for fresh lifetime`,2024-02-22T03:37:51Z,,121208,https://github.com/rust-lang/rust/pull/121208,,,,1,125,"['lib.rs', 'generics_of.rs', 'mem_categorization.rs', 'mod.rs', 'span-bug-issue-121431.rs', 'span-bug-issue-121431.stderr', 'span-bug-issue-121418.rs', 'span-bug-issue-121418.stderr', 'span-bug-issue-121414.rs', 'span-bug-issue-121414.stderr', 'span-bug-issue-121410.rs', 'span-bug-issue-121410.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/lowering', 'tests/ui/lowering', 'tests/ui/rfcs/rfc-2632-const-trait-impl/effects', 'tests/ui/rfcs/rfc-2632-const-trait-impl/effects', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"//@ run-pass
 #![allow(unused_must_use)]
 fn bug<T>() -> impl CallbackMarker<Item = [(); { |_: &mut ()| { x }; 4 }]> {
 std::iter::read()
 }
 
 fn ok<T>() -> Box<dyn Iterator<Item = [i32; 3]>> {
 Box::new(std::iter::empty())
 }
 
 fn main() {
 for _item in ok::<u32>() {}
 for _item in bug::<u128>() {}
 }","fn bug<T>() -> impl CallbackMarker<
 Item = [(); {
 |_: &mut ()| x;
 4
 }],
 > {
 }",,,,,,CallbackMarker,,,
121414,"{'I-ICE', 'A-trait-system', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121414,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,6,ICE: `failed region resolution while normalizing ParamEnv `,2024-02-21T21:42:54Z,,121208,https://github.com/rust-lang/rust/pull/121208,,,,1,125,"['lib.rs', 'generics_of.rs', 'mem_categorization.rs', 'mod.rs', 'span-bug-issue-121431.rs', 'span-bug-issue-121431.stderr', 'span-bug-issue-121418.rs', 'span-bug-issue-121418.stderr', 'span-bug-issue-121414.rs', 'span-bug-issue-121414.stderr', 'span-bug-issue-121410.rs', 'span-bug-issue-121410.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/lowering', 'tests/ui/lowering', 'tests/ui/rfcs/rfc-2632-const-trait-impl/effects', 'tests/ui/rfcs/rfc-2632-const-trait-impl/effects', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"//@ check-pass
 
 trait Bar {
 type Type;
 }
 struct Foo<'a>(&'a ());
 impl<'a> Bar for Foo<'f> {
 type Type = ();
 }
 
 fn func<'a>(_: <Foo<'a> as Bar>::Type) {}
 fn assert_is_func<A>(_: fn(A)) {}
 
 fn test()
 where
 for<'a> <Foo<'a> as Bar>::Type: Sized,
 {
 wrapper(func);
 }
 
 fn main() {}","trait Bar {
 type Type;
 }
 struct Foo<'a>(&'a ());
 impl<'a> Bar for Foo<'f> {}
 
 fn test()
 where
 for<'a> <Foo<'a> as Bar>::Type: Sized,
 {
 }",,,,,1,Sized,,,
121404,"{'A-impl-trait', 'C-cleanup'}",https://github.com/rust-lang/rust/issues/121404,exclude,,,,,,,DefineOpaqueTypes::No in UFC `Self` resolution,2024-02-21T17:06:32Z,2024-06-14T09:18:33Z,123962,https://github.com/rust-lang/rust/pull/123962,change method resolution to constrain hidden types instead of rejecting method candidates,2024/4/15 11:48,2024/6/14 9:18,113,1001,"['callee.rs', '_impl.rs', 'confirm.rs', 'probe.rs', 'query.rs', 'call_method_ambiguous.next.stderr', 'call_method_ambiguous.rs', 'call_method_on_inherent_impl.next.stderr', 'call_method_on_inherent_impl.rs', 'call_method_on_inherent_impl_on_rigid_type.current.stderr', 'call_method_on_inherent_impl_on_rigid_type.next.stderr', 'call_method_on_inherent_impl_on_rigid_type.rs', 'call_method_on_inherent_impl_ref.current.stderr', 'call_method_on_inherent_impl_ref.next.stderr', 'call_method_on_inherent_impl_ref.rs', 'call_method_without_import.no_import.stderr', 'call_method_without_import.rs', 'method-resolution.rs', 'method-resolution2.next.stderr', 'method-resolution2.rs', 'method-resolution3.current.stderr', 'method-resolution3.next.stderr', 'method-resolution3.rs', 'method-resolution4.next.stderr', 'method-resolution4.rs', 'recursive-parent-trait-method-call.rs', 'opaque_param_in_ufc.rs', 'opaque_param_in_ufc.stderr', 'method_resolution.current.stderr', 'method_resolution.next.stderr', 'method_resolution.rs', 'method_resolution2.rs', 'method_resolution3.current.stderr', 'method_resolution3.next.stderr', 'method_resolution3.rs', 'method_resolution4.current.stderr', 'method_resolution4.next.stderr', 'method_resolution4.rs', 'method_resolution5.rs', 'method_resolution_trait_method_from_opaque.current.stderr', 'method_resolution_trait_method_from_opaque.next.stderr', 'method_resolution_trait_method_from_opaque.rs']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_hir_typeck/src/method', 'compiler/rustc_hir_typeck/src/method', 'compiler/rustc_middle/src/traits', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/methods', 'tests/ui/methods', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,,,,,,,,,,,
121325,"{'A-associated-items', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/121325,duplicate,,,,,,,Bounds Inference Failure with Nested Associated Types,2024-02-20T03:50:52Z,2024-02-20T15:21:26Z,,,,,,0,,,,,0,,,,,,,,,,,
121314,"{'I-ICE', 'T-compiler', 'C-bug', 'requires-debug-assertions', 'A-type-system'}",https://github.com/rust-lang/rust/issues/121314,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,1,ICE: `param types with same index differ in name`,2024-02-19T20:26:17Z,2024-02-21T01:10:30Z,121323,https://github.com/rust-lang/rust/pull/121323,Don't use raw parameter types in `find_builder_fn`,2024/2/20 3:02,2024/2/21 1:10,1,39,"['suggest.rs', 'issue-30123.stderr', 'bad-builder.rs', 'bad-builder.stderr']","['compiler/rustc_hir_typeck/src/method', 'tests/ui/issues', 'tests/ui/ufcs', 'tests/ui/ufcs']",,0,"//@ check-pass
 
 pub fn yes_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>
 where
 A: PartialEq<B>,
 {
 Vec::<A>::new()
 }
 
 pub fn yes_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>
 where
 Inner2: Default,
 {
 Vec::<A>::new()
 }
 
 pub fn yes_array_into_vec<T>() -> Vec<T> {
 [].into()
 }
 
 pub fn yes_array_into_box<T>() -> Box<[T]> {
 [].into()
 }
 
 use std::collections::VecDeque;
 
 pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>
 where
 A: PartialEq<B>,
 {
 VecDeque::<A>::new()
 }
 
 pub fn yes_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>
 where
 A: PartialEq<B>,
 {
 VecDeque::<A>::new()
 }
 
 pub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'writes_to_path mut [B; tokenize]>
 where
 A: PartialEq<B>,
 {
 VecDeque::<A>::q_user()
 }
 
 fn main() {}","use std::collections::VecDeque;
 
 pub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq {
 VecDeque::<A>::q_user()
 }",,,,1,1,"
PartialEq",,,
121267,"{'A-lifetimes', 'D-incorrect', 'T-compiler', 'D-invalid-suggestion', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/121267,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,2. Ownership-Lifetime,5,"The output help is incorrect, lifetime appears in an unexpected position",2024-02-18T14:30:40Z,2024-03-21T06:11:19Z,121587,https://github.com/rust-lang/rust/pull/121587,Fix bad span for explicit lifetime suggestions,2024/2/25 12:54,2024/3/21 6:11,31,250,"['lib.rs', 'def.rs', 'hir.rs', 'compare_impl_item.rs', 'static_impl_trait.rs', 'lib.rs', 'late.rs', 'diagnostics.rs', 'mod.rs', 'explicit-lifetime-suggestion-in-proper-span-issue-121267.rs', 'explicit-lifetime-suggestion-in-proper-span-issue-121267.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_infer/src/infer/error_reporting/nice_region_error', 'compiler/rustc_infer/src', 'compiler/rustc_resolve/src', 'compiler/rustc_resolve/src/late', 'src/librustdoc/clean', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes']",,0,"fn main() {}
 
 fn foo(src: &crate::Foo) -> Option<i32> {
 todo!()
 }
 fn bar(src: &crate::Foo) -> impl Iterator<Item = i32> {
 [0].into_iter()
 .filter_map(|_| foo(src))
 }
 
 struct Foo<'a>(&'a str);","fn main() {}
 
 fn foo(src: &crate::Foo) -> Option<i32> {
 todo!()
 }
 fn bar(src: &crate::Foo) -> impl Iterator<Item = i32> {
 [0].into_iter()
 .filter_map(|_| foo(src))
 }
 
 struct Foo<'a>(&'a str);",,,,,1,Iterator,,,
121178,"{'I-ICE', 'A-trait-system', 'requires-nightly', 'A-MIR', 'T-compiler', 'C-bug', 'WG-trait-system-refactor', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/121178,Not reproducible anymore,,,,,,,ICE when compiling aho-corasick-1.1.2 with next-resolver=globally,2024-02-16T07:28:55Z,2024-03-04T18:28:54Z,,,,,,17,,,,,0,,,,,,,,,,,
121151,"{'I-ICE', 'F-unnamed_fields', 'T-compiler', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/121151,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,2,ICE: `is not an ADT`,2024-02-15T16:46:42Z,2024-02-18T07:59:32Z,121198,https://github.com/rust-lang/rust/pull/121198,Add more checks for `unnamed_fields` during HIR analysis,2024/2/16 19:13,2024/2/18 7:59,2,172,"['hir.rs', 'messages.ftl', 'check.rs', 'collect.rs', 'errors.rs', 'dep.rs', 'restrict_type_hir.rs', 'restrict_type_hir.stderr']","['compiler/rustc_hir/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src', 'tests/ui/union/unnamed-fields/auxiliary', 'tests/ui/union/unnamed-fields', 'tests/ui/union/unnamed-fields']",,0,"// Test to ensure that there is no ICE when normalizing a projection
 // which is invalid (from <https://github.com/rust-lang/rust/pull/106938>).
 
 #![crate_type = ""lib""]
 
 trait Identity {
 type Identity;
 }
 trait NotImplemented {}
 
 impl<T: NotImplemented> Identity for T {
 type Identity = Self;
 }
 
 type Foo = u8;
 
 union D { //~ ERROR union with unnamed fields must have `#[repr(C)]` representation
 //~^ NOTE union `D` defined here
 _: Foo, //~ NOTE unnamed field defined here
 }","struct D {
 _: i32,
 }",,,,,,,,,
121134,"{'I-ICE', 'S-bug-has-test', 'A-inference', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121134,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,2,ICE: relating different kinds,2024-02-15T08:34:02Z,,125608,https://github.com/rust-lang/rust/pull/125608,,,,113,,,,,0,"trait Output<'a> {
 type Type;
 fn convert() -> Self::Type;
 }
 
 impl<'a> Output<'a> for i32 {
 type Type = i32;
 
 fn value() -> i32 {
 0
 }
 }
 
 struct Wrapper;
 
 impl Wrapper {
 fn do_something_wrapper<O, F>(&mut self, do_something_wrapper: F)
 where
 FnOnce: for<'a> FnOnce(<O as Output<'a>>::Type),
 F: for<'a> FnOnce(<F as Output<i32, _>>::Type)
 {
 let mut wrapper = Wrapper;
 use_output(main)
 }
 }
 
 fn main() {
 let mut wrapper = Wrapper;
 wrapper.do_something_wrapper::<i32, _>(|value| ());
 }","trait Output<'a> {
 type Type;
 }
 
 struct Wrapper;
 
 impl Wrapper {
 fn do_something_wrapper<O, F>(&mut self, do_something_wrapper: F)
 where
 FnOnce:,
 F: for<'a> FnOnce(<F as Output<i32, _>>::Type),
 {
 }
 }
 
 fn main() {
 let mut wrapper = Wrapper;
 wrapper.do_something_wrapper::<i32, _>(|value| ());
 }",,,,,1,FnOnce,,,
121128,"{'I-ICE', 'E-needs-bisection', 'A-MIR', 'T-compiler', 'A-const-eval', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/121128,Not a bug,,,,,,,ICE `'try_get_slice_bytes' on non-slice constant`,2024-02-15T05:41:42Z,2024-02-15T12:34:13Z,,,,,,0,,,,,0,,,,,,,,,,,
121103,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/121103,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-report,5. Exception Handling & Report,2,ice: `mir_const_qualif: MIR had errors`,2024-02-14T17:58:10Z,,121116,https://github.com/rust-lang/rust/pull/121116,,,,0,59,"['expr.rs', 'lib.rs', 'issue-121108.rs', 'issue-121108.stderr', 'issue-121103.rs', 'issue-121103.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_mir_transform/src', 'tests/ui/lowering', 'tests/ui/lowering', 'tests/ui/mir', 'tests/ui/mir']",,0,"//! Abstraction for creating `fn` pointers from any callable that *effectively*
 //! has the equivalent of implementing `Default`, even if the compiler neither
 //! provides `Default` nor allows reifying closures (i.e. creating `fn` pointers)
 //! other than those with absolutely no captures.
 //!
 //! More specifically, for a closure-like type to be ""effectively `Default`"":
 //! * it must be a ZST (zero-sized type): no information contained within, so
 //! that `Default`'s return value (if it were implemented) is unambiguous
 //! * it must be `Copy`: no captured ""unique ZST tokens"" or any other similar
 //! types that would make duplicating values at will unsound
 //! * combined with the ZST requirement, this confers a kind of ""telecopy""
 //! ability: similar to `Copy`, but without keeping the value around, and
 //! instead ""reconstructing"" it (a noop given it's a ZST) when needed
 //! * it must be *provably* inhabited: no captured uninhabited types or any
 //! other types that cannot be constructed by the user of this abstraction
 //! * the proof is a value of the closure-like type itself, in a sense the
 //! ""seed"" for the ""telecopy"" process made possible by ZST + `Copy`
 //! * this requirement is the only reason an abstraction limited to a specific
 //! usecase is required: ZST + `Copy` can be checked with *at worst* a panic
 //! at the ""attempted `::default()` call"" time, but that doesn't guarantee
 //! that the value can be soundly created, and attempting to use the typical
 //! ""proof ZST token"" approach leads yet again to having a ZST + `Copy` type
 //! that is not proof of anything without a value (i.e. isomorphic to a
 //! newtype of the type it's trying to prove the inhabitation of)
 //!
 //! A more flexible (and safer) solution to the general problem could exist once
 //! `const`-generic parameters can have type parameters in their types:
 //!
 //! ```rust,ignore (needs future const-generics)
 //! extern ""C"" fn ffi_wrapper<
 //! A, R,
 //! F: Fn(A) -> R,
 //! const f: F, // <-- this `const`-generic is not yet allowed
 //! >(arg: A) -> R {
 //! f(arg)
 //! }
 //! ```
 
 use std::mem;
 
 // FIXME(eddyb) this could be `trait` impls except for the `const fn` requirement.
 macro_rules! define_reify_functions {
 ($(
 fn $name:ident $(<$($param:ident),*>)?
 for $(extern $abi:tt)? fn($($arg:ident: $arg_ty:ty),*) -> $ret_ty:ty;
 )+) => {
 $(pub const fn $name<
 $($($param,)*)?
 F: Fn($($arg_ty),*) -> $ret_ty + Copy
 >(f: F) -> $(extern $abi)? fn($($arg_ty),*) -> $ret_ty {
 // FIXME(eddyb) describe the `F` type (e.g. via `type_name::<F>`) once panic
 // formatting becomes possible in `const fn`.
 assert!(mem::size_of::<F>() == 0, ""selfless_reify: closure must be zero-sized"");
 
 $(extern $abi)? fn wrapper<
 $($($param,)*)?
 F: Fn($($arg_ty),*) -> $ret_ty + Copy
 >($($arg: $arg_ty),*) -> $ret_ty {
 let f = unsafe {
 // SAFETY: `F` satisfies all criteria for ""out of thin air""
 // reconstructability (see module-level doc comment).
 mem::MaybeUninit::<F>::uninit().assume_init()
 };
 f($($arg),*)
 }
 let _f_proof = f;
 wrapper::<
 $($($param,)*)?
 F
 >
 })+
 }
 }
 
 define_reify_functions! {
 fn _reify_to_extern_c_fn_unary<A, R> for extern ""C"" fn(arg: A) -> R;
 
 // HACK(eddyb) this abstraction is used with `for<'a> fn(BridgeConfig<'a>)
 // -> T` but that doesn't work with just `reify_to_extern_c_fn_unary`
 // because of the `fn` pointer type being ""higher-ranked"" (i.e. the
 // `for<'a>` binder).
 // FIXME(eddyb) try to remove the lifetime from `BridgeConfig`, that'd help.
 fn reify_to_extern_c_fn_hrt_bridge<R> for extern ""C"" fn(bridge: super::BridgeConfig<'_>) -> R;
 }","use std::mem;
 
 macro_rules! define_reify_functions {
 ($(
 fn $name:ident $(<$($param:ident),*>)?
 for $(extern $abi:tt)? fn($($arg:ident: $arg_ty:ty),*) -> $ret_ty:ty;
 )+) => {
 $(pub const fn $name<
 $($($param,)*)?
 F: Fn($($arg_ty),*) -> $ret_ty + Copy
 >(f: F) -> $(extern $abi)? fn($($arg_ty),*) -> $ret_ty {
 
 
 assert!(mem::size_of::<F>() == 0, );
 
 $(extern $abi)? fn wrapper<
 $($($param,)*)?
 F: Fn($($arg_ty),*) -> $ret_ty + Copy
 >($($arg: $arg_ty),*) -> $ret_ty {
 let f = unsafe {
 
 
 mem::MaybeUninit::<F>::uninit().assume_init()
 };
 f($($arg),*)
 }
 let _f_proof = f;
 wrapper::<
 $($($param,)*)?
 F
 >
 })+
 }
 }
 
 define_reify_functions! {
 fn _reify_to_extern_c_fn_unary<A, R> for extern ""C"" fn(arg: A) -> R;
 
 fn reify_to_extern_c_fn_hrt_bridge<R> for extern ""C"" fn(bridge: super::BridgeConfig<'_>) -> R;
 }",,,,1,1,,,rustc --crate-type=lib,
121094,"{'P-critical', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/121094,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Recent optimization broke async recursion in release mode,2024-02-14T17:20:44Z,2024-02-15T23:26:27Z,121133,https://github.com/rust-lang/rust/pull/121133,Skip coroutines in jump threading to avoid query cycles,2024/2/15 8:27,2024/2/15 23:26,1,20,"['jump_threading.rs', 'mir_query_cycle.rs']","['compiler/rustc_mir_transform/src', 'tests/ui/mir']",P-critical,0,"use std::{future::Future, pin::Pin};
 
 pub async fn foo(count: u32) {
 if count == 0 {
 return
 } else {
 let fut: Pin<Box<dyn Future<Output = ()>>> = Box::pin(foo(count - 1));
 fut.await;
 }
 }","use std::{future::Future, pin::Pin};
 
 pub async fn foo(count: u32) {
 if count == 0 {
 return
 } else {
 let fut: Pin<Box<dyn Future<Output = ()>>> = Box::pin(foo(count - 1));
 fut.await;
 }
 }",,1,1,1,,,,,
121063,"{'I-ICE', 'S-bug-has-test', '-Zpolymorphize', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/121063,valid,icemaker,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,1,ICE: `type parameter impl .. out of range when substituting`,2024-02-14T02:22:37Z,2024-07-25T18:03:56Z,128171,https://github.com/rust-lang/rust/pull/128171,Make sure that args are compatible in `resolve_associated_item`,2024/7/25 3:03,2024/7/25 18:03,162,238,"['instance.rs', '120792.rs', '120793-2.rs', '120793.rs', '121063.rs', '121957-1.rs', '121957-2.rs', 'inline-incorrect-early-bound.rs', 'inline-incorrect-early-bound.stderr', 'inline-incorrect-early-bound-in-ctfe.rs', 'inline-incorrect-early-bound-in-ctfe.stderr']","['compiler/rustc_ty_utils/src', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/polymorphization', 'tests/ui/polymorphization', 'tests/ui/rfcs/rfc-2632-const-trait-impl', 'tests/ui/rfcs/rfc-2632-const-trait-impl']",,0,"use std::{
 fmt, ops,
 path::{Component, Path, PathBuf},
 };
 
 pub struct AbsPathBuf(PathBuf);
 
 impl TryFrom<PathBuf> for AbsPathBuf {
 type Error = PathBuf;
 fn try_from(path: impl AsRef<Path>) -> Result<AbsPathBuf, PathBuf> {}
 }
 
 impl TryFrom<&str> for AbsPathBuf {
 fn try_from(path: &str) -> Result<AbsPathBuf, PathBuf> {
 AbsPathBuf::try_from(PathBuf::from(path))
 }
 }","use std::{
 fmt, ops,
 path::{Component, Path, PathBuf},
 };
 
 pub struct AbsPathBuf(PathBuf);
 
 impl TryFrom<PathBuf> for AbsPathBuf {
 type Error = PathBuf;
 fn try_from(path: impl AsRef<Path>) -> Result<AbsPathBuf, PathBuf> {}
 }
 
 impl TryFrom<&str> for AbsPathBuf {
 fn try_from(path: &str) -> Result<AbsPathBuf, PathBuf> {
 AbsPathBuf::try_from(PathBuf::from(path))
 }
 }",,,,1,,,"-Zpolymorphize=on
--edition=X
-Zinline-mir=yes",rustc -Zpolymorphize=on --edition=2021 -Zinline-mir=yes,
120934,"{'T-types', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/120934,Not a bug,,,,,,,Implementation is not general enough with explicit `impl<'a>`,2024-02-11T14:12:03Z,2024-02-12T11:49:53Z,,,,,,0,,,,,0,,,,,,,,,,,
120925,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/120925,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,ice: `cast_to.ty.is_unsafe_ptr()`,2024-02-11T09:57:01Z,2024-02-14T14:08:37Z,121039,https://github.com/rust-lang/rust/pull/121039,Correctly compute adjustment casts in GVN,2024/2/13 17:26,2024/2/14 14:08,3,39,"['gvn.rs', 'issue_120925_unsafefncast.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt']",,0,"static FOO: fn() = || assert_ne!(42, 43);
 static BAR: fn(i32, i32) = |a, b| assert_ne!(a, b);
 
 // use to first make the closure FnOnce() before making it fn()
 fn force_once0<R, F: FnOnce() -> R>(f: F) -> F {
 f
 }
 fn force_once1<T, R, F: FnOnce(T) -> R>(f: F) -> F {
 f
 }
 fn force_mut0<R, F: FnMut() -> R>(f: F) -> F {
 f
 }
 fn force_mut1<T, R, F: FnMut(T) -> R>(f: F) -> F {
 f
 }
 
 fn main() {
 FOO();
 BAR(44, 45);
 let bar: unsafe fn(i32, i32) = BAR;
 unsafe { bar(46, 47) };
 let boo: &dyn Fn(i32, i32) = &BAR;
 boo(48, 49);
 
 let f: fn() = || {};
 f();
 let f = force_once0(|| {}) as fn();
 f();
 let f = force_mut0(|| {}) as fn();
 f();
 
 let g: fn(i32) = |i| assert_eq!(i, 2);
 g(2);
 let g = force_once1(|i| assert_eq!(i, 2)) as fn(i32);
 g(2);
 let g = force_mut1(|i| assert_eq!(i, 2)) as fn(i32);
 g(2);
 }","static FOO: fn() = || assert_ne!(42, 43);
 static BAR: fn(i32, i32) = |a, b| assert_ne!(a, b);
 
 fn main() {
 FOO();
 
 let bar: unsafe fn(i32, i32) = BAR;
 
 let f: fn() = || {};
 f();
 
 f();
 
 f();
 
 let g: fn(i32) = |i| assert_eq!(i, 2);
 g(2);
 
 g(2);
 
 g(2);
 }",,,,,,,-Zmir-opt-level=X,rustc -Zmir-opt-level=5,
120819,"{'I-unsound', 'A-MIR', 'P-high', 'llvm-fixed-upstream', 'T-compiler', 'C-bug', 'A-LLVM'}",https://github.com/rust-lang/rust/issues/120819,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,6. LLVM,6. Compatibility Issues,0,Miscompliation due to LLVM IR alignment issue (?),2024-02-09T01:02:23Z,2024-03-02T00:05:42Z,121395,https://github.com/rust-lang/rust/pull/121395,Update to LLVM 18.1.0 rc 4,2024/2/21 12:14,2024/3/2 0:05,21,45,"['dist.rs', 'llvm.rs', 'llvm-project', 'main.rs']","['src/bootstrap/src/core/build_steps', 'src/bootstrap/src/core/build_steps', 'src', 'src/tools/opt-dist/src']",P-high,0,"#![feature(custom_mir, core_intrinsics)]
 #![allow(unused_parens, unused_assignments, overflowing_literals)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 pub fn enter() {
 fn13(core::hint::black_box((0, [false; 6], [0; 4], 0, 0)));
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn13(mut _6: (i8, [bool; 6], [i64; 4], i128, u8)) {
 mir! {
 let _1: [bool; 6];
 let _14: [u16; 6];
 let _17: *const (i8, [bool; 6], [i64; 4], i128, u8);
 let _19: Adt59;
 let _27: (i8, [bool; 6], [i64; 4], i128, u8);
 let _34: Adt54;
 let _49: ();
 {
 _1 = [false,true,true,true,true,true];
 _19.fld4 = [25264_u16,54664_u16,47032_u16,55453_u16,33511_u16,43043_u16];
 _17 = core::ptr::addr_of!(_6);
 _1 = (*_17).1;
 (*_17).1 = [false,true,true,false,false,true];
 Call(_49 = fn14(_6.1), ReturnTo(bb3), UnwindUnreachable())
 }
 bb3 = {
 (*_17).1 = _1;
 _14 = _19.fld4;
 _17 = core::ptr::addr_of!(_27);
 _34.fld5 = (-1228700359_i32);
 _34.fld1 = _6;
 match _34.fld5 {
 0 => bb3,
 340282366920938463463374607430539511097 => bb12,
 _ => bb18
 }
 }
 bb12 = {
 (*_17) = (_6.0, _6.1, _6.2, _34.fld1.3, _6.4);
 _1 = _27.1;
 Call(_49 = p1(Move(_1)), ReturnTo(bb17), UnwindUnreachable())
 }
 bb17 = {
 Call(_49 = hide(13_usize, 25_usize, 0_usize, 11_usize, 0_usize, 14_usize, Move(_14), 6_usize, Move(_6)), ReturnTo(bb18), UnwindUnreachable())
 }
 bb18 = {
 Return()
 }
 
 }
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn14(mut _16: [bool; 6]) {
 mir! {
 let _20: (i8, [bool; 6], [i64; 4], i128, u8);
 let unit: ();
 let _44: ();
 {
 Call(_44 = core::hint::black_box(unit), ReturnTo(bb17), UnwindUnreachable())
 }
 bb17 = {
 Call(_20.1 = core::hint::black_box(Move(_16)), ReturnTo(bb18), UnwindUnreachable())
 }
 bb18 = {
 Return()
 }
 
 }
 }
 pub fn main() {
 enter();
 }
 
 #[derive(Debug)]
 pub struct Adt54 {
 fld1: (i8, [bool; 6], [i64; 4], i128, u8),
 fld5: i32,
 }
 #[derive(Debug)]
 pub struct Adt59 {
 fld4: [u16; 6],
 }
 
 extern ""C"" {
 fn printf(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
 }
 #[cfg(not(miri))]
 fn print_bool(x: bool) {
 unsafe {
 printf(b""%d\n\0"".as_ptr().cast(), x as core::ffi::c_int);
 }
 }
 
 #[cfg(miri)]
 fn print_bool(x: bool) {
 println!(""{}"", x as i32);
 }
 
 #[inline(never)]
 pub fn p1(x: [bool; 6]) {
 for b in x {
 print_bool(b);
 }
 }
 
 #[inline(never)]
 fn hide(
 f: usize,
 var0: usize,
 val0: usize,
 var1: usize,
 val1: usize,
 var2: usize,
 val2: [u16; 6],
 var3: usize,
 val3: (i8, [bool; 6], [i64; 4], i128, u8),
 ) {
 core::hint::black_box(val2);
 core::hint::black_box(val3);
 }","#![feature(custom_mir, core_intrinsics)]
 #![allow(unused_parens, unused_assignments, overflowing_literals)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 pub fn enter() {
 fn13(core::hint::black_box((0, [false; 6], [0; 4], 0, 0)));
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn13(mut _6: (i8, [bool; 6], [i64; 4], i128, u8)) {
 mir! {
 let _1: [bool; 6];
 let _14: [u16; 6];
 let _17: *const (i8, [bool; 6], [i64; 4], i128, u8);
 let _19: Adt59;
 let _27: (i8, [bool; 6], [i64; 4], i128, u8);
 let _34: Adt54;
 let _49: ();
 {
 _1 = [false,true,true,true,true,true];
 _19.fld4 = [25264_u16,54664_u16,47032_u16,55453_u16,33511_u16,43043_u16];
 _17 = core::ptr::addr_of!(_6);
 _1 = (*_17).1;
 (*_17).1 = [false,true,true,false,false,true];
 Call(_49 = fn14(_6.1), ReturnTo(bb3), UnwindUnreachable())
 }
 bb3 = {
 (*_17).1 = _1;
 _14 = _19.fld4;
 _17 = core::ptr::addr_of!(_27);
 _34.fld5 = (-1228700359_i32);
 _34.fld1 = _6;
 match _34.fld5 {
 0 => bb3,
 340282366920938463463374607430539511097 => bb12,
 _ => bb18
 }
 }
 bb12 = {
 (*_17) = (_6.0, _6.1, _6.2, _34.fld1.3, _6.4);
 _1 = _27.1;
 Call(_49 = p1(Move(_1)), ReturnTo(bb17), UnwindUnreachable())
 }
 bb17 = {
 Call(_49 = hide(13_usize, 25_usize, 0_usize, 11_usize, 0_usize, 14_usize, Move(_14), 6_usize, Move(_6)), ReturnTo(bb18), UnwindUnreachable())
 }
 bb18 = {
 Return()
 }
 
 }
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn14(mut _16: [bool; 6]) {
 mir! {
 let _20: (i8, [bool; 6], [i64; 4], i128, u8);
 let unit: ();
 let _44: ();
 {
 Call(_44 = core::hint::black_box(unit), ReturnTo(bb17), UnwindUnreachable())
 }
 bb17 = {
 Call(_20.1 = core::hint::black_box(Move(_16)), ReturnTo(bb18), UnwindUnreachable())
 }
 bb18 = {
 Return()
 }
 
 }
 }
 pub fn main() {
 enter();
 }
 
 #[derive(Debug)]
 pub struct Adt54 {
 fld1: (i8, [bool; 6], [i64; 4], i128, u8),
 fld5: i32,
 }
 #[derive(Debug)]
 pub struct Adt59 {
 fld4: [u16; 6],
 }
 
 extern ""C"" {
 fn printf(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
 }
 #[cfg(not(miri))]
 fn print_bool(x: bool) {
 unsafe {
 printf(b""%d\n\0"".as_ptr().cast(), x as core::ffi::c_int);
 }
 }
 
 #[cfg(miri)]
 fn print_bool(x: bool) {
 println!(""{}"", x as i32);
 }
 
 #[inline(never)]
 pub fn p1(x: [bool; 6]) {
 for b in x {
 print_bool(b);
 }
 }
 
 #[inline(never)]
 fn hide(
 f: usize,
 var0: usize,
 val0: usize,
 var1: usize,
 val1: usize,
 var2: usize,
 val2: [u16; 6],
 var3: usize,
 val3: (i8, [bool; 6], [i64; 4], i128, u8),
 ) {
 core::hint::black_box(val2);
 core::hint::black_box(val3);
 }",1,,,,,,,,"#![feature(custom_mir, core_intrinsics)]
"
120648,"{'I-ICE', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/120648,valid,developer,1. Crash-Front-end Panic,valid,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-WF,1,ICE on async_fn_in_trait when trait implementation misses a lifetime in different crates,2024-02-04T18:35:31Z,,120707,https://github.com/rust-lang/rust/pull/120707,,,,2,,,,,0,"// lib.rs in crate jewel
 #![no_std]
 #[allow(async_fn_in_trait)]
 
 pub trait BleRadio<'a> {
 fn set_buffer(&mut self, buffer: &'a [u8]);
 async fn transmit(&mut self);
 }
 //lib.rs in another crate that depends on the jewel crate
 #![no_std]
 #![allow(async_fn_in_trait)]
 
 use jewel::BleRadio;
 
 pub struct Radio {}
 
 impl BleRadio for Radio {
 fn set_buffer(&mut self, buffer: &[u8]) {}
 async fn transmit(&mut self) {}
 }","// lib.rs in crate jewel
 #![no_std]
 #[allow(async_fn_in_trait)]
 
 pub trait BleRadio<'a> {
 fn set_buffer(&mut self, buffer: &'a [u8]);
 async fn transmit(&mut self);
 }
 //lib.rs in another crate that depends on the jewel crate
 #![no_std]
 #![allow(async_fn_in_trait)]
 
 use jewel::BleRadio;
 
 pub struct Radio {}
 
 impl BleRadio for Radio {
 fn set_buffer(&mut self, buffer: &[u8]) {}
 async fn transmit(&mut self) {}
 }",,1,,1,1,,,crate,
120638,"{'I-ICE', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/120638,valid,developer,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-WF,1,ICE: DefId::expect_local: `DefId(20:3827 ~ picoserve[6f4f]::extract::FromRequest::from_request::{opaque#0}::'r)` isn't local,2024-02-04T10:05:50Z,,120707,https://github.com/rust-lang/rust/pull/120707,,,,2,,,,,0,,,,,,,,,,,
120613,"{'I-unsound', 'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/120613,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,GVN causes moved function arguments to be used again,2024-02-03T14:28:47Z,2024-02-08T14:21:10Z,120688,https://github.com/rust-lang/rust/pull/120688,GVN: also turn moves into copies with projections,2024/2/5 23:32,2024/2/8 14:21,4,83,"['gvn.rs', 'gvn_copy_moves.fn0.GVN.diff', 'gvn_copy_moves.rs', 'separate_const_switch.identity.SeparateConstSwitch.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",P-medium,0,"#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[inline(never)]
 fn dump_var(x: [u128; 6]) {
 println!(""{x:?}"");
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn0() {
 mir! {
 let _12: usize;
 let _14: [u128; 6];
 let _26: ([u128; 6],);
 let _29: ([u128; 6],);
 let x: ();
 {
 _12 = 1_usize;
 _14 = [42; 6];
 _14[_12] = 1;
 _29 = (_14,);
 _26 = _29;
 Call(x = fn1(_29.0, _26), ReturnTo(bb14), UnwindUnreachable())
 }
 bb14 = {
 Return()
 }
 }
 }
 
 pub fn fn1(mut _13: [u128; 6], mut _14: ([u128; 6],)) {
 _14.0 = [0; 6];
 dump_var(_13);
 dump_var(_14.0);
 }
 pub fn main() {
 fn0();
 }","#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[inline(never)]
 fn dump_var(x: [u128; 6]) {
 println!(""{x:?}"");
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn0() {
 mir! {
 let _12: usize;
 let _14: [u128; 6];
 let _26: ([u128; 6],);
 let _29: ([u128; 6],);
 let x: ();
 {
 _12 = 1_usize;
 _14 = [42; 6];
 _14[_12] = 1;
 _29 = (_14,);
 _26 = _29;
 Call(x = fn1(_29.0, _26), ReturnTo(bb14), UnwindUnreachable())
 }
 bb14 = {
 Return()
 }
 }
 }
 
 pub fn fn1(mut _13: [u128; 6], mut _14: ([u128; 6],)) {
 _14.0 = [0; 6];
 dump_var(_13);
 dump_var(_14.0);
 }
 pub fn main() {
 fn0();
 }",1,,,,,,,,"#![feature(custom_mir, core_intrinsics)]"
120541,"{'A-coercions', 'A-array', 'A-inference', 'T-libs-api', 'C-bug', 'A-slice'}",https://github.com/rust-lang/rust/issues/120541,Not a bug,,,,,,,Reverse regression: unsized coercion from array to slice in `Arc::from` started compiling in 1.74.0,2024-02-01T02:16:48Z,2024-02-01T23:28:45Z,,,,,,0,,,,,1,,,,,,,,,,,
120514,"{'A-impl-trait', 'C-discussion'}",https://github.com/rust-lang/rust/issues/120514,Not a bug,,,,,,,Generic Future<Output = ()> not matching impl Future<Output = ()>,2024-01-30T23:24:25Z,2024-01-30T23:39:27Z,,,,,,0,,,,,0,,,,,,,,,,,
120421,"{'I-ICE', 'F-never_patterns', 'S-bug-has-test', 'A-MIR', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/120421,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,3,ice: broken mir with `never_patterns`,2024-01-27T12:31:37Z,2024-05-08T10:30:34Z,123332,https://github.com/rust-lang/rust/pull/123332,,,,101,,,,,0,"// revisions: normal exh_pats
 //[normal] check-pass
 #![feature(never_patterns)]
 #![allow(incomplete_features)]
 #![cfg_attr(exh_pats, feature(exhaustive_patterns))]
 #![allow(dead_code, unreachable_code)]
 #![cfg_attr(exh_pats, feature(exhaustive_patterns))]
 
 #[derive(Copy, Clone)]
 enum Void {}
 
 fn main() {
 let res_void: Result<bool, Void> = Ok(true);
 
 match res_void {
 Ok(_x) => {}
 Err(!),
 //[exh_pats]~^ ERROR unreachable
 }
 let (Ok(_x) | Err(!)) = res_void;
 //[exh_pats]~^ ERROR unreachable
 if let Err(!) = res_void {}
 //[exh_pats]~^ ERROR unreachable
 if let (Ok(true) | Err(!)) = res_void {}
 //[exh_pats]~^ ERROR unreachable
 for (Ok(mut _x) | Err(!)) in [res_void] {}
 //[exh_pats]~^ ERROR unreachable
 }
 
 fn foo((Ok(_x) | Err(!)): Result<bool, Void>) {}
 //[exh_pats]~^ ERROR unreachable","#![feature(never_patterns)]
 
 enum Void {}
 
 fn main() {
 let res_void: Result<bool, Void> = Ok(true);
 
 for (Ok(mut _x) | Err(!)) in [res_void] {}
 }",,,,,,,-Zlint-mir,rustc -Zlint-mir,#![feature(never_patterns)]
120337,"{'I-ICE', 'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', '-Zvalidate-mir', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/120337,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,3,ice: `!layout.abi.is_uninhabited()`,2024-01-25T11:29:20Z,2024-01-26T14:57:04Z,120367,https://github.com/rust-lang/rust/pull/120367,interpret: project_downcast: do not ICE for uninhabited variants,2024/1/26 7:24,2024/1/26 14:57,1,154,"['operand.rs', 'projection.rs', 'syntax.rs', 'dataflow_const_prop.rs', 'issue-120337-irrefutable-let-ice.rs', 'gvn_uninhabited.f.GVN.panic-abort.diff', 'gvn_uninhabited.f.GVN.panic-unwind.diff', 'gvn_uninhabited.rs', 'let-irrefutable-pattern-ice-120337.rs']","['compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_transform/src', 'src/tools/miri/tests/pass/issues', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/ui/consts']",P-medium,0,"fn test_questionmark() -> Result<(), ()> {
 { 
 Ok(Ok(())) }??;
 Ok(())
 }
 
 fn main() {
 test_questionmark().unwrap();
 }","fn test_questionmark() -> Result<(), ()> {
 { 
 Ok(Ok(())) }??;
 Ok(())
 }
 
 fn main() {
 test_questionmark().unwrap();
 }",,,,,,,"--edition=X
-Zvalidate-mir
-Zmir-opt-level=X
-Zunsound-mir-opts",rustc --edition=2021 -Zvalidate-mir -Zmir-opt-level=5 -Zunsound-mir-opts treereduce.out,
120256,"{'A-inference', 'T-compiler', 'C-discussion'}",https://github.com/rust-lang/rust/issues/120256,duplicate,,,,,,,Compiler unable to infer obvious types,2024-01-23T02:01:19Z,2024-01-23T11:46:15Z,,,,,,0,,,,,0,,,,,,,,,,,
120222,"{'A-trait-objects', 'I-unsound', 'T-types', 'requires-nightly', 'A-coercions', 'C-bug', 'T-lang', 'F-trait_upcasting'}",https://github.com/rust-lang/rust/issues/120222,valid,members,3. Miscompilation-Safe Rust Causes UB,,3. MIR-Borrow Check,2. Ownership-Lifetime,6,"Pointer casts allow switching trait parameters for trait objects, which doesn鈥檛 interact soundly with trait upcasting",2024-01-22T03:12:10Z,2024-07-08T21:51:01Z,120248,https://github.com/rust-lang/rust/pull/120248,,,,168,,,,,0,"#![feature(trait_upcasting)]
 
 pub trait SupSupA {
 fn method(&self) {}
 }
 pub trait SupSupB {}
 impl<T> SupSupA for T {}
 impl<T> SupSupB for T {}
 
 pub trait Super<T>: SupSupA + SupSupB {}
 
 pub trait Unimplemented {}
 
 pub trait Trait<T1, T2>: Super<T1> + Super<T2> {
 fn missing_method(&self)
 where
 T1: Unimplemented,
 {
 }
 }
 
 impl<S, T> Super<T> for S {}
 
 impl<S, T1, T2> Trait<T1, T2> for S {}
 
 #[inline(never)]
 pub fn user1() -> &'static dyn Trait<u8, u8> {
 &()
 /* VTABLE:
 .L__unnamed_2:
 .quad core::ptr::drop_in_place<()>
 .asciz ""\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000""
 .quad example::SupSupA::method
 .quad .L__unnamed_4 // SupSupB vtable (pointer)
 .zero 8 // null pointer for missing_method
 */
 }
 
 #[inline(never)]
 pub fn user2() -> &'static dyn Trait<u8, u16> {
 &()
 /* VTABLE:
 .L__unnamed_3:
 .quad core::ptr::drop_in_place<()>
 .asciz ""\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000""
 .quad example::SupSupA::method
 .quad .L__unnamed_4 // SupSupB vtable (pointer)
 .quad .L__unnamed_5 // Super<u16> vtable (pointer)
 .zero 8 // null pointer for missing_method
 */
 }
 
 fn main() {
 let p: *const dyn Trait<u8, u8> = &();
 let p = p as *const dyn Trait<u8, u16>; // <- this is bad!
 let p = p as *const dyn Super<u16>; // <- this upcast accesses improper vtable entry
 // accessing from L__unnamed_2 the position for the 'Super<u16> vtable (pointer)',
 // thus reading 'null pointer for missing_method'
 
 let p = p as *const dyn SupSupB; // <- this upcast dereferences (null) pointer from that entry
 // to read the SupSupB vtable (pointer)
 
 // SEGFAULT
 
 println!(""{:?}"", p);
 }","#![feature(trait_upcasting)]
 
 trait Trait<T>: Super {}
 trait Super {}
 
 impl<S, T> Trait<T> for S {}
 impl<S> Super for S {}
 
 fn main() {
 let p: *const dyn Trait<u8> = &();
 let p = p as *const dyn Trait<u16>;
 let _p = p as *const dyn Super; // this is where miri complains already
 }",,,1,,1,,,miri,#![feature(trait_upcasting)]
120217,"{'A-lifetimes', 'A-trait-objects', 'I-unsound', 'T-types', 'requires-nightly', 'P-medium', 'A-coercions', 'C-bug', 'F-arbitrary_self_types'}",https://github.com/rust-lang/rust/issues/120217,valid,members,3. Miscompilation-Safe Rust Causes UB,,3. MIR-Borrow Check,2. Ownership-Lifetime,6,"Pointer casts allow switching trait parameters for trait objects, which can be unsound with raw pointers as receiver types under `feature(arbitrary_self_types)`",2024-01-22T00:24:17Z,2024-07-08T21:51:16Z,120248,https://github.com/rust-lang/rust/pull/120248,,,,168,,,,P-medium,0,"#![feature(arbitrary_self_types)]
 
 trait Static<'a> {
 fn proof(self: *const Self, s: &'a str) -> &'static str;
 }
 
 fn bad_cast<'a>(x: *const dyn Static<'static>) -> *const dyn Static<'a> {
 x as _
 }
 
 impl Static<'static> for () {
 fn proof(self: *const Self, s: &'static str) -> &'static str {
 s
 }
 }
 
 fn extend_lifetime(s: &str) -> &'static str {
 bad_cast(&()).proof(s)
 }
 
 fn main() {
 let s = String::from(""Hello World"");
 let slice = extend_lifetime(&s);
 println!(""Now it exists: {slice}"");
 drop(s);
 println!(""Now it’s gone: {slice}"");
 }","#![feature(arbitrary_self_types)]
 
 trait Static<'a> {
 fn proof(self: *const Self, s: &'a str) -> &'static str;
 }
 
 fn bad_cast<'a>(x: *const dyn Static<'static>) -> *const dyn Static<'a> {
 x as _
 }
 
 impl Static<'static> for () {
 fn proof(self: *const Self, s: &'static str) -> &'static str {
 s
 }
 }
 
 fn extend_lifetime(s: &str) -> &'static str {
 bad_cast(&()).proof(s)
 }
 
 fn main() {
 let s = String::from(""Hello World"");
 let slice = extend_lifetime(&s);
 println!(""Now it exists: {slice}"");
 drop(s);
 println!(""Now it’s gone: {slice}"");
 }",,,1,,1,,,,#![feature(arbitrary_self_types)]
120130,"{'T-compiler', 'A-MIR', 'C-feature-request'}",https://github.com/rust-lang/rust/issues/120130,exclude,,,,,,,`mir_framework`: Problem with exports used by external tools,2024-01-19T12:43:40Z,2024-01-22T11:07:51Z,,,,,,2,6,['lib.rs'],['compiler/rustc_mir_dataflow/src'],,0,,,,,,,,,,,
120046,"{'A-code-coverage', 'C-enhancement', 'T-compiler', 'A-closures'}",https://github.com/rust-lang/rust/issues/120046,exclude,,,,,,,Coverage instrumentation of unit tests also instruments a closure added by `#[test]`,2024-01-17T06:21:59Z,2024-01-24T00:44:43Z,120183,https://github.com/rust-lang/rust/pull/120183,Add `#[coverage(off)]` to closures introduced by `#[test]` and `#[bench]`,2024/1/21 3:39,2024/1/24 0:44,6,70,"['lib.rs', 'test.rs', 'mod.rs', 'bench.cov-map', 'bench.coverage', 'bench.rs', 'test_harness.cov-map', 'test_harness.coverage', 'tests-are-sorted.pp']","['compiler/rustc_builtin_macros/src', 'compiler/rustc_builtin_macros/src', 'library/core/src/macros', 'tests/coverage', 'tests/coverage', 'tests/coverage', 'tests/coverage', 'tests/coverage', 'tests/pretty']",,0,,,,,,,,,,,
119687,"{'F-const_trait_impl', 'A-closures', 'PG-const-traits', 'T-compiler', 'C-bug', 'F-effects'}",https://github.com/rust-lang/rust/issues/119687,Not a bug,,,,,,,`const_trait_impl` does not keep track of closures,2024-01-07T10:20:23Z,2024-11-16T00:24:32Z,,,,,,313,,,,,0,,,,,,,,,,,
119674,"{'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/119674,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,JumpThreading is confused by an extraordinary use of SetDiscriminant,2024-01-06T21:09:26Z,2024-01-07T17:47:00Z,119675,https://github.com/rust-lang/rust/pull/119675,Skip threading over no-op SetDiscriminant.,2024/1/6 22:20,2024/1/7 17:47,0,152,"['jump_threading.rs', 'set_no_discriminant.f.JumpThreading.diff', 'set_no_discriminant.generic.JumpThreading.diff', 'set_no_discriminant.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"#![feature(custom_mir)]
 #![feature(core_intrinsics)]
 use std::intrinsics::mir::*;
 
 enum E { A, B(char) }
 
 #[custom_mir(dialect = ""runtime"")]
 pub fn f() -> usize {
 mir!(
 let a: isize;
 let e: E;
 {
 e = E::A;
 SetDiscriminant(e, 1);
 a = Discriminant(e);
 match a {
 0 => bb0,
 _ => bb1,
 }
 }
 bb0 = {
 RET = 0;
 Return()
 }
 bb1 = {
 RET = 1;
 Return()
 }
 )
 }
 
 fn main() {
 assert_eq!(f(), 0);
 }","#![feature(custom_mir)]
 #![feature(core_intrinsics)]
 use std::intrinsics::mir::*;
 
 enum E { A, B(char) }
 
 #[custom_mir(dialect = ""runtime"")]
 pub fn f() -> usize {
 mir!(
 let a: isize;
 let e: E;
 {
 e = E::A;
 SetDiscriminant(e, 1);
 a = Discriminant(e);
 match a {
 0 => bb0,
 _ => bb1,
 }
 }
 bb0 = {
 RET = 0;
 Return()
 }
 bb1 = {
 RET = 1;
 Return()
 }
 )
 }
 
 fn main() {
 assert_eq!(f(), 0);
 }",1,,,1,,,"-Zmir-opt-level=X
-Zmir-enable-passes=+X",=-Zmir-opt-level=0 -Zmir-enable-passes=+JumpThreading,"#![feature(custom_mir)]
#![feature(core_intrinsics)]"
119643,"{'A-const-prop', 'regression-untriaged', 'P-medium', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/119643,valid,developer,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,`RangeInclusive` performance regression in beta + nightly,2024-01-05T22:45:27Z,2024-01-26T14:17:51Z,111344,https://github.com/rust-lang/rust/pull/111344,,,,20,,,,P-medium,0,,"use criterion::{black_box, criterion_group, criterion_main, Criterion};
 use iter_num_tools::grid_space;
 
 fn bench(i: impl Iterator<Item = [f64; 2]>) -> f64 {
 black_box(black_box(i).map(|[a, b]| a + b).sum())
 }
 
 pub fn bench_grid_space(c: &mut Criterion) {
 let mut group = c.benchmark_group(""GridSpace"");
 
 group.bench_function(""gridspace [1.0, 100.0] x200 (iter-num-tools)"", |b| {
 b.iter(|| bench(grid_space([1.0, 1.0]..=[100.0, 100.0], 200)))
 });
 
 group.finish();
 }
 
 criterion_group!(benches, bench_grid_space);
 criterion_main!(benches);",,,,,,Iterator,,,
119617,"{'A-trait-system', 'T-types', 'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/119617,duplicate,,,,,,,"Additional unrelated trait bound makes generic call not compile anymore with unhelpful ""mismatched types"" error",2024-01-05T13:40:02Z,2024-01-05T19:04:15Z,,,,,,0,,,,,0,,,,,,,,,,,
119608,"{'A-trait-system', 'C-bug', 'WG-trait-system-refactor'}",https://github.com/rust-lang/rust/issues/119608,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,overflow evaluating the requirement `<I as ToOwned>::Owned normalizes-to _` with `-Znew-solver` and winnow,2024-01-05T08:27:15Z,2024-03-08T22:48:28Z,122171,https://github.com/rust-lang/rust/pull/122171,Add some new solver tests,2024/3/8 2:13,2024/3/8 22:48,63,49,"['param-env-alias-bound-conflict.rs', 'param-env-impl-conflict.rs']","['tests/ui/traits/next-solver/assembly', 'tests/ui/traits/next-solver/env-shadows-impls']",,0,,,,,,,,,,,
119607,"{'A-trait-system', 'E-needs-mcve', 'C-bug', 'WG-trait-system-refactor'}",https://github.com/rust-lang/rust/issues/119607,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,type annotations required with `-Znew-solver` strsim:0.10.0,2024-01-05T08:23:41Z,2024-03-08T22:48:28Z,122171,https://github.com/rust-lang/rust/pull/122171,Add some new solver tests,2024/3/8 2:13,2024/3/8 22:48,63,49,"['param-env-alias-bound-conflict.rs', 'param-env-impl-conflict.rs']","['tests/ui/traits/next-solver/assembly', 'tests/ui/traits/next-solver/env-shadows-impls']",,0,,,,,,,,,,,
119575,{'A-lifetimes'},https://github.com/rust-lang/rust/issues/119575,Not a bug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
119564,"{'A-NLL', 'I-unsound', 'T-types', 'requires-nightly', 'F-coroutines', 'C-bug', 'A-borrow-checker', 'A-coroutines'}",https://github.com/rust-lang/rust/issues/119564,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,2. Ownership-Lifetime,5,Coroutine resume type is not borrow-checked,2024-01-04T02:03:41Z,2024-01-05T23:40:08Z,119563,https://github.com/rust-lang/rust/pull/119563,,,,1,,,,,0,"#![feature(coroutine_trait)]
 #![feature(coroutines)]
 
 use std::ops::Coroutine;
 
 struct Invariant<'a>(fn(&'a ()) -> &'a ());
 
 fn x<'a, 'b>() -> impl Coroutine<Invariant<'a>> {
 |_: Invariant<'a>| {
 let a: Invariant<'b> = yield ();
 }
 }","#![feature(coroutine_trait)]
 #![feature(coroutines)]
 
 use std::ops::Coroutine;
 
 struct Invariant<'a>(fn(&'a ()) -> &'a ());
 
 fn x<'a, 'b>() -> impl Coroutine<Invariant<'a>> {
 |_: Invariant<'a>| {
 let a: Invariant<'b> = yield ();
 }
 }",,,,1,1,,,,"#![feature(coroutine_trait)]
#![feature(coroutines)]"
119525,"{'T-compiler', 'A-diagnostics', 'A-trait-objects', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/119525,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,5,rustc suggests `dyn SomeTrait` for traits which aren't object safe,2024-01-02T18:48:12Z,2024-01-05T18:32:04Z,119148,https://github.com/rust-lang/rust/pull/119148,,,,2,123,"['lint.rs', 'bare-trait-dont-suggest-dyn.fixed', 'bare-trait-dont-suggest-dyn.rs', 'bare-trait-dont-suggest-dyn.stderr']","['compiler/rustc_hir_analysis/src/astconv', 'tests/ui/object-safety', 'tests/ui/object-safety', 'tests/ui/object-safety']",,0,"fn ord_prefer_dot(s: &str) -> Ord {
 (s.starts_with("".""), s)
 }","fn ord_prefer_dot(s: &str) -> Ord {
 (s.starts_with("".""), s)
 }",,,,,,,,,
119469,"{'T-lang', 'C-feature-request', 'A-inference'}",https://github.com/rust-lang/rust/issues/119469,duplicate,,,,,,,Generic Type can't inference properly,2023-12-31T10:29:12Z,2024-03-01T11:00:14Z,,,,,,61,,,,,0,,,,,,,,,,,
119419,"{'A-NLL', 'D-incorrect', 'T-compiler', 'A-variance', 'A-borrow-checker', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/119419,duplicate,,,,,,,"""lifetime may not live long enough"" error wrong way round with contravariant type.",2023-12-29T20:15:08Z,2024-01-21T16:03:33Z,,,,,,22,,,,,0,,,,,,,,,,,
119366,"{'T-opsem', 'I-unsound', 'A-MIR', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt', 'A-miri'}",https://github.com/rust-lang/rust/issues/119366,exclude,,,,,,,Inliner use of storage statements is unsound,2023-12-27T23:42:51Z,2024-06-19T13:33:45Z,126154,https://github.com/rust-lang/rust/pull/126154,StorageLive: refresh storage (instead of UB) when local is already live,2024/6/8 10:08,2024/6/19 13:33,174,82,"['messages.ftl', 'eval_context.rs', 'syntax.rs', 'storage-live-dead-var.rs', 'storage-live-dead-var.stderr', 'storage-live-resets-var.rs', 'storage-live-resets-var.stderr']","['compiler/rustc_const_eval', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_middle/src/mir', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail']",,0,,,,,,,,,,,
119253,"{'I-ICE', 'fixed-by-next-solver', 'requires-internal-features', 'A-impl-trait', 'T-compiler', 'F-negative_impls', 'C-bug', 'F-negative_bounds', 'P-low'}",https://github.com/rust-lang/rust/issues/119253,Not a bug,,,,,,,ICE with RPIT containing negative bound: `failed to resolve instance`,2023-12-23T15:00:26Z,2024-02-15T06:43:08Z,,,,,,53,,,,P-low,0,,,,,,,,,,,
119064,"{'I-ICE', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/119064,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,3,ICE: Expected type for ... but found Lifetime(ReErased) when substituting,2023-12-18T05:36:28Z,2024-03-24T04:30:39Z,122168,https://github.com/rust-lang/rust/pull/122168,,,,96,,,,,0,,"pub async fn run(permit: ActionPermit<'_, ()>, ctx: &mut core::task::Context<'_>) {
 run2(permit, ctx);
 }
 
 fn run2<T>(permit: ActionPermit<'_, T>, ctx: &mut core::task::Context) {
 _ = || {
 let mut fut = ActionPermit::perform(permit);
 let fut = unsafe { core::pin::Pin::new_unchecked(&mut fut) };
 _ = core::future::Future::poll(fut, ctx);
 };
 }
 
 pub struct ActionPermit<'a, T> {
 _guard: core::cell::Ref<'a, T>,
 }
 
 impl<'a, T> ActionPermit<'a, T> {
 async fn perform(self) {
 core::future::ready(()).await
 }
 }",1,1,,,,,,,
119054,"{'T-compiler', 'A-mir-opt', 'E-needs-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/119054,exclude,,,,,,,SIGSEGV when trying to compile project with MIR optimizations,2023-12-17T21:28:31Z,2023-12-18T09:21:29Z,,,,,,0,,,,,0,,,,,,,,,,,
119008,"{'I-ICE', 'requires-debug-assertions', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/119008,exclude,,,,,,,Attempt to add with overflow in GVN when building chrono-tz,2023-12-16T04:53:22Z,2023-12-17T23:00:15Z,,,,,,1,,,,,0,,,,,,,,,,,
118992,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/118992,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Missing Cases,1,assertion failed: offset < min_length in GVN,2023-12-15T17:47:05Z,2023-12-17T23:00:14Z,119052,https://github.com/rust-lang/rust/pull/119052,,,,2,,,,,0,"fn main() {
 let slf = ""f"".as_bytes();
 let _n = slf[slf.len() - 2];
 }","fn main() {
 let slf = ""f"".as_bytes();
 let _n = slf[slf.len() - 2];
 }",,,,,,,"-Zmir-opt-level=X
-Zmir-enable-passes=+X
-Zinline-mir",=-Zmir-opt-level=1 -Zmir-enable-passes=+GVN -Zinline-mir,
118990,"{'I-ICE', 'A-MIR', 'T-compiler', '-Zvalidate-mir', 'C-bug'}",https://github.com/rust-lang/rust/issues/118990,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,5,MIR validation ICE: Use of local which has no storage,2023-12-15T16:43:20Z,2023-12-23T06:12:18Z,119077,https://github.com/rust-lang/rust/pull/119077,Separate MIR lints from validation,2023/12/18 10:00,2023/12/23 6:12,7,252,"['validate.rs', 'storage_liveness.rs', 'lib.rs', 'lint.rs', 'pass_manager.rs', 'ref_prop.rs', 'options.rs', 'runtest.rs', 'reference_prop.rs', 'no-storage.rs', 'storage-live.rs', 'storage-live.stderr', 'storage-return.rs']","['compiler/rustc_const_eval/src/transform', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_session/src', 'src/tools/compiletest/src', 'tests/mir-opt', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint']",,0,"struct CompileError;
 
 impl Drop for CompileError {
 fn drop(&mut self) {}
 }
 
 impl CompileError {
 fn throw(&self) {}
 }
 
 fn main() {
 'code: {
 break 'code;
 CompileError.throw()
 };
 }","struct CompileError;
 
 impl Drop for CompileError {
 fn drop(&mut self) {}
 }
 
 impl CompileError {
 fn throw(&self) {}
 }
 
 fn main() {
 'code: {
 break 'code;
 CompileError.throw()
 };
 }",,,,,1,,-Zvalidate-mir,=-Zvalidate-mir,
118876,"{'A-lifetimes', 'A-NLL', 'I-unsound', 'T-types', 'P-high', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable', 'NLL-sound'}",https://github.com/rust-lang/rust/issues/118876,valid,developer,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,1. Type-WF,1,`&'a T` 鈫?`&'static T` in safe code,2023-12-12T14:41:11Z,2024-02-14T05:26:28Z,118882,https://github.com/rust-lang/rust/pull/118882,Check normalized call signature for WF in mir typeck,2023/12/12 16:44,2024/2/14 5:26,63,98,"['mod.rs', 'check-normalized-sig-for-wf.rs', 'check-normalized-sig-for-wf.stderr']","['compiler/rustc_borrowck/src/type_check', 'tests/ui/nll', 'tests/ui/nll']",P-high,0,"fn extend<T>(input: &T) -> &'static T {
 struct Bounded<'a, 'b: 'static, T>(&'a T, [&'b (); 0]);
 let n: Box<dyn FnOnce(&T) -> Bounded<'static, '_, T>> = Box::new(|x| Bounded(x, []));
 n(input).0
 }
 
 fn extend_mut<'a, T>(input: &'a mut T) -> &'static mut T {
 struct Bounded<'a, 'b: 'static, T>(&'a mut T, [&'b (); 0]);
 let mut n: Box<dyn FnMut(&mut T) -> Bounded<'static, '_, T>> = Box::new(|x| Bounded(x, []));
 n(input).0
 }","fn extend<T>(input: &T) -> &'static T {
 struct Bounded<'a, 'b: 'static, T>(&'a T, [&'b (); 0]);
 let n: Box<dyn FnOnce(&T) -> Bounded<'static, '_, T>> = Box::new(|x| Bounded(x, []));
 n(input).0
 }
 
 fn extend_mut<'a, T>(input: &'a mut T) -> &'static mut T {
 struct Bounded<'a, 'b: 'static, T>(&'a mut T, [&'b (); 0]);
 let mut n: Box<dyn FnMut(&mut T) -> Bounded<'static, '_, T>> = Box::new(|x| Bounded(x, []));
 n(input).0
 }",,,1,,1,FnOnce,,,
118779,"{'A-trait-system', 'T-compiler', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/118779,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,2,Other missing bounds required to meet a trait's blanket impl are displayed too prominently,2023-12-09T12:45:21Z,2024-03-05T10:28:47Z,121826,https://github.com/rust-lang/rust/pull/121826,,,,86,286,"['type_err_ctxt_ext.rs', 'future.rs', 'into_future.rs', 'collect.rs', 'iterator.rs', 'substs-ppaux.normal.stderr', 'substs-ppaux.rs', 'substs-ppaux.verbose.stderr', 'async-error-span.stderr', 'coroutine-not-future.stderr', 'typeck-default-trait-impl-precedence.rs', 'typeck-default-trait-impl-precedence.stderr', 'gen_block_is_no_future.stderr', 'feature-gate-trivial_bounds.stderr', 'issue-20605.current.stderr', 'issue-20605.next.stderr', 'issue-20605.rs', 'issue-83919.stderr', 'issues-71798.stderr', 'bound.stderr', 'kindck-impl-type-params-2.rs', 'kindck-impl-type-params-2.stderr', 'kindck-inherited-copy-bound.curr.stderr', 'kindck-inherited-copy-bound.object_safe_for_dispatch.stderr', 'kindck-send-object.rs', 'kindck-send-object.stderr', 'kindck-send-object1.rs', 'kindck-send-object1.stderr', 'kindck-send-object2.rs', 'kindck-send-object2.stderr', 'feature-gate-do_not_recommend.rs', 'feature-gate-do_not_recommend.stderr', 'async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr', 'issue-104961.fixed', 'issue-104961.rs', 'issue-104961.stderr', 'issue-62843.stderr', 'slice-issue-87994.rs', 'slice-issue-87994.stderr', 'suggest-remove-refs-5.stderr', 'cross-crate.rs', 'cross-crate.stderr', 'issue-108072-unmet-trait-alias-bound.rs', 'issue-108072-unmet-trait-alias-bound.stderr', 'supertrait-auto-trait.stderr', 'issue-50480.stderr', 'root-obligation.fixed', 'root-obligation.rs', 'root-obligation.stderr']","['compiler/rustc_trait_selection/src/traits/error_reporting', 'library/core/src/future', 'library/core/src/future', 'library/core/src/iter/traits', 'library/core/src/iter/traits', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/coroutine', 'tests/ui/feature-gates', 'tests/ui/for', 'tests/ui/for', 'tests/ui/for', 'tests/ui/impl-trait/issues', 'tests/ui', 'tests/ui/iterators', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/kindck', 'tests/ui/rfcs/rfc-2397-do-not-recommend', 'tests/ui/rfcs/rfc-2397-do-not-recommend', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/traits/alias', 'tests/ui/traits/alias', 'tests/ui/traits/alias', 'tests/ui/traits/alias', 'tests/ui/traits/inductive-overflow', 'tests/ui/traits', 'tests/ui/traits/suggest-dereferences', 'tests/ui/traits/suggest-dereferences', 'tests/ui/traits/suggest-dereferences']",,0,"pub trait Add {
 fn add(&self, left: usize, right: usize) -> usize;
 }
 
 impl<F> Add for F
 where
 F: Fn(usize, usize) -> usize,
 {
 fn add(&self, left: usize, right: usize) -> usize {
 self(left, right)
 }
 }
 
 pub struct NotAdd;
 
 pub fn needs_add<A: Add>(add: &A) -> usize {
 add.add(1, 2)
 }
 
 #[cfg(test)]
 mod tests {
 use super::*;
 
 #[test]
 fn it_works() {
 assert_eq!(needs_add(&NotAdd), 3);
 }
 }","pub trait Add {
 fn add(&self, left: usize, right: usize) -> usize;
 }
 
 impl<F> Add for F
 where
 F: Fn(usize, usize) -> usize,
 {
 fn add(&self, left: usize, right: usize) -> usize {
 self(left, right)
 }
 }
 
 pub struct NotAdd;
 
 pub fn needs_add<A: Add>(add: &A) -> usize {
 add.add(1, 2)
 }
 
 #[cfg(test)]
 mod tests {
 use super::*;
 
 #[test]
 fn it_works() {
 assert_eq!(needs_add(&NotAdd), 3);
 }
 }",,,,,,,,,
118604,"{'A-async-await', 'A-inference', 'T-compiler', 'C-bug', 'AsyncAwait-Triaged', 'WG-async'}",https://github.com/rust-lang/rust/issues/118604,duplicate,,,,,,,rustc cannot infer Send for async block consistently with drop and braces,2023-12-04T13:23:29Z,2024-02-26T17:35:44Z,,,,,,84,,,,,0,,,,,,,,,,,
118479,"{'C-enhancement', 'T-compiler', 'A-implied-bounds', 'F-lazy_type_alias'}",https://github.com/rust-lang/rust/issues/118479,exclude,,,,,,,Imply outlives-bounds on lazy type aliases,2023-11-30T13:59:25Z,2024-01-05T23:40:06Z,119350,https://github.com/rust-lang/rust/pull/119350,Imply outlives-bounds on lazy type aliases,2023/12/27 15:17,2024/1/5 23:40,36,308,"['implicit_infer.rs', 'mod.rs', 'duplicate.stderr', 'implied-outlives-bounds.neg.stderr', 'implied-outlives-bounds.rs']","['compiler/rustc_hir_analysis/src/outlives', 'compiler/rustc_hir_analysis/src/outlives', 'tests/ui/associated-type-bounds', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias']",,0,,,,,,,,,,,
118376,"{'A-lifetimes', 'C-feature-request', 'T-types', 'A-lints', 'T-compiler'}",https://github.com/rust-lang/rust/issues/118376,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,2. Ownership-Lifetime,5,we should lint on named lifetimes forced to be equal to another named lifetime,2023-11-27T15:49:12Z,2024-04-10T16:31:36Z,118391,https://github.com/rust-lang/rust/pull/118391,Add `REDUNDANT_LIFETIMES` lint to detect lifetimes which are semantically redundant,2023/11/27 21:57,2024/4/10 16:31,135,435,"['diagnostic_impls.rs', 'messages.ftl', 'wfcheck.rs', 'resolve_bound_vars.rs', 'builtin.rs', 'context.rs', 'diagnostics.rs', 'unsatisfied-item-lifetime-bound.rs', 'unsatisfied-item-lifetime-bound.stderr', 'regions-free-region-outlives-static-outlives-free-region.rs', 'regions-free-region-outlives-static-outlives-free-region.stderr', 'regions-static-bound-rpass.rs', 'regions-static-bound-rpass.stderr', 'regions-static-bound.rs', 'regions-static-bound.stderr', 'transitively-redundant-lifetimes.rs', 'transitively-redundant-lifetimes.stderr']","['compiler/rustc_errors/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_lint_defs/src', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'tests/ui/generic-associated-types', 'tests/ui/generic-associated-types', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions']",,0,"struct Foo<'a>(&'a ());
 
 impl<'a> Foo<'a> {
 fn bar<'b: 'a>(&'b self) {} // WARN: `'a` and `'b` are equal
 }","struct Foo<'a>(&'a ());
 
 impl<'a> Foo<'a> {
 fn bar<'b: 'a>(&'b self) {} // WARN: `'a` and `'b` are equal
 }",,,,,1,,,,
118328,"{'A-const-prop', 'I-unsound', 'P-high', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/118328,valid,Rustlantis,3. Miscompilation-Safe Rust Causes UB,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,`ConstProp` misoptimises pointer-typed enum field,2023-11-26T17:51:59Z,2023-11-29T13:38:17Z,118426,https://github.com/rust-lang/rust/pull/118426,ConstProp: Correctly remove const if unknown value assigned to it.,2023/11/28 22:08,2023/11/29 13:38,2,74,"['const_prop.rs', 'overwrite_with_const_with_params.rs', 'overwrite_with_const_with_params.size_of.ConstProp.diff', 'overwrite_with_const_with_params.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/ui/const_prop']",P-high,0,"#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn4() {
 mir! {
 let _1: isize;
 let _12: Adt55;
 let unit: ();
 {
 _12 = Adt55::Variant1 { fld0: 0, fld1: 0};
 SetDiscriminant(_12, 0);
 place!(Field::<*mut isize>(Variant(_12, 0), 0)) = core::ptr::addr_of_mut!(_1);
 Call(unit = fn19(Field::<*mut isize>(Variant(_12, 0), 0)), bb11, UnwindUnreachable())
 }
 bb11 = {
 Return()
 }
 }
 }
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn19(mut _1: *mut isize) {
 mir! {
 {
 (*_1) = 1;
 Return()
 }
 }
 }
 pub fn main() {
 fn4();
 println!(""here"");
 }
 #[derive(Debug, Copy, Clone)]
 pub enum Adt55 {
 Variant0 { fld0: *mut isize },
 Variant1 { fld0: u8, fld1: u64 },
 }","#![feature(custom_mir, core_intrinsics, inline_const)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn size_of<T>() -> usize {
 mir! {
 let a : usize;
 {
 a = 0;
 a = const { std::mem::size_of::<T>() };
 RET = a;
 Return()
 }
 }
 }
 
 fn main() {
 assert_eq!(size_of::<u32>(), std::mem::size_of::<u32>());
 }",1,,,1,,,-O,rustc -O a.rs && ./a,"#![feature(custom_mir, core_intrinsics, inline_const)]"
118306,"{'I-slow', 'A-codegen', 'E-needs-test', 'T-compiler', 'A-LLVM', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/118306,valid,developer,5. Misoptimization,,6. LLVM,6. Compatibility Issues,0,"Missed optimization: `_ => 0` generates worse code than `0 => 0, _ => unreachable!()`",2023-11-26T04:53:04Z,2024-08-10T04:25:29Z,128584,https://github.com/rust-lang/rust/pull/128584,Add a set of tests for LLVM 19,2024/8/3 4:52,2024/8/10 4:25,257,67,"['issue-107681-unwrap_unchecked.rs', 'issue-118306.rs', 'issue-126585.rs']","['tests/codegen/issues', 'tests/codegen/issues', 'tests/codegen/issues']",,0,"pub fn faster(input: u64) -> u64 {
 match input % 4 {
 0 => 0,
 1 | 2 => 1,
 3 => 2,
 _ => unreachable!(),
 }
 }
 
 pub fn branchy(input: u64) -> u64 {
 match input % 4 {
 1 | 2 => 1,
 3 => 2,
 _ => 0,
 }
 }","pub fn faster(input: u64) -> u64 {
 match input % 4 {
 0 => 0,
 1 | 2 => 1,
 3 => 2,
 _ => unreachable!(),
 }
 }
 
 pub fn branchy(input: u64) -> u64 {
 match input % 4 {
 1 | 2 => 1,
 3 => 2,
 _ => 0,
 }
 }",,,,,,,,,
118144,"{'I-ICE', 'T-compiler', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/118144,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,1,ice: `ProjectionKinds Deref and Field were mismatched`,2023-11-21T19:39:44Z,2023-12-18T15:56:11Z,118584,https://github.com/rust-lang/rust/pull/118584,Fix ICE `ProjectionKinds Deref and Field were mismatched`,2023/12/4 3:56,2023/12/18 15:56,26,87,"['upvar.rs', 'issue-118144.rs', 'issue-118144.stderr']","['compiler/rustc_hir_typeck/src', 'tests/ui/closures/2229_closure_analysis', 'tests/ui/closures/2229_closure_analysis']",,0,"// Regression test for #89606. Used to ICE.
 //
 // check-pass
 // revisions: twenty_eighteen twenty_twentyone
 // [twenty_eighteen]compile-flags: --edition 2018
 // [twenty_twentyone]compile-flags: --edition 2021
 
 struct S<'a>(Option<&'a mut i32>);
 
 fn by_ref(s: &mut S<'_>) {
 (|| {
 let S(_o) = s;
 s.0 = None;
 })();
 }
 
 fn by_value(s: S<'_>) {
 (|| {
 let S(ref _o) = s;
 let _g = s.0;
 })();
 }
 
 struct V<'a>((Option<&'a mut i32>,));
 
 fn nested(v: &mut V<'_>) {
 (|| {
 struct S<'a>(Option<&'a mut i32>); V((_o,)) = v;
 v.0 = (None, );
 })();
 }
 
 fn main() {
 let mut s = S(None);
 by_ref(&mut s);
 by_value(s);
 
 let mut v = V((None, ));
 nested(&mut v);
 }","struct V(&mut i32);
 
 fn nested(v: &V) {
 || {
 V(_somename) = v;
 v.0 = 0;
 };
 }",,,,,1,,,,
118047,"{'I-crash', 'A-mir-opt', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/118047,valid,members,1. Crash-Back-end Crash,,4. Code Gen,4. Basic syntax&structure,1,"DataflowConstProp trips LLVM assertion ""Invalid constexpr bitcast!""",2023-11-18T19:22:59Z,2023-12-10T19:47:52Z,118791,https://github.com/rust-lang/rust/pull/118791,Use immediate_backend_type when reading from a const alloc,2023/12/9 20:56,2023/12/10 19:47,22,17,"['operand.rs', 'const-bool-bitcast.rs']","['compiler/rustc_codegen_ssa/src/mir', 'tests/ui/codegen']",,0,"pub struct State {
 inner: bool
 }
 
 pub fn make() -> State {
 State {
 inner: true,
 }
 }","pub struct State {
 inner: bool
 }
 
 pub fn make() -> State {
 State {
 inner: true,
 }
 }",,,,,,,,,
118021,"{'I-ICE', 'A-lifetimes', 'T-compiler', 'C-bug', 'F-generic_const_exprs'}",https://github.com/rust-lang/rust/issues/118021,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-report,5. Exception Handling & Report,1,ice: `None` in region_errors,2023-11-17T21:54:06Z,2023-11-21T17:15:24Z,118035,https://github.com/rust-lang/rust/pull/118035,Fix early param lifetimes in generic_const_exprs,2023/11/18 11:37,2023/11/21 17:15,3,69,"['region_errors.rs', 'generic_const_early_param.rs', 'generic_const_early_param.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'tests/ui/borrowck', 'tests/ui/borrowck']",,0,"#![feature(generic_const_exprs)]
 
 struct DataWrapper<'static> {
 data: &'a [u8; Self::SIZE],
 }
 
 impl DataWrapper<'a> {
 const SIZE: usize = 14;
 }","#![feature(generic_const_exprs)]
 
 struct DataWrapper<'static> {
 data: &'a [u8; Self::SIZE],
 }
 
 impl DataWrapper<'a> {
 const SIZE: usize = 14;
 }",,,,,1,,,,#![feature(generic_const_exprs)]
117861,"{'F-type_alias_impl_trait', 'T-types', 'A-impl-trait', 'finished-final-comment-period', 'disposition-merge'}",https://github.com/rust-lang/rust/issues/117861,exclude,,,,,,,"TAIT decision on ""may define implies must define""",2023-11-13T03:56:22Z,2024-06-12T11:09:44Z,113169,https://github.com/rust-lang/rust/pull/113169,Tait must be constrained if in sig,2023/6/29 19:43,2024/6/12 11:09,212,2379,"['issue-72793.rs', 'mod.rs', 'E0792.md', 'messages.ftl', 'opaque.rs', 'errors.rs', 'opaque_hidden_inferred_bound.rs', 'terminator.rs', 'internal_macros.rs', 'lib.rs', 'ascii.rs', 'iter.rs', 'mod.rs', 'backtrace.rs', 'emit-type-metadata-id-itanium-cxx-abi-const-generics.rs', 'emit-type-metadata-id-itanium-cxx-abi-lifetimes.rs', 'emit-type-metadata-id-itanium-cxx-abi-paths.rs', 'opaque_types.rs', 'opaque_types.stderr', 'const-fn-cycle.rs', 'const-fn-cycle.stderr', 'const-promoted-opaque.atomic.stderr', 'const-promoted-opaque.rs', 'const-promoted-opaque.string.stderr', 'layout-error.rs', 'layout-error.stderr', 'metadata-sufficient-for-layout.rs', 'metadata-sufficient-for-layout.stderr', 'future-no-bound-vars-ice-112347.rs', 'issue-108592.rs', 'issue-70877.rs', 'issue-70877.stderr', 'issue-77987.rs', 'issue-86800.rs', 'issue-86800.stderr', 'issue-89312.rs', 'normalize-tait-in-const.rs', 'normalize-tait-in-const.stderr', 'recursive-type-alias-impl-trait-declaration-too-subtle-2.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.stderr', 'two_tait_defining_each_other2.current.stderr', 'two_tait_defining_each_other2.rs', 'type-alias-impl-trait-in-fn-body.rs', 'type-alias-impl-trait-in-fn-body.stderr', 'issue-75053.rs', 'issue-75053.stderr', 'arbitrary-self-opaque.rs', 'arbitrary-self-opaque.stderr', 'argument-types.rs', 'assoc-projection-ice.rs', 'bounds-are-checked-2.rs', 'bounds-are-checked-2.stderr', 'closure-normalization-ice-109020.rs', 'closure_args.rs', 'closure_args2.rs', 'const_generic_type.no_infer.stderr', 'const_generic_type.rs', 'constrain_inputs.rs', 'constrain_inputs.stderr', 'debug-ty-with-weak.rs', 'failed-to-normalize-ice-99945.rs', 'failed-to-normalize-ice-99945.stderr', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'ice-failed-to-resolve-instance-for-110696.rs', 'ice-failed-to-resolve-instance-for-110696.stderr', 'implied_bounds.rs', 'implied_bounds.stderr', 'implied_bounds2.rs', 'implied_bounds_from_types.rs', 'implied_bounds_from_types.stderr', 'implied_lifetime_wf_check3.rs', 'implied_lifetime_wf_check3.stderr', 'implied_lifetime_wf_check4_static.rs', 'implied_lifetime_wf_check4_static.stderr', 'issue-101750.rs', 'issue-109054.rs', 'issue-109054.stderr', 'issue-53092.rs', 'issue-53092.stderr', 'issue-53096.rs', 'issue-53096.stderr', 'issue-58951.rs', 'issue-60407.rs', 'issue-60407.stderr', 'issue-63355.rs', 'issue-63355.stderr', 'issue-65679-inst-opaque-ty-from-val-twice.rs', 'issue-65918.rs', 'issue-72793.rs', 'issue-76202-trait-impl-for-tait.rs', 'issue-84660-unsoundness.current.stderr', 'issue-84660-unsoundness.next.stderr', 'issue-84660-unsoundness.rs', 'nested-tait-inference3.rs', 'nested-tait-inference3.stderr', 'nested.rs', 'nested.stderr', 'nested_type_alias_impl_trait.rs', 'nested_type_alias_impl_trait.stderr', 'no_inferrable_concrete_type.rs', 'no_inferrable_concrete_type.stderr', 'normalize-alias-type.rs', 'outlives-bound-var.rs', 'recursive-tait-conflicting-defn.rs', 'recursive-tait-conflicting-defn.stderr', 'rpit_tait_equality_in_canonical_query.rs', 'rpit_tait_equality_in_canonical_query_2.rs', 'self_implication.rs', 'structural-match-no-leak.rs', 'structural-match-no-leak.stderr', 'structural-match.rs', 'structural-match.stderr', 'type-alias-impl-trait-fns.rs', 'type-alias-impl-trait-fns.stderr', 'type-alias-impl-trait-tuple.next.stderr', 'type-alias-impl-trait-tuple.rs', 'unbounded_opaque_type.rs', 'underef-index-out-of-bounds-121472.rs', 'underef-index-out-of-bounds-121472.stderr', 'unnameable_type.rs', 'unnameable_type.stderr']","['compiler/rustc_codegen_cranelift/example', 'compiler/rustc_data_structures/src/obligation_forest', 'compiler/rustc_error_codes/src/error_codes', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/collect/type_of', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_lint/src', 'compiler/rustc_middle/src/mir', 'library/core/src', 'library/core/src', 'library/core/src/slice', 'library/core/src/str', 'library/core/src/str', 'library/std/src', 'tests/codegen/sanitizer/cfi', 'tests/codegen/sanitizer/cfi', 'tests/codegen/sanitizer/cfi', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/coroutine', 'tests/ui/coroutine', 'tests/ui/coroutine', 'tests/ui/coroutine', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/mir', 'tests/ui/mir', 'tests/ui/self', 'tests/ui/self', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,1,,,,,,,,,,,
117829,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/117829,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-Trait & Bound,1,ice: auto traits: `unexpected builtin trait with associated type`,2023-11-12T10:53:06Z,2024-07-25T06:39:56Z,128160,https://github.com/rust-lang/rust/pull/128160,Don't ICE when auto trait has assoc ty in old solver,2024/7/24 21:30,2024/7/25 6:39,255,126,"['project.rs', '117829-2.rs', '117829.rs', 'assoc-ty.current.stderr', 'assoc-ty.next.stderr', 'assoc-ty.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/crashes', 'tests/crashes', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits']",,0,"// check-pass
 
 #[cfg(x2, y2, const { [3u32, 0, 1, 2] })]
 auto trait Z<'a, T: ?Sized>
 where
 T: Z<'a, u16>,
 //~^ the trait bound `str: Clone` is not satisfied
 //~| the trait bound `str: Clone` is not satisfied
 for<'b> <T as Z<'b, u16>>::W: Clone,
 {
 type W: ?Sized;
 fn h(&self, x: &T::W) {
 <T::W>::clone(x);
 }
 }
 // Values for testing *size
 //~| WARN unstable syntax can change at any point in the future, causing a hard error!
 
 fn main(x: <T as Try>::Output) {}","auto trait Z<'a, T: ?Sized>
 where
 T: Z<'a, u16>,
 
 for<'b> <T as Z<'b, u16>>::W: Clone,
 {
 type W: ?Sized;
 }",,,,,1,"Clone
?Sized",,,
117802,"{'I-ICE', 'T-compiler', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/117802,valid,fuzz-rustc,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,1. Type-New Solver,4,ICE with nested impl and closure capture,2023-11-11T02:11:45Z,2023-12-13T05:35:44Z,118751,https://github.com/rust-lang/rust/pull/118751,,,,32,,,,,0,"trait T {}
 
 fn f() -> impl Fn(impl T) {
 let p = ();
 |_| p
 }
 
 fn main() {}","trait T {}
 
 fn f() -> impl Fn(impl T) {
 let p = ();
 |_| p
 }
 
 fn main() {}",,,,,,Fn,--edition=X,--edition=2021,
117789,"{'I-ICE', 'T-compiler', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/117789,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,1,ice: auto traits: assertion failed `1 == 2`,2023-11-10T15:37:42Z,2023-11-13T14:37:54Z,117811,https://github.com/rust-lang/rust/pull/117811,Turn assert_eq into a delay_span_bug,2023/11/11 11:37,2023/11/13 14:37,2,36,"['orphan.rs', 'issue-117789.rs', 'issue-117789.stderr']","['compiler/rustc_hir_analysis/src/coherence', 'tests/ui/auto-traits', 'tests/ui/auto-traits']",,0,"#![feature(auto_traits)]
 
 // run-rustfix
 
 auto trait Trait<P> {
 const A: ();
 const B<const K: u64, const Q: u64>: u64;
 const C<T>: T;
 const D<const N: usize>: usize;
 
 const E: usize;
 const F<T: PartialEq>: ();
 }
 
 impl<P> Trait<P> for () {
 const A<T>: () = ();
 //~^ ERROR const `A` has 1 type parameter but its trait declaration has 0 type parameters
 const B<const K: u64>: u64 = 0;
 //~^ ERROR const `B` has 1 const parameter but its trait declaration has 2 const parameters
 const C<'a>: &'a str = """";
 //~^ ERROR const `C` has 0 type parameters but its trait declaration has 1 type parameter
 const D<const N: u16>: u16 = N;
 //~^ ERROR const `D` has an incompatible generic parameter for trait `Trait`
 
 const E: usize = 0x11111111
 where
 P: Copy; //~ ERROR impl has stricter requirements than trait
 const F<T: Eq>: () = (); //~ ERROR impl has stricter requirements than trait
 }
 
 fn main() {}
 //~^ auto traits cannot have generic parameters [E0567]
 auto trait Bound : Copy {}
 //~^ auto traits cannot have super traits or lifetime bounds [E0568]
 auto trait LifetimeBound : 'static {}
 //~^ auto traits cannot have super traits or lifetime bounds [E0568]
 auto trait MyTrait { fn foo() {} }
 //~^ auto traits cannot have associated items [E0380]
 fn main() {}","auto trait Trait<P> {}
 
 impl<P> Trait<P> for () {}",,,,,1,,,,
117761,"{'I-ICE', 'requires-nightly', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/117761,valid,members,1. Crash-Front-end Panic,valid,4. Code Gen,5. Exception Handling & Report,1,Enabling GVN produces a const allocation with the wrong alignment?,2023-11-09T18:08:05Z,2023-12-21T05:59:56Z,119056,https://github.com/rust-lang/rust/pull/119056,Tolerate overaligned MIR constants for codegen.,2023/12/17 22:57,2023/12/21 5:59,41,38,"['operand.rs', 'overaligned-constant.rs']","['compiler/rustc_codegen_ssa/src/mir', 'tests/codegen']",,0,"struct Affine2 {
 matrix2: Mat2,
 translation: Vec2,
 }
 
 impl Affine2 {
 #[inline]
 fn inverse(&self) {
 mat2_ref(&self.matrix2);
 vec2_move(self.translation);
 }
 }
 
 #[derive(Clone, Copy)]
 #[repr(align(8))]
 struct Mat2([f32; 4]);
 
 #[derive(Clone, Copy)]
 struct Vec2 {
 x: f32, 
 y: f32, 
 }
 
 #[inline(never)]
 fn mat2_ref(_: &Mat2) {
 loop {}
 }
 
 #[inline(never)]
 fn vec2_move(_: Vec2) {
 loop {}
 }
 
 fn main() {
 Affine2 {
 matrix2: Mat2([0.0, 0.0, 0.0, 0.0]),
 translation: Vec2 { x: 0.0, y: 0.0 },
 }.inverse();
 }","struct Affine2 {
 matrix2: Mat2,
 translation: Vec2,
 }
 
 impl Affine2 {
 #[inline]
 fn inverse(&self) {
 mat2_ref(&self.matrix2);
 vec2_move(self.translation);
 }
 }
 
 #[derive(Clone, Copy)]
 #[repr(align(8))]
 struct Mat2([f32; 4]);
 
 #[derive(Clone, Copy)]
 struct Vec2 {
 x: f32, 
 y: f32, 
 }
 
 #[inline(never)]
 fn mat2_ref(_: &Mat2) {
 loop {}
 }
 
 #[inline(never)]
 fn vec2_move(_: Vec2) {
 loop {}
 }
 
 fn main() {
 Affine2 {
 matrix2: Mat2([0.0, 0.0, 0.0, 0.0]),
 translation: Vec2 { x: 0.0, y: 0.0 },
 }.inverse();
 }",,,,,,,"+nightly
-Copt-level=X
-Zmir-opt-level=X
-Zinline-mir
-Zmir-enable-passes=+X",rustc +nightly ice.rs -Copt-level=0 -Zmir-opt-level=2 -Zinline-mir -Zmir-enable-passes=+GVN,
117733,"{'I-ICE', '-Zvalidate-mir', 'C-bug', 'A-mir-opt-inlining', 'A-coroutines', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/117733,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,StorageLive of live local when building tokio with -Zcross-crate-inline-threshold=always + high MIR inlining threshold,2023-11-09T01:16:06Z,2023-12-12T08:21:34Z,118797,https://github.com/rust-lang/rust/pull/118797,End locals' live range before suspending coroutine,2023/12/10 9:48,2023/12/12 8:21,33,35,"['coroutine.rs', 'async_await.b-{closure#0}.coroutine_resume.0.mir', 'coroutine_tiny.main-{closure#0}.coroutine_resume.0.mir', 'inline_coroutine.main.Inline.panic-abort.diff', 'inline_coroutine.main.Inline.panic-unwind.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/building', 'tests/mir-opt', 'tests/mir-opt/inline', 'tests/mir-opt/inline']",,0,,,,,,,,,"-Ztreat-err-as-bug
-Zcross-crate-inline-threshold=always
-Zinline-mir-hint-threshold=X
-Zinline-mir-threshold=X","RUSTFLAGS=""-Ztreat-err-as-bug -Zcross-crate-inline-threshold=always -Zinline-mir-hint-threshold=10000 -Zinline-mir-threshold=10000"" cargo b --release --features sync",
117715,"{'A-lifetimes', 'T-compiler', 'C-bug', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/117715,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,2. Ownership-Lifetime,1,`self: &Box<Self>` produces confusing error due to failure to spot elided lifetime,2023-11-08T15:54:50Z,2024-07-18T15:56:09Z,117967,https://github.com/rust-lang/rust/pull/117967,,,,253,267,"['late.rs', 'ref-assoc-async.rs', 'ref-assoc-async.stderr', 'ref-assoc.rs', 'ref-assoc.stderr', 'ref-self-multi.rs', 'ref-self.fixed', 'ref-self.rs', 'ref-self.stderr']","['compiler/rustc_resolve/src', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision', 'tests/ui/self/elision']",,0,"struct Concrete(u32);
 
 impl Concrete {
 fn m(self: &std::boxed::Box<Self>) -> &u32 {
 &self.0
 }
 }","struct Concrete(u32);
 
 impl Concrete {
 fn m(self: &std::boxed::Box<Self>) -> &u32 {
 &self.0
 }
 }",,,,1,,,,,
117647,"{'T-types', 'A-impl-trait', 'S-bug-has-test', 'A-edition-2024'}",https://github.com/rust-lang/rust/issues/117647,exclude,,,,,,,New 2024-edition `impl Trait` lifetime capture rules means opaques now capture higher-ranked lifetimes,2023-11-06T23:58:35Z,2024-08-26T21:46:04Z,,,,,,293,,,,,0,,,,,,,,,,,
117628,"{'I-ICE', 'T-compiler', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/117628,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-Trait & Bound,1,ice: auto-traits: `Region parameter out of range when substituting in region`,2023-11-06T10:22:50Z,2023-11-09T08:59:55Z,117645,https://github.com/rust-lang/rust/pull/117645,Extend builtin/auto trait args with error when they have >1 argument,2023/11/6 22:36,2023/11/9 8:59,2,42,"['mod.rs', 'has-arguments.rs', 'has-arguments.stderr']","['compiler/rustc_trait_selection/src/traits/select', 'tests/ui/auto-traits', 'tests/ui/auto-traits']",,0,"#![feature(auto_traits)]
 
 auto trait Trait1<'outer> {}
 //~^ ERROR auto traits cannot have generic parameters
 
 fn f<'a>(x: &dyn Trait1<'a>)
 {}
 
 fn main() {
 f(42, ""forty-two"");
 }","auto trait Trait1<'outer> {}
 
 fn f<'a>(x: &dyn Trait1<'a>) {}
 
 fn main() {
 f(42, ""forty-two"");
 }",,,1,,1,,,,
117602,"{'F-generic_associated_types', 'A-GATs', 'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/117602,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,1. Type-Trait & Bound,1,Nightly 65e297d1e 2023-11-03 fails to infer auto traits,2023-11-05T06:51:56Z,2023-11-07T10:40:08Z,117610,https://github.com/rust-lang/rust/pull/117610,Only instantiate binder during dyn's built-in trait candidate probe once,2023/11/5 13:38,2023/11/7 10:40,2,78,"['candidate_assembly.rs', 'non-lifetime-via-dyn-builtin.current.stderr', 'non-lifetime-via-dyn-builtin.next.stderr', 'non-lifetime-via-dyn-builtin.rs', 'disqualifying-object-candidates.rs']","['compiler/rustc_trait_selection/src/traits/select', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits/non_lifetime_binders']",,0,"trait SomethingSomething: Send {}
 
 struct Wrapper<T> {
 something: Box<dyn SomethingSomething>,
 other: T,
 }
 
 trait HasSend {
 type IsSend<T: Send>: Send;
 }
 
 impl<T> HasSend for Wrapper<T> {
 type IsSend<S: Send> = Wrapper<S>;
 }","trait SomethingSomething: Send {}
 
 struct Wrapper<T> {
 something: Box<dyn SomethingSomething>,
 other: T,
 }
 
 trait HasSend {
 type IsSend<T: Send>: Send;
 }
 
 impl<T> HasSend for Wrapper<T> {
 type IsSend<S: Send> = Wrapper<S>;
 }",,,1,,,Send,,,
117573,"{'A-trait-system', 'C-bug', 'F-extern_types', 'F-auto_traits'}",https://github.com/rust-lang/rust/issues/117573,Not a bug,,,,,,,Auto traits are not implemented for extern types,2023-11-04T10:41:46Z,2023-11-04T16:33:07Z,,,,,,0,,,,,0,,,,,,,,,,,
117501,"{'A-diagnostics', 'D-incorrect', 'T-compiler', 'S-has-mcve', 'A-type-system'}",https://github.com/rust-lang/rust/issues/117501,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Trait & Bound,1,"Suggestion for E0308 produces invalid syntax for traits with unconstrained associated types, when a type parameter is expected",2023-11-01T22:26:36Z,2023-11-03T14:39:26Z,117505,https://github.com/rust-lang/rust/pull/117505,,,,1,44,"['diagnostics.rs', 'restrict-assoc-type-of-generic-bound.fixed', 'restrict-assoc-type-of-generic-bound.rs', 'restrict-assoc-type-of-generic-bound.stderr']","['compiler/rustc_middle/src/ty', 'tests/ui/trait-bounds', 'tests/ui/trait-bounds', 'tests/ui/trait-bounds']",,0,"trait MyTrait {
 type T;
 
 fn bar(self) -> Self::T;
 }
 
 fn foo<A: MyTrait, B>(a: A) -> B {
 return a.bar();
 }","trait MyTrait {
 type T;
 
 fn bar(self) -> Self::T;
 }
 
 fn foo<A: MyTrait, B>(a: A) -> B {
 return a.bar();
 }",,,,,,,,,
117489,"{'I-ICE', 'F-generic_associated_types', 'A-GATs', 'T-compiler', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/117489,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-Trait & Bound,2,ICE: Lifetime issue not detected for GAT,2023-11-01T14:21:59Z,2023-11-17T16:38:57Z,112422,https://github.com/rust-lang/rust/pull/112422,,,,16,,,,,0,"trait LendingIterator {
 type Item<'a>
 where
 Self: 'a;
 
 fn next(&mut self) -> Option<Self::Item<'_>>;
 
 fn for_each(mut self, mut f: Box<dyn FnMut(Self::Item<'_>) + 'static>)
 where
 Self: Sized,
 {
 while let Some(next) = self.next() {
 f(next);
 }
 }
 }
 
 struct Query<'q> {
 inner: &'q [u32],
 index: usize,
 }
 
 impl<'q> Query<'q> {
 pub fn new(inner: &'q Vec<u32>) -> Self {
 Self { index: 0, inner }
 }
 }
 
 impl<'q> LendingIterator for Query<'q> {
 type Item<'a> = &'a u32 where Self: 'a;
 
 fn next(&mut self) -> Option<Self::Item<'_>> {
 if let Some(value) = self.inner.get(self.index) {
 self.index += 1;
 return Some(value);
 }
 
 None
 }
 }
 
 fn main() {
 let mut data = vec![1, 2, 3];
 
 LendingIterator::for_each(
 Query::new(&data),
 Box::new(|val| {
 eprintln!(""{}"", val);
 }),
 );
 
 // Picks up the 'static issue, doesn't compile/crash.
 // Query::new(&data).for_each(Box::new(|val| {
 // eprintln!(""{}"", val);
 // }));
 }","pub trait LendingIterator {
 type Item<'a>
 where
 Self: 'a;
 fn for_each(self, _: Box<dyn FnMut(Self::Item<'_>)>)
 where
 Self: Sized,
 {
 }
 }
 pub struct Query<'q>(&'q ());
 
 impl<'q> LendingIterator for Query<'q> {
 type Item<'a> = &'a () where Self: 'a;
 }
 
 fn main() {
 let q = Query(&());
 LendingIterator::for_each(q, Box::new(|_| {}));
 }",,,1,,1,FnMut,,,
117446,"{'I-ICE', 'A-trait-system', 'E-needs-test', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/117446,Not reproducible anymore,,,,,,,index out of bounds,2023-10-31T12:51:22Z,2024-11-03T16:17:30Z,,,,,,369,,,,,0,,,,,,,,,,,
117362,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/117362,valid,icemaker,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,1,ICE: gvn hits `bug!()`,2023-10-29T17:14:40Z,2023-10-31T15:07:33Z,117438,https://github.com/rust-lang/rust/pull/117438,Do not ICE on constant evaluation failure in GVN.,2023/10/31 10:45,2023/10/31 15:07,1,35,"['consts.rs', 'issue-50814-2.mir-opt.stderr', 'issue-50814-2.normal.stderr', 'issue-50814-2.rs']","['compiler/rustc_middle/src/mir', 'tests/ui/consts/const-eval', 'tests/ui/consts/const-eval', 'tests/ui/consts/const-eval']",,0,"// build-fail
 
 trait C {
 const BOO: usize;
 }
 
 trait Foo<T> {
 const BAR: usize;
 }
 
 struct A<T>(T);
 
 impl<T: C> Foo<T> for A<T> {
 const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR evaluation of `<A<()> as Foo<()>>::BAR` failed
 }
 
 fn foo<T: C>() -> &'static usize {
 &<A<T> as Foo<T>>::BAR //~ constant
 }
 
 impl C for () {
 const BOO: usize = 42;
 }
 
 impl C for u32 {
 const BOO: usize = 1;
 }
 
 fn main() {
 println!(""{:x}"", foo::<()>() as *const usize as usize);
 println!(""{:x}"", foo::<u32>() as *const usize as usize);
 println!(""{:x}"", foo::<()>());
 println!(""{:x}"", foo::<u32>());
 }","trait C {
 const BOO: usize;
 }
 
 trait Foo<T> {
 const BAR: usize;
 }
 
 struct A<T>(T);
 
 impl<T: C> Foo<T> for A<T> {
 const BAR: usize = [5, 6, 7][T::BOO];
 }
 
 fn foo<T: C>() -> &'static usize {
 &<A<T> as Foo<T>>::BAR
 }
 
 impl C for () {
 const BOO: usize = 42;
 }
 
 fn main() {
 println!(""{:x}"", foo::<()>());
 }",,,,,1,,-Zmir-opt-level=X,rustc -Zmir-opt-level=5,
117355,"{'T-compiler', 'A-mir-opt', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/117355,valid,Rustlantis,1. Crash-Front-end Panic,invalid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,MIR validation error at `mir-opt-level>=3`,2023-10-29T11:59:52Z,2023-11-20T11:23:25Z,117783,https://github.com/rust-lang/rust/pull/117783,,,,21,842,"['inline.rs', 'exponential_runtime.main.Inline.panic-abort.diff', 'exponential_runtime.main.Inline.panic-unwind.diff', 'indirect_destination.rs', 'inline_coroutine.main.Inline.panic-abort.diff', 'inline_coroutine.main.Inline.panic-unwind.diff', 'inline_into_box_place.main.Inline.panic-abort.diff', 'inline_into_box_place.main.Inline.panic-unwind.diff', 'inline_into_box_place.rs', 'jump_threading.identity.JumpThreading.panic-abort.diff', 'jump_threading.identity.JumpThreading.panic-unwind.diff', 'jump_threading.rs', 'separate_const_switch.identity.SeparateConstSwitch.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"#![feature(custom_mir, core_intrinsics)]
 #![allow(unused_parens, unused_assignments, overflowing_literals)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn12(
 mut _6: *mut bool,
 mut _9: *mut bool,
 ) -> char {
 mir! {
 let _19: i8;
 {
 Goto(bb1)
 }
 bb1 = {
 Call((*_9) = fn13(_6), bb2)
 }
 bb2 = {
 _19 = 115_i8;
 match _19 {
 1 => bb3,
 _ => bb5
 }
 }
 bb3 = {
 Call((*_9) = fn13(_6), bb2)
 }
 bb5 = {
 Return()
 }
 
 }
 }
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn13(mut _1: *mut bool) -> bool {
 mir! {
 {
 RET = true;
 Return()
 }
 }
 }
 pub fn main() {}","#![feature(custom_mir, core_intrinsics)]
 #![allow(unused_parens, unused_assignments, overflowing_literals)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn12(
 mut _6: *mut bool,
 mut _9: *mut bool,
 ) -> char {
 mir! {
 let _19: i8;
 {
 Goto(bb1)
 }
 bb1 = {
 Call((*_9) = fn13(_6), bb2)
 }
 bb2 = {
 _19 = 115_i8;
 match _19 {
 1 => bb3,
 _ => bb5
 }
 }
 bb3 = {
 Call((*_9) = fn13(_6), bb2)
 }
 bb5 = {
 Return()
 }
 
 }
 }
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn13(mut _1: *mut bool) -> bool {
 mir! {
 {
 RET = true;
 Return()
 }
 }
 }
 pub fn main() {}",1,,,,,,"-Zmir-opt-level=X
-Copt-level=X",rustc -Zmir-opt-level=2 -Copt-level=1 repro.rs,"#![feature(custom_mir, core_intrinsics)]"
117310,"{'T-types', 'A-impl-trait', 'F-type_alias_impl_trait', 'C-bug'}",https://github.com/rust-lang/rust/issues/117310,Not reproducible anymore,,,,,,,surprising behaviour when relating opaque types in winnowing,2023-10-28T08:49:52Z,2024-03-24T18:14:24Z,122949,https://github.com/rust-lang/rust/pull/122949,Add a regression test for #117310,2024/3/23 14:58,2024/3/24 18:14,148,28,['tait-param-inference-issue-117310.rs'],['tests/ui/type-alias-impl-trait'],,0,,,,,,,,,,,
117251,"{'I-ICE', 'A-closures', 'E-needs-test', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/117251,Not reproducible anymore,,1. Crash-Front-end Panic,,,,,ICE on nightly with closure returning wrong type,2023-10-26T21:20:09Z,2024-07-15T12:01:07Z,,,,,,262,,,,,0,,,,,,,,,,,
117186,"{'A-diagnostics', 'A-trait-objects', 'D-verbose', 'E-easy'}",https://github.com/rust-lang/rust/issues/117186,exclude,,,,,,,Don't show the same help multiple times for object safety violations,2023-10-25T21:00:55Z,2023-11-27T21:51:48Z,117200,https://github.com/rust-lang/rust/pull/117200,Don't add redundant help for object safety violations,2023/10/26 4:07,2023/11/27 21:51,33,111,"['mod.rs', 'mod.rs', 'object_safety.rs', 'object-safety-err-ret.stderr']","['compiler/rustc_infer/src/traits/error_reporting', 'compiler/rustc_middle/src/traits', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/const-generics/generic_const_exprs']",,0,,,,,,,,,,,
116925,"{'A-trait-system', 'T-compiler', 'D-terse', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/116925,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,1,Confusing error when referencing associated types inside trait bounds in trait implementations,2023-10-19T04:01:10Z,2024-01-25T11:17:19Z,119389,https://github.com/rust-lang/rust/pull/119389,,,,98,297,"['suggestions.rs', 'impl-wf-cycle-1.stderr', 'impl-wf-cycle-2.stderr', 'impl-wf-cycle-3.rs', 'impl-wf-cycle-3.stderr', 'impl-wf-cycle-4.rs', 'impl-wf-cycle-4.stderr']","['compiler/rustc_trait_selection/src/traits/error_reporting', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/associated-types', 'tests/ui/associated-types']",,0,"trait A<T> {}
 
 trait B {
 type Type;
 }
 
 impl<T> B for T
 where
 T: A<Self::Type>,
 {
 type Type = bool;
 }","trait A<T> {}
 
 trait B {
 type Type;
 }
 
 impl<T> B for T
 where
 T: A<Self::Type>,
 {
 type Type = bool;
 }",,,,,,,,,
116877,"{'I-ICE', 'T-types', 'A-impl-trait', 'P-critical', 'regression-from-stable-to-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/116877,valid,members,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,1. Type-Opaque Types,6,regression when relating two opaque types in canonical queries,2023-10-18T04:25:23Z,2024-04-09T01:01:24Z,122077,https://github.com/rust-lang/rust/pull/122077,Pass list of defineable opaque types into canonical queries,2024/3/6 10:26,2024/4/9 1:01,173,858,"['consumers.rs', 'lib.rs', 'opaque_types.rs', 'canonical.rs', 'check.rs', '_impl.rs', 'typeck_root_ctxt.rs', 'at.rs', 'canonicalizer.rs', 'query_response.rs', 'mod.rs', 'mod.rs', 'canonical.rs', 'plumbing.rs', 'mod.rs', 'solve.rs', 'closure.rs', 'codec.rs', 'context.rs', 'list.rs', 'canonicalizer.rs', 'infer.rs', 'canonical.rs', 'mod.rs', 'mod.rs', 'trait_goals.rs', 'mod.rs', 'canonical.rs', 'debug.rs', 'infcx.rs', 'interner.rs', 'issues.txt', 'address_of.address_of_reborrow.SimplifyCfg-initial.after.mir', 'basic_assignment.main.SimplifyCfg-initial.after.mir', 'issue_101867.main.built.after.mir', 'receiver_ptr_mutability.main.built.after.mir', 'issue_72181_1.main.built.after.mir', 'issue_99325.main.built.after.32bit.mir', 'issue_99325.main.built.after.64bit.mir', 'different_where_bounds.rs', 'equality-in-canonical-query.clone.stderr', 'equality-in-canonical-query.rs', 'nested-hkl-lifetime.rs', 'nested-rpit-hrtb.rs', 'nested-rpit-hrtb.stderr', 'issue-80409.no-compat.stderr', 'issue-53398-cyclic-types.rs', 'rpit_tait_equality_in_canonical_query.current.stderr', 'rpit_tait_equality_in_canonical_query.rs', 'type-alias-impl-trait-with-cycle-error-1.rs', 'type-alias-impl-trait-with-cycle-error-1.stderr', 'type-alias-impl-trait-with-cycle-error-2.rs', 'type-alias-impl-trait-with-cycle-error-2.stderr', 'type-alias-impl-trait-with-cycle-error-3.rs', 'type-alias-impl-trait-with-cycle-error-3.stderr', 'type-alias-impl-trait-with-cycle-error-4.rs', 'type-alias-impl-trait-with-cycle-error-4.stderr', 'type-alias-impl-trait-with-cycle-error.stderr', 'type-alias-impl-trait-with-cycle-error2.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/canonical', 'compiler/rustc_infer/src/infer/canonical', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/opaque_types', 'compiler/rustc_middle/src/infer', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/traits', 'compiler/rustc_middle/src/traits', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_next_trait_solver/src', 'compiler/rustc_trait_selection/src', 'compiler/rustc_trait_selection/src/solve/eval_ctxt', 'compiler/rustc_trait_selection/src/solve/eval_ctxt', 'compiler/rustc_trait_selection/src/solve', 'compiler/rustc_trait_selection/src/solve', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_type_ir/src', 'compiler/rustc_type_ir/src', 'compiler/rustc_type_ir/src', 'compiler/rustc_type_ir/src', 'src/tools/tidy/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/building', 'tests/mir-opt/building', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/inference', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-critical,1,"// revisions: sized clone
 
 #[cfg(sized)] fn rpit() -> impl Sized {}
 #[cfg(clone)] fn rpit() -> impl Clone {}
 
 fn same_output<Out>(_: impl Fn() -> Out, _: impl Fn() -> Out) {}
 
 pub fn foo() -> impl Sized {
 same_output(rpit, foo);
 same_output(foo, rpit);
 rpit()
 }","// revisions: sized clone
 
 #[cfg(sized)] fn rpit() -> impl Sized {}
 #[cfg(clone)] fn rpit() -> impl Clone {}
 
 fn same_output<Out>(_: impl Fn() -> Out, _: impl Fn() -> Out) {}
 
 pub fn foo() -> impl Sized {
 same_output(rpit, foo);
 same_output(foo, rpit);
 rpit()
 }",,,,,,Sized,,,
116869,"{'A-lifetimes', 'A-closures', 'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/116869,duplicate,,,,,,,Higher rank lifetimes fails when trying to set closure lifetimes,2023-10-18T00:56:55Z,2024-03-01T10:18:52Z,,,,,,135,,,,,0,,,,,,,,,,,
116864,"{'A-trait-system', 'A-associated-items', 'A-lifetimes', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/116864,duplicate,,,,,,,Asssociated type declared in `where` clause is not enforced in type parameter,2023-10-17T23:03:38Z,2023-11-13T12:13:45Z,,,,,,26,,,,,0,,,,,,,,,,,
116794,"{'T-types', 'A-impl-trait', 'P-medium', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/116794,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-Type Infer,2. Ownership-Lifetime,3,uncaptured lifetimes required to live as long as the opaque type,2023-10-16T13:13:47Z,2023-10-29T20:37:29Z,116733,https://github.com/rust-lang/rust/pull/116733,Consider alias bounds when computing liveness in NLL (but this time sound hopefully),2023/10/14 15:06,2023/10/29 20:37,13,377,"['trace.rs', 'opaque_types.rs', 'for_liveness.rs', 'mod.rs', 'gat-static.rs', 'higher-ranked-outlives-for-capture.rs', 'higher-ranked-outlives-for-capture.stderr', 'higher-ranked.rs', 'opaque-capture.rs', 'opaque-type-param.rs', 'opaque-type-param.stderr', 'rpit-static.rs', 'rpitit-static.rs', 'rtn-static.rs', 'rtn-static.stderr', 'bivariant-lifetime-liveness.rs']","['compiler/rustc_borrowck/src/type_check/liveness', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/borrowck/alias-liveness', 'tests/ui/impl-trait']",P-medium,0,"fn opaque<'a: 'a>(_: &'a str) -> *mut impl Sized {
 &mut ()
 }
 
 fn main() {
 let x = opaque(&String::new()); //~ ERROR temporary value dropped while borrowed
 drop(x);
 }","fn opaque<'a: 'a>(_: &'a str) -> *mut impl Sized {
 &mut ()
 }
 
 fn main() {
 let x = opaque(&String::new()); //~ ERROR temporary value dropped while borrowed
 drop(x);
 }",,,,,1,Sized,,,
116765,"{'A-lifetimes', 'A-trait-objects', 'T-compiler', 'D-terse', 'A-borrow-checker', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/116765,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,2. Ownership-Lifetime,3,Static lifetime requirement in boxed trait object (`Box<dyn Trait>`) is not clearly explained,2023-10-15T16:09:50Z,2023-11-21T06:40:13Z,117835,https://github.com/rust-lang/rust/pull/117835,,,,36,,,,,0,"struct Factory<'a> {
 value: &'a usize,
 }
 
 impl<'a> Factory<'a> {
 fn generate(&self) -> Box<dyn std::fmt::Debug + 'a> {
 Box::new(Value { value: self.value })
 }
 }
 
 
 struct Owner {
 value: Box<dyn std::fmt::Debug>
 }
 
 
 #[derive(Debug)]
 struct Value<'a> {
 value: &'a usize,
 }
 
 
 fn build_owner<'a,'b>(factory: &'b Factory<'a>) -> Owner {
 let value = factory.generate();
 
 Owner { value }
 }
 
 fn main() {
 let value = 10;
 
 let factory = Factory { value: &value };
 
 let _owner = build_owner(&factory);
 }","struct Factory<'a> {
 value: &'a usize,
 }
 
 impl<'a> Factory<'a> {
 fn generate(&self) -> Box<dyn std::fmt::Debug + 'a> {
 Box::new(Value { value: self.value })
 }
 }
 
 
 struct Owner {
 value: Box<dyn std::fmt::Debug>
 }
 
 
 #[derive(Debug)]
 struct Value<'a> {
 value: &'a usize,
 }
 
 
 fn build_owner<'a,'b>(factory: &'b Factory<'a>) -> Owner {
 let value = factory.generate();
 
 Owner { value }
 }
 
 fn main() {
 let value = 10;
 
 let factory = Factory { value: &value };
 
 let _owner = build_owner(&factory);
 }",,,1,1,1,Debug,,,
116749,"{'A-trait-system', 'A-associated-items', 'fixed-by-next-solver', 'A-lazy-normalization', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/116749,duplicate,,,,,,,Trait bounds of associated types in `where` clauses result in unsatisfied requeriments,2023-10-14T23:37:45Z,2023-11-13T11:49:44Z,,,,,,29,,,,,0,,,,,,,,,,,
116736,"{'I-ICE', 'A-MIR', 'T-compiler', '-Zvalidate-mir', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/116736,duplicate,,,,,,,broken mir while bootstrapping ra `hir-ty`,2023-10-14T17:04:09Z,2023-12-23T06:12:18Z,119077,https://github.com/rust-lang/rust/pull/119077,Separate MIR lints from validation,2023/12/18 10:00,2023/12/23 6:12,69,252,"['validate.rs', 'storage_liveness.rs', 'lib.rs', 'lint.rs', 'pass_manager.rs', 'ref_prop.rs', 'options.rs', 'runtest.rs', 'reference_prop.rs', 'no-storage.rs', 'storage-live.rs', 'storage-live.stderr', 'storage-return.rs']","['compiler/rustc_const_eval/src/transform', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_session/src', 'src/tools/compiletest/src', 'tests/mir-opt', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint']",,0,,,,,,,,,,,
116721,"{'I-ICE', 'fixed-by-next-solver', 'S-bug-has-test', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/116721,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,2,ICE: `slices are not scalars` II,2023-10-14T06:29:55Z,2024-06-30T13:21:38Z,127024,https://github.com/rust-lang/rust/pull/127024,Avoid cloning jump threading state when possible,2024/6/27 8:25,2024/6/30 13:21,260,101,"['value_analysis.rs', 'jump_threading.rs', 'sized-slice-predicate-116721.rs']","['compiler/rustc_mir_dataflow/src', 'compiler/rustc_mir_transform/src', 'tests/ui/mir']",,0,"// compile-flags: -Z mir-opt-level=0
 // EMIT_MIR issue_91633.hey.mir_map.0.mir
 fn hey<T> (it: &[T])
 where
 [T] : Clone,
 {
 let _ = {0;0};
 }
 
 // EMIT_MIR issue_91633.bar.mir_map.0.mir
 fn bar<T> (it: Box<[T]>)
 where
 [T] : std::ops::Index<usize>,
 {
 let _ = it[0];
 }
 
 // EMIT_MIR issue_91633.fun.mir_map.0.mir
 fn fun<T> (it: &[T]) -> &T
 {
 let f = &it[0];
 f
 }
 
 // EMIT_MIR issue_91633.foo.mir_map.0.mir
 fn foo<T: Clone> (it: Box<[T]>) -> T
 {
 let f = it[0].clone();
 f
 }
 fn main(){}","fn hey<T>(it: &[T])
 where
 [T]: Clone,
 {
 }
 
 fn main() {}",,,,,,,"-Zmir-opt-level=X
--emit=mir",rustc -Zmir-opt-level=3 --emit=mir,
116615,"{'A-diagnostics', 'D-newcomer-roadblock', 'T-compiler', 'D-terse', 'A-type-system'}",https://github.com/rust-lang/rust/issues/116615,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,5. Exception Handling & Report,2,Provide context when type error happens due to different fn arguments with the same type parameter are called with different types,2023-10-10T21:39:43Z,2024-04-05T15:33:37Z,121595,https://github.com/rust-lang/rust/pull/121595,,,,177,,,,,0,"fn main() {
 foo(1, 2.);
 }
 fn foo<T>(a: T, b: T) {}","fn main() {
 foo(1, 2.);
 }
 fn foo<T>(a: T, b: T) {}",,,,,,,,,
116377,"{'A-trait-system', 'A-associated-items', 'fixed-by-next-solver', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/116377,duplicate,,,,,,,Unable to put trait bound on associated type in generic method in trait with its own associated type,2023-10-03T10:25:14Z,2023-11-13T11:48:52Z,,,,,,41,,,,,0,,,,,,,,,,,
116291,"{'I-ICE', 'T-compiler', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/116291,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,"Attempt to read from stolen value with -Zmir-enable-passes=+Inline, but not -Zinline-mir",2023-09-30T17:01:58Z,2023-10-22T09:42:26Z,116896,https://github.com/rust-lang/rust/pull/116896,,,,21,,,,,0,"fn main() {
 let func = || 123u8;
 func();
 }","fn main() {
 let func = || 123u8;
 func();
 }",,,,,,,"+nightly
-Zmir-opt-level=X
-Zmir-enable-passes=+X",rustc +nightly -Zmir-opt-level=0 -Zmir-enable-passes=+Inline,
116212,"{'I-ICE', 'T-compiler', 'C-bug', 'A-mir-opt', 'F-never_type'}",https://github.com/rust-lang/rust/issues/116212,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,ICE: gvn: `node .. is not reachable`,2023-09-27T23:11:17Z,2023-09-29T11:58:51Z,116239,https://github.com/rust-lang/rust/pull/116239,Only visit reachable nodes in SsaLocals.,2023/9/28 17:09,2023/9/29 11:58,1,26,"['ssa.rs', 'ssa_unreachable_116212.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt']",,0,"#![feature(never_type)]
 
 use std::{
 mem::{self, MaybeUninit},
 num,
 ptr::NonNull,
 };
 
 struct Foo {
 x: u8,
 y: !,
 }
 
 #[repr(i32)]
 enum ZeroIsValid {
 Zero(u8) = 0,
 One() = 1,
 }
 
 fn test_panic_msg<T, F: (FnOnce() -> T) + 'static>(op: F, msg: &str) {
 use std::{env, panic, process};
 
 let our_loc = panic::Location::caller().line().to_string();
 let mut args = env::args();
 
 if let Some(loc) = args.next() {
 if loc == our_loc {
 op();
 } else {
 }
 } else {
 }
 }
 
 fn main() {
 unsafe {
 test_panic_msg(
 || MaybeUninit::<Foo>::uninit().assume_init(),
 ""attempted to instantiate uninhabited type `Foo`"",
 );
 }
 }","#![feature(never_type)]
 
 use std::mem::MaybeUninit;
 
 struct Foo {
 x: u8,
 y: !,
 }
 
 fn test_panic_msg<T, F: (FnOnce() -> T) + 'static>(op: F) {
 op();
 }
 
 fn main() {
 unsafe {
 test_panic_msg(|| MaybeUninit::<Foo>::uninit().assume_init());
 }
 }",,,,1,1,FnOnce,-Zmir-opt-level=X,rustc -Zmir-opt-level=5,#![feature(never_type)]
116171,"{'A-code-coverage', 'T-compiler', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/116171,exclude,,,,,,,Make coverage robust against MIR optimizations removing all counter-increment statements,2023-09-26T10:06:30Z,2024-03-27T11:32:53Z,122860,https://github.com/rust-lang/rust/pull/122860,coverage: Re-enable `UnreachablePropagation` for coverage builds,2024/3/22 6:21,2024/3/27 11:32,183,176,"['mapgen.rs', 'unreachable_prop.rs', 'unreachable.cov-map']","['compiler/rustc_codegen_llvm/src/coverageinfo', 'compiler/rustc_mir_transform/src', 'tests/coverage']",,0,,,,,,,,,,,
116121,"{'E-mentor', 'T-compiler', 'F-auto_traits', 'C-bug', 'E-easy', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/116121,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,1. AST,1. Type-Trait & Bound,2,"""auto trait"" syntax gets accepted on stable in cfg-disabled code",2023-09-24T12:39:42Z,2023-10-04T05:29:04Z,116393,https://github.com/rust-lang/rust/pull/116393,Emit feature gate *warning* for `auto` traits pre-expansion,2023/10/3 19:13,2023/10/4 5:29,9,30,"['feature_gate.rs', 'item.rs', 'pre-cfg.rs', 'pre-cfg.stderr', 'stringify.rs']","['compiler/rustc_ast_passes/src', 'compiler/rustc_parse/src/parser', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/macros']",,0,"#[cfg(any())]
 auto trait Foo {}","#[cfg(any())]
 auto trait Foo {}",,,,,,,,,
116079,"{'I-ICE', 'F-if_let_guard', 'requires-nightly', 'A-MIR', 'T-compiler', '-Zvalidate-mir', 'C-bug'}",https://github.com/rust-lang/rust/issues/116079,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,5,ICE: if_let_guard + mir drop tracking: broken mir,2023-09-22T21:36:57Z,2023-12-23T06:12:18Z,119077,https://github.com/rust-lang/rust/pull/119077,Separate MIR lints from validation,2023/12/18 10:00,2023/12/23 6:12,91,252,"['validate.rs', 'storage_liveness.rs', 'lib.rs', 'lint.rs', 'pass_manager.rs', 'ref_prop.rs', 'options.rs', 'runtest.rs', 'reference_prop.rs', 'no-storage.rs', 'storage-live.rs', 'storage-live.stderr', 'storage-return.rs']","['compiler/rustc_const_eval/src/transform', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_session/src', 'src/tools/compiletest/src', 'tests/mir-opt', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint']",,0,"#![feature(if_let_guard)]
 
 static mut A: [i32; 5] = [1, 2, 3, 4, 5];
 
 async fn fun() {
 unsafe {
 match A {
 _ => (),
 i if let Some(1) = async { Some(1) }.await => (),
 _ => (),
 }
 }
 }
 
 fn main() {}","#![feature(if_let_guard)]
 
 static mut A: [i32; 5] = [1, 2, 3, 4, 5];
 
 async fn fun() {
 unsafe {
 match A {
 _ => (),
 i if let Some(1) = async { Some(1) }.await => (),
 _ => (),
 }
 }
 }
 
 fn main() {}",,1,,,,,"-Zvalidate-mir
-Zdrop-tracking-mir=yes
--edition=X",rustc -Zvalidate-mir -Zdrop-tracking-mir=yes --edition=2018,#![feature(if_let_guard)]
115918,"{'A-trait-system', 'A-GATs', 'T-compiler', 'F-generic_associated_types'}",https://github.com/rust-lang/rust/issues/115918,question,,,,,,,conflicting implementation false positive for fix point over GAT,2023-09-17T19:32:57Z,2023-09-17T20:45:59Z,,,,,,0,,,,,0,,,,,,,,,,,
115789,"{'I-ICE', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/115789,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,1,ICE: `dereferencing Adt(..)`,2023-09-12T15:54:15Z,2023-09-24T07:57:58Z,115794,https://github.com/rust-lang/rust/pull/115794,Do not create a DerefLen place for `Box<[T]>`.,2023/9/12 17:32,2023/9/24 7:58,11,957,"['value_analysis.rs', 'default_boxed_slice.main.ConstProp.32bit.panic-abort.diff', 'default_boxed_slice.main.ConstProp.32bit.panic-unwind.diff', 'default_boxed_slice.main.ConstProp.64bit.panic-abort.diff', 'default_boxed_slice.main.ConstProp.64bit.panic-unwind.diff', 'default_boxed_slice.main.DataflowConstProp.32bit.panic-abort.diff', 'default_boxed_slice.main.DataflowConstProp.32bit.panic-unwind.diff', 'default_boxed_slice.main.DataflowConstProp.64bit.panic-abort.diff', 'default_boxed_slice.main.DataflowConstProp.64bit.panic-unwind.diff', 'default_boxed_slice.rs']","['compiler/rustc_mir_dataflow/src', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop']",,0,"#[derive(Default)]
 struct A {
 foo: Box<[bool]>,
 }
 
 pub fn main() {
 let a: A = Default::default();
 }","#[derive(Default)]
 struct A {
 foo: Box<[bool]>,
 }
 
 pub fn main() {
 let a: A = Default::default();
 }",,,,,,,-Zmir-opt-level=X,rustc -Zmir-opt-level=3,
115781,"{'T-types', 'A-impl-trait', 'P-medium', 'T-compiler', 'regression-from-stable-to-beta'}",https://github.com/rust-lang/rust/issues/115781,exclude,,,,,,,regression: concrete type differs from previous defining opaque type use,2023-09-12T13:51:13Z,2023-09-25T17:44:35Z,,,,,,13,,,,P-medium,0,,,,,,,,,,,
115375,"{'T-compiler', 'D-invalid-suggestion', 'C-bug', 'A-borrow-checker', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/115375,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,1. Type-Trait & Bound,6,bad suggestion for type lifetime bounds with anonymous lifetimes,2023-08-30T10:52:26Z,2023-10-09T17:13:16Z,115882,https://github.com/rust-lang/rust/pull/115882,improve the suggestion of `generic_bound_failure`,2023/9/16 5:27,2023/10/9 17:13,40,1909,"['mod.rs', 'context.rs', 'regionck-1.stderr', 'async-generics-and-bounds.stderr', 'async-generics.stderr', 'builtin-superkinds-self-type.stderr', 'issue-53475.stderr', 'issue-102117.stderr', 'E0311.fixed', 'E0311.stderr', 'implied-bounds-unnorm-associated-type-5.stderr', 'issue-84931.stderr', 'must_outlive_least_region_or_bound.stderr', 'type_parameters_captured.stderr', 'unactionable_diagnostic.fixed', 'unactionable_diagnostic.rs', 'unactionable_diagnostic.stderr', 'lifetime-doesnt-live-long-enough.stderr', 'issue_74400.stderr', 'suggest-introducing-and-adding-missing-lifetime.fixed', 'suggest-introducing-and-adding-missing-lifetime.stderr', 'overlapping-impl-1-modulo-regions.stderr', 'propagate-from-trait-match.stderr', 'issue-98589-closures-relate-named-regions.stderr', 'issue-98693.stderr', 'min-choice-reject-ambiguous.stderr', 'impl-trait-outlives.stderr', 'projection-implied-bounds.stderr', 'projection-no-regions-closure.stderr', 'projection-no-regions-fn.stderr', 'projection-one-region-closure.stderr', 'projection-two-region-trait-bound-closure.stderr', 'projection-where-clause-env-wrong-bound.stderr', 'projection-where-clause-env-wrong-lifetime.stderr', 'projection-where-clause-none.stderr', 'ty-param-closure-approximate-lower-bound.stderr', 'ty-param-closure-outlives-from-return-type.stderr', 'ty-param-closure-outlives-from-where-clause.stderr', 'ty-param-fn-body.stderr', 'ty-param-fn.stderr', 'normalization-infer.stderr', 'object-safety-supertrait-mentions-GAT.stderr', 'closure-in-projection-issue-97405.stderr', 'regions-close-associated-type-into-object.stderr', 'regions-close-object-into-object-4.stderr', 'regions-close-object-into-object-5.stderr', 'regions-close-over-type-parameter-1.stderr', 'regions-close-param-into-object.stderr', 'regions-implied-bounds-projection-gap-1.stderr', 'regions-infer-bound-from-trait-self.stderr', 'regions-infer-bound-from-trait.stderr', 'dont-infer-static.stderr', 'regions-enum-not-wf.stderr', 'regions-struct-not-wf.stderr', 'issue-105544.fixed', 'issue-105544.rs', 'issue-105544.stderr', 'missing-lifetimes-in-signature-2.fixed', 'missing-lifetimes-in-signature-2.rs', 'missing-lifetimes-in-signature-2.stderr', 'missing-lifetimes-in-signature.stderr', 'type-param-bound-scope.fixed', 'type-param-bound-scope.rs', 'type-param-bound-scope.stderr', 'type-param-missing-lifetime.fixed', 'type-param-missing-lifetime.rs', 'type-param-missing-lifetime.stderr', 'suggest-impl-trait-lifetime.fixed', 'suggest-impl-trait-lifetime.rs', 'suggest-impl-trait-lifetime.stderr', 'closure_wf_outlives.stderr', 'generic_type_does_not_live_long_enough.stderr', 'implied_lifetime_wf_check3.stderr', 'implied_lifetime_wf_check4_static.stderr', 'wf-in-associated-type.fail.stderr', 'wf-nested.fail.stderr', 'wf-nested.pass_sound.stderr', 'wf-impl-associated-type-region.stderr', 'wf-in-fn-type-static.stderr', 'wf-in-obj-type-static.stderr', 'wf-outlives-ty-in-fn-or-trait.stderr', 'wf-trait-associated-type-region.stderr']","['compiler/rustc_infer/src/infer/error_reporting', 'compiler/rustc_middle/src/ty', 'tests/ui/associated-inherent-types', 'tests/ui/async-await/in-trait', 'tests/ui/async-await/in-trait', 'tests/ui/builtin-superkinds', 'tests/ui/coercion', 'tests/ui/consts', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/fn', 'tests/ui/generic-associated-types', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/lifetimes', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/lifetimes', 'tests/ui/lifetimes', 'tests/ui/marker_trait_attr', 'tests/ui/nll/closure-requirements', 'tests/ui/nll', 'tests/ui/nll', 'tests/ui/nll/member-constraints', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/user-annotations', 'tests/ui/object-safety', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/regions', 'tests/ui/rfcs/rfc-2093-infer-outlives', 'tests/ui/rfcs/rfc-2093-infer-outlives', 'tests/ui/rfcs/rfc-2093-infer-outlives', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",,0,"type Lt<'lt> = *mut &'lt u8;
 
 fn outlives<'lt, T: 'lt>(_: T, _: Lt<'lt>) {}
 
 pub fn test<A>(arg: A, lt: Lt<'_>, _: &str) {
 outlives(arg, lt);
 //~^ ERROR the parameter type `A` may not live long enough
 }","type Lt<'lt> = *mut &'lt u8;
 
 fn outlives<'lt, T: 'lt>(_: T, _: Lt<'lt>) {}
 
 pub fn test<A>(arg: A, lt: Lt<'_>, _: &str) {
 outlives(arg, lt);
 //~^ ERROR the parameter type `A` may not live long enough
 }",,,,,1,,,,
115302,"{'A-closures', 'F-track_caller', 'C-bug', 'E-easy', 'T-libs'}",https://github.com/rust-lang/rust/issues/115302,exclude,developer,4. Diagnostic Issues-Incorrect Warning/Error,,,,,track_caller does not work with closures and Fn* types,2023-08-28T03:45:55Z,2023-10-19T05:45:52Z,116795,https://github.com/rust-lang/rust/pull/116795,Add `#[track_caller]` to `Option::unwrap_or_else`,2023/10/16 13:18,2023/10/19 5:45,52,1,['option.rs'],['library/core/src'],,0,,,,,,,,,,,
115259,"{'A-closures', 'T-compiler', 'D-invalid-suggestion', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/115259,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,5. Exception Handling & Report,1,"Wrong syntax suggested by ""consider changing this to be a mutable reference"" with mut parameter in closure when iterating a vector",2023-08-26T22:49:16Z,2023-09-11T14:31:02Z,115308,https://github.com/rust-lang/rust/pull/115308,suggest iter_mut() where trying to modify elements from .iter(),2023/8/28 9:05,2023/9/11 14:31,15,275,"['mutability_errors.rs', 'issue-115259-suggest-iter-mut.fixed', 'issue-115259-suggest-iter-mut.rs', 'issue-115259-suggest-iter-mut.stderr', 'issue-62387-suggest-iter-mut-2.fixed', 'issue-62387-suggest-iter-mut-2.rs', 'issue-62387-suggest-iter-mut-2.stderr', 'issue-62387-suggest-iter-mut.fixed', 'issue-62387-suggest-iter-mut.rs', 'issue-62387-suggest-iter-mut.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck']",,0,"fn main() {}
 
 pub trait Layer {
 fn process(&mut self) -> u32;
 }
 
 pub struct State {
 layers: Vec<Box<dyn Layer>>,
 }
 
 impl State {
 pub fn process(&mut self) -> u32 {
 self.layers.iter().fold(0, |result, mut layer| result + layer.process())
 }
 }","fn take_f(_: impl FnMut(&String)) {}
 
 fn main() {
 #[allow(unused_mut)] // `mut layer` needed to reproduce the diagnostic
 take_f(|mut layer| {
 layer.push('\n');
 });
 }",,,,,,,,,
115181,"{'A-trait-system', 'A-associated-items', 'T-compiler', 'C-bug', 'A-macros'}",https://github.com/rust-lang/rust/issues/115181,duplicate,,,,,,,Inconsistent derivation for type which stores associated type,2023-08-24T18:55:26Z,2024-11-20T06:42:40Z,,,,,,453,,,,,0,,,,,,,,,,,
115113,"{'P-critical', 'A-debuginfo', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/115113,valid,members,5. Misoptimization,,4. Code Gen,5. Exception Handling & Report,1,ScalarReplacementOfAggregates causes rustc to emit invalid LLVM debuginfo (and sometimes rustc segfaults),2023-08-22T20:12:04Z,2023-09-07T14:45:28Z,115139,https://github.com/rust-lang/rust/pull/115139,,,,15,,,,P-critical,1,"pub struct Endian;
 
 #[allow(dead_code)]
 pub struct EndianSlice<'input> {
 slice: &'input [u8],
 endian: Endian,
 }
 
 pub fn test(s: &[u8]) {
 let slice = EndianSlice { slice: s, endian: Endian };
 }","pub struct Endian;
 
 #[allow(dead_code)]
 pub struct EndianSlice<'input> {
 slice: &'input [u8],
 endian: Endian,
 }
 
 pub fn test(s: &[u8]) {
 let slice = EndianSlice { slice: s, endian: Endian };
 }",,,,,1,,"--emit=llvm-ir
-Cdebuginfo=X
-Zmir-opt-level=X
-Zmir-enable-passes=+X",--emit=llvm-ir -C debuginfo=2 -Zmir-opt-level=0 -Zmir-enable-passes=+ScalarReplacementOfAggregates,
114942,"{'A-trait-objects', 'C-enhancement', 'C-optimization', 'T-compiler', 'F-trait_upcasting'}",https://github.com/rust-lang/rust/issues/114942,valid,members,5. Misoptimization,,2. HIR-trait solving,1. Type-Trait & Bound,1,Imperfect vtable layout with an empty super trait comming after non-empty one,2023-08-17T19:19:27Z,2024-10-18T20:05:26Z,131864,https://github.com/rust-lang/rust/pull/131864,Never emit `vptr` for empty/auto traits,2024/10/18 0:30,2024/10/18 20:05,428,50,"['vtable.rs', 'print_vtable_sizes.stdout', 'upcast_reorder.rs', 'multiple-markers.stderr']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/traits/object', 'tests/ui/traits', 'tests/ui/traits/vtable']",,0,"#![feature(rustc_attrs)]
 #![allow(internal_features)]
 
 #[rustc_dump_vtable]
 trait Marker {}
 trait Pencil { fn f(&self) {} }
 
 #[rustc_dump_vtable]
 trait Imperfection: Pencil + Marker {}
 
 struct T;
 impl Marker for T {}
 impl Pencil for T {}
 impl Imperfection for T {}
 
 fn main() {
 (&T as &dyn Imperfection).f();
 let _a = &T as &dyn Marker;
 }","#![feature(rustc_attrs)]
 #![allow(internal_features)]
 
 #[rustc_dump_vtable]
 trait Marker {}
 trait Pencil { fn f(&self) {} }
 
 #[rustc_dump_vtable]
 trait Imperfection: Pencil + Marker {}
 
 struct T;
 impl Marker for T {}
 impl Pencil for T {}
 impl Imperfection for T {}
 
 fn main() {
 (&T as &dyn Imperfection).f();
 let _a = &T as &dyn Marker;
 }",,,1,,,,,,#![feature(rustc_attrs)]
114928,"{'T-types', 'I-unsound', 'P-high', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/114928,valid,developer,3. Miscompilation-Inconsistent Output Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Trait & Bound,2,Method call resolution behavioral changes on custom DSTs in Rust 1.70 -> 1.71,2023-08-17T09:39:17Z,2023-09-19T13:26:59Z,114941,https://github.com/rust-lang/rust/pull/114941,Don't resolve generic impls that may be shadowed by dyn built-in impls,2023/8/17 18:38,2023/9/19 13:27,33,178,"['sty.rs', 'instance.rs', 'dont_inline_type_id.call.Inline.diff', 'dont_inline_type_id.rs', 'inline_generically_if_sized.call.Inline.diff', 'inline_generically_if_sized.rs', 'dont-propagate-generic-instance-2.rs', 'dont-propagate-generic-instance.rs']","['compiler/rustc_middle/src/ty', 'compiler/rustc_ty_utils/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/ui/const_prop', 'tests/ui/const_prop']",P-high,0,"use std::any::TypeId;
 use std::any::Any;
 use std::hint::black_box;
 struct A<T:?Sized+'static> {
 a: i32,
 b: T
 }
 
 impl<T:?Sized+'static> A<T> {
 fn bb(&self) -> TypeId {
 self.b.type_id()
 }
 }
 
 pub fn main() {
 let mut a0 = A{a: 8, b: 9 as i32};
 let mut a: &mut A<dyn Any> = &mut a0;
 println!(""{:?}"",a.bb());
 println!(""{:?}"",a.b.type_id());
 println!(""{:?}"",std::any::TypeId::of::<i32>());
 }","use std::any::TypeId;
 use std::any::Any;
 use std::hint::black_box;
 struct A<T:?Sized+'static> {
 a: i32,
 b: T
 }
 
 impl<T:?Sized+'static> A<T> {
 fn bb(&self) -> TypeId {
 self.b.type_id()
 }
 }
 
 pub fn main() {
 let mut a0 = A{a: 8, b: 9 as i32};
 let mut a: &mut A<dyn Any> = &mut a0;
 println!(""{:?}"",a.bb());
 println!(""{:?}"",a.b.type_id());
 println!(""{:?}"",std::any::TypeId::of::<i32>());
 }",,,1,1,1,?Sized,,,
114907,"{'I-ICE', 'P-medium', 'T-compiler', 'C-bug', 'A-borrow-checker', 'regression-from-stable-to-stable', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/114907,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,5. Exception Handling & Report,2,ICE in rustc_borrowck/src/region_infer,2023-08-16T18:43:05Z,2023-08-31T16:57:07Z,115384,https://github.com/rust-lang/rust/pull/115384,Work around ICE in diagnostics for local super-universes missing `UniverseInfo`s,2023/8/30 14:44,2023/8/31 16:57,14,151,"['mod.rs', 'canonical.rs', 'mod.rs', 'missing-universe-cause-issue-114907.rs', 'missing-universe-cause-issue-114907.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'tests/ui/nll', 'tests/ui/nll']",P-medium,0,"use tungstenite::handshake::server::{Response, ErrorResponse};
 fn accept_connection(stream: TcpStream, config: rustls::server::ServerConfig) -> Result<Socket> {
 let mut conn = rustls::server::ServerConnection::new(std::sync::Arc::new(config.clone()))?;
 let tlsstream = rustls::StreamOwned::new(conn, stream.try_clone()?);
 if let Ok(ws) = match tungstenite::accept_hdr_with_config(tlsstream, |req, res| -> std::result::Result<Response, ErrorResponse> {
 let callback = |req, res| -> std::result::Result<tungstenite::handshake::server::Response, tungstenite::handshake::server::ErrorResponse> {
 dbg!(&req);
 dbg!(&res);
 Ok(res)
 }; 
 if let Ok(ws) = match tungstenite::accept_hdr_with_config(tlsstream, callback, None) {","use std::io::{self, Read, Write};
 
 struct S;
 
 impl Read for S {
 fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {
 todo!()
 }
 }
 
 impl Write for S {
 fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {
 todo!()
 }
 
 fn flush(&mut self) -> io::Result<()> {
 todo!()
 }
 }
 
 fn main() {
 let s = S;
 tungstenite::accept_hdr(s, |_, _| {
 let callback = |_, _| {
 todo!()
 };
 
 tungstenite::accept_hdr(s, callback);
 todo!()
 });
 }",,,,1,,,,,
114866,"{'T-compiler', 'A-diagnostics', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/114866,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,2. Ownership-Lifetime,3,higher-ranked lifetime error,2023-08-15T18:53:10Z,2023-11-16T21:08:17Z,116097,https://github.com/rust-lang/rust/pull/116097,Try to use approximate placeholder regions when outputting an AscribeUserType error in borrowck,2023/9/23 7:36,2023/11/16 21:08,93,93,"['bound_region_errors.rs', 'region_errors.rs', 'mod.rs', 'mod.rs', 'higher-ranked-lifetime-error.rs', 'higher-ranked-lifetime-error.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'tests/ui/higher-ranked', 'tests/ui/higher-ranked']",,0,"fn assert_all<F, T>(_f: F)
 where
 F: FnMut(&String) -> T,
 {
 }
 
 fn id(x: &String) -> &String {
 x
 }
 
 fn main() {
 assert_all::<_, &String>(id);
 }","fn assert_all<F, T>(_f: F)
 where
 F: FnMut(&String) -> T,
 {
 }
 
 fn id(x: &String) -> &String {
 x
 }
 
 fn main() {
 assert_all::<_, &String>(id);
 }",,,,,,FnMut,,,
114728,"{'I-unsound', 'A-impl-trait', 'T-types', 'P-high', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/114728,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,3,RPIT hidden types can be ill-formed,2023-08-11T11:37:33Z,2024-03-06T12:18:34Z,121679,https://github.com/rust-lang/rust/pull/121679,stricter hidden type wf-check [based on #115008],2024/2/27 14:59,2024/3/6 12:18,208,453,"['check.rs', 'opaque_types.rs', 'implied_bounds.rs', 'issue-78720.rs', 'issue-78720.stderr', 'issue-86800.rs', 'issue-86800.stderr', 'recursive-coroutine-boxed.next.stderr', 'recursive-coroutine-boxed.rs', 'wf-check-hidden-type.rs', 'wf-check-hidden-type.stderr', 'issue-76168-hr-outlives-3.rs', 'issue-76168-hr-outlives-3.stderr', 'type-match-with-late-bound.stderr', 'issue-90400-2.stderr', 'wf-check-definition-site.rs', 'wf-nested.fail.stderr', 'wf-nested.pass.stderr', 'wf-nested.pass_sound.stderr', 'wf-nested.rs', 'wf-nested.stderr']","['compiler/rustc_hir_analysis/src/check', 'compiler/rustc_infer/src/infer', 'compiler/rustc_ty_utils/src', 'tests/ui/closures', 'tests/ui/closures', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/lifetimes', 'tests/ui/lifetimes', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-high,0,"type Static<'a> = &'static &'a ();
 trait Extend<'a> {
 fn extend(self, _: &'a str) -> &'static str;
 }
 impl<'a> Extend<'a> for Static<'a> {
 fn extend(self, s: &'a str) -> &'static str {
 s
 }
 }
 fn boom<'a>(arg: Static<'_>) -> impl Extend<'a> {
 arg
 }
 fn main() {
 let y = boom(&&()).extend(&String::from(""temporary""));
 println!(""{}"", y);
 }","type Static<'a> = &'static &'a ();
 trait Extend<'a> {
 fn extend(self, _: &'a str) -> &'static str;
 }
 impl<'a> Extend<'a> for Static<'a> {
 fn extend(self, s: &'a str) -> &'static str {
 s
 }
 }
 fn boom<'a>(arg: Static<'_>) -> impl Extend<'a> {
 arg
 }
 fn main() {
 let y = boom(&&()).extend(&String::from(""temporary""));
 println!(""{}"", y);
 }",,,,,1,,,,
114664,"{'I-ICE', 'A-impl-trait', 'requires-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/114664,valid,icemaker,1. Crash-Front-end Panic,invalid,1. AST,2. Ownership-Lifetime,1,ICE: -Zunpretty `no def-id for fresh lifetime`,2023-08-09T17:36:08Z,2023-08-12T20:27:01Z,114667,https://github.com/rust-lang/rust/pull/114667,Record binder for bare trait object in LifetimeCollectVisitor,2023/8/9 18:34,2023/8/12 20:27,3,81,"['lifetime_collector.rs', 'fresh-lifetime-from-bare-trait-obj-114664.rs', 'fresh-lifetime-from-bare-trait-obj-114664.stderr']","['compiler/rustc_ast_lowering/src', 'tests/ui/impl-trait', 'tests/ui/impl-trait']",,0,"fn ice() -> impl AsRef<Fn(&())> {
 todo!()
 }
 
 pub fn main() {}","fn ice() -> impl AsRef<Fn(&())> {
 todo!()
 }
 
 pub fn main() {}",,,,,,,-Zunpretty=hir,rustc -Zunpretty=hir file.rs,
114657,"{'I-ICE', 'T-rustdoc', 'E-needs-test', 'T-compiler', 'A-synthetic-impls', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/114657,duplicate,,,,,,,"rustdoc: ICE: synthetic auto trait impls: `unexpected result when selecting [鈥` involving unsatisfied bounds, projections and super trait bounds",2023-08-09T15:58:37Z,2024-04-02T23:24:53Z,123348,https://github.com/rust-lang/rust/pull/123348,rustdoc: add a couple of regression tests,2024/4/2 1:10,2024/4/2 23:24,237,85,"['const-in-super-trait-and-item-bound.rs', 'projections-in-super-trait-bound-unsatisfied.rs', 'projections-in-super-trait-bound-unsatisfied.stderr', 'unconstrained-param-in-impl-ambiguity.rs', 'unconstrained-param-in-impl-ambiguity.stderr']","['tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls']",,0,,,,,,,,,,,
114624,"{'A-async-await', 'T-compiler', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/114624,Not reproducible anymore,,3. Miscompilation-Inconsistent Output Issues,,,,,async function being !Send due to match retaining type of a consumed value.,2023-08-08T13:01:25Z,2023-10-21T08:36:55Z,,,,,,73,,,,,0,,,,,,,,,,,
114597,"{'A-impl-trait', 'P-critical', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/114597,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,2. Ownership-Lifetime,6,Two conflicting concrete types for the same opaque type,2023-08-07T21:41:53Z,2023-08-08T15:41:42Z,114602,https://github.com/rust-lang/rust/pull/114602,Map RPIT duplicated lifetimes back to fn captured lifetimes,2023/8/8 0:13,2023/8/8 15:41,0,412,"['lib.rs', 'hir.rs', 'check.rs', 'predicates_of.rs', 'context.rs', 'implied_bounds.rs', 'outlives-in-nested-rpit.rs', 'mapping-duplicated-lifetimes-issue-114597.rs', 'wf-check-rpit-lifetimes.rs']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_middle/src/ty', 'compiler/rustc_ty_utils/src', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait', 'tests/ui/type-alias-impl-trait']",P-critical,0,,"struct A<'a> {
 dat: &'a (),
 }
 
 impl<'a> A<'a> {
 async fn a(&self) -> impl Iterator<Item = std::iter::Repeat<()>> {
 std::iter::repeat(()).map(|()| std::iter::repeat(()))
 }
 }",,1,,1,,,,,
114579,"{'T-types', 'A-impl-trait', 'regression-untriaged', 'C-bug'}",https://github.com/rust-lang/rust/issues/114579,duplicate,,,,,,,Crate cloud-storage does not compile on nightly-2023-07-27,2023-08-07T12:03:24Z,2023-08-08T13:44:14Z,,,,,,1,,,,,0,,,,,,,,,,,
114488,"{'I-unsound', 'A-codegen', 'P-critical', 'A-debuginfo', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/114488,valid,members,3. Miscompilation-Safe Rust Causes UB,,4. Code Gen,4. Basic syntax&structure,6,"ReferencePropagation exposed a latent miscompile, found in the wild with regex",2023-08-04T23:27:22Z,2023-08-18T00:12:57Z,114904,https://github.com/rust-lang/rust/pull/114904,Remove references in VarDebugInfo,2023/8/16 18:07,2023/8/18 0:12,13,1413,"['debuginfo.rs', 'validate.rs', 'mod.rs', 'pretty.rs', 'visit.rs', 'structural_impls.rs', 'mod.rs', 'mod.rs', 'ref_prop.rs', 'structural_impls.rs', 'slice-ref-equality.rs', 'unwrap_unchecked.unwrap_unchecked.Inline.panic-abort.diff', 'unwrap_unchecked.unwrap_unchecked.Inline.panic-unwind.diff', 'unwrap_unchecked.unwrap_unchecked.PreCodegen.after.panic-abort.mir', 'unwrap_unchecked.unwrap_unchecked.PreCodegen.after.panic-unwind.mir', 'issue_76432.test.SimplifyComparisonIntegral.panic-abort.diff', 'issue_76432.test.SimplifyComparisonIntegral.panic-unwind.diff', 'issue_59352.num_to_digit.PreCodegen.after.panic-abort.mir', 'issue_59352.num_to_digit.PreCodegen.after.panic-unwind.mir', 'checked_ops.step_forward.PreCodegen.after.mir', 'loops.filter_mapped.PreCodegen.after.mir', 'loops.int_range.PreCodegen.after.mir', 'range_iter.forward_loop.PreCodegen.after.panic-abort.mir', 'range_iter.forward_loop.PreCodegen.after.panic-unwind.mir', 'range_iter.range_iter_next.PreCodegen.after.panic-abort.mir', 'range_iter.range_iter_next.PreCodegen.after.panic-unwind.mir', 'slice_filter.variant_a-{closure#0}.PreCodegen.after.mir', 'slice_iter.range_loop.PreCodegen.after.panic-abort.mir', 'slice_iter.range_loop.PreCodegen.after.panic-unwind.mir', 'slice_iter.reverse_loop.PreCodegen.after.panic-abort.mir', 'slice_iter.reverse_loop.PreCodegen.after.panic-unwind.mir', 'reference_prop.debuginfo.ReferencePropagation.diff', 'reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff', 'reference_prop.reference_propagation.ReferencePropagation.diff', 'reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff', 'reference_prop.reference_propagation_mut.ReferencePropagation.diff', 'reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff', 'debug-ref-undef.rs']","['compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/build', 'compiler/rustc_mir_transform/src', 'compiler/rustc_type_ir/src', 'tests/codegen', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/issues', 'tests/mir-opt/issues', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/ui/mir']",P-critical,0,"use std::marker::PhantomData;
 
 struct RawTable<T> {
 marker: PhantomData<T>,
 }
 
 impl<T> RawTable<T> {
 fn iter(&self) -> RawIter<T> {
 RawIter {
 marker: PhantomData,
 }
 }
 }
 
 struct RawIter<T> {
 marker: PhantomData<T>,
 }
 
 impl<T> Iterator for RawIter<T> {
 type Item = ();
 fn next(&mut self) -> Option<()> {
 None
 }
 }
 
 struct HashMap<T> {
 table: RawTable<T>,
 }
 
 struct Iter<T> {
 inner: RawIter<T>, // Removing this breaks the reproducer
 }
 
 impl<T> IntoIterator for &HashMap<T> {
 type Item = T;
 type IntoIter = Iter<T>;
 fn into_iter(self) -> Iter<T> {
 Iter {
 inner: self.table.iter(),
 }
 }
 }
 
 impl<T> Iterator for Iter<T> {
 type Item = T;
 fn next(&mut self) -> Option<T> {
 None
 }
 }
 
 pub fn main() {
 let maybe_hash_set: Option<HashMap<()>> = None;
 for _ in maybe_hash_set.as_ref().unwrap_or(&HashMap {
 table: RawTable { marker: PhantomData },
 }) {}
 }","fn main() {
 let _ = regex::Regex::new("""");
 }",,,,,,,"-Cdebuginfo=X
-Zmir-opt-level=X
-Zmir-enable-passes=+X
-Cembed-bitcode=yes
-Clto=fat
-Cpanic=abort
-Copt-level=X","RUSTFLAGS=""-Cdebuginfo=2 -Zmir-opt-level=2 -Zmir-enable-passes=+DestinationPropagation -Cembed-bitcode=yes -Clto=fat -Cpanic=abort -Copt-level=3"" cargo run",
114401,"{'C-cleanup', 'T-compiler', 'A-MIR'}",https://github.com/rust-lang/rust/issues/114401,exclude,,,,,,,Cleanup: Place::is_indirect vs Place::has_deref,2023-08-03T06:28:14Z,2023-08-15T13:38:45Z,,,,,,12,,,,,0,,,,,,,,,,,
114389,"{'A-associated-items', 'A-trait-objects', 'I-unsound', 'T-types', 'A-coercions', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/114389,duplicate,,3. Miscompilation-Safe Rust Causes UB,,,,,Associated type constraints on super traits allowing for unsound transmutation to trait objects ,2023-08-02T20:49:51Z,2023-09-11T14:40:50Z,,,,,,39,,,,,0,,,,,,,,,,,
114220,"{'A-lifetimes', 'requires-nightly', 'T-compiler', 'C-bug', 'F-lazy_type_alias'}",https://github.com/rust-lang/rust/issues/114220,valid,icemaker,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-trait solving,1. Type-Trait & Bound,6,"lazy_type_alias: `return type references an anonymous lifetime, which is not constrained by the fn input types` ",2023-07-29T19:40:38Z,2024-02-21T01:10:31Z,121344,https://github.com/rust-lang/rust/pull/121344,Expand weak alias types before collecting constrained/referenced late bound regions + refactorings,2024/2/20 14:12,2024/2/21 1:10,206,473,"['bounds.rs', 'mod.rs', 'inherent_impls.rs', 'collect.rs', 'constrained_generic_params.rs', 'impl_wf_check.rs', 'min_specialization.rs', 'util.rs', 'arena.rs', 'mod.rs', 'query.rs', 'flags.rs', 'util.rs', 'visit.rs', 'normalize.rs', 'normalize.rs', 'normalize_projection_ty.rs', 'flags.rs', 'auto_trait.rs', 'constrained-late-bound-regions.rs', 'constrained-params-in-impl.rs', 'unconstrained-late-bound-regions.rs', 'unconstrained-late-bound-regions.stderr', 'unconstrained-params-in-impl-due-to-overflow.rs', 'unconstrained-params-in-impl-due-to-overflow.stderr', 'unconstrained-params-in-impl.rs', 'unconstrained-params-in-impl.stderr']","['compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src/impl_wf_check', 'compiler/rustc_infer/src/infer/error_reporting/nice_region_error', 'compiler/rustc_middle/src', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/traits', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/query', 'compiler/rustc_traits/src', 'compiler/rustc_type_ir/src', 'src/librustdoc/clean', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias', 'tests/ui/lazy-type-alias']",,0,"#![feature(lazy_type_alias)]
 // check-pass
 
 fn f(_: X) -> X {
 unimplemented!()
 }
 
 fn g<'a>(_: X<'a>) -> X<'a> {
 unimplemented!()
 }
 
 type X<'a> = &'a ();
 
 fn main() {
 let _: for<'a> fn(X<'a>) -> X<'a> = g;
 let _: for<'a> fn(X<'a>) -> X<'a> = f;
 }","#![feature(lazy_type_alias)]
 // check-pass
 
 fn f(_: X) -> X {
 unimplemented!()
 }
 
 fn g<'a>(_: X<'a>) -> X<'a> {
 unimplemented!()
 }
 
 type X<'a> = &'a ();
 
 fn main() {
 let _: for<'a> fn(X<'a>) -> X<'a> = g;
 let _: for<'a> fn(X<'a>) -> X<'a> = f;
 }",,,,,1,,,,#![feature(lazy_type_alias)]
114125,"{'T-compiler', 'A-diagnostics', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/114125,Not a bug,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Suggest `by_ref` when taking a reference to an iterator after applying an adaptor,2023-07-27T09:06:04Z,2023-08-14T02:52:45Z,,,,,,17,,,,,0,,,,,,,,,,,
114007,"{'A-trait-system', 'T-compiler', 'C-bug', 'F-trait_upcasting'}",https://github.com/rust-lang/rust/issues/114007,Not a bug,,,,,,,VTables include uncallable methods (that take `self` by value),2023-07-24T11:27:50Z,2023-09-09T15:57:10Z,,,,,,47,,,,,0,,,,,,,,,,,
113971,"{'A-impl-trait', 'C-enhancement', 'T-types', 'F-type_alias_impl_trait'}",https://github.com/rust-lang/rust/issues/113971,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,3,opaque type definition: strict lifetime equality vs equal-by-inference,2023-07-23T05:27:57Z,2024-03-28T11:56:38Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,249,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 trait Captures<'a> {}
 impl<T> Captures<'_> for T {}
 
 fn ensure_outlives<'a, X: 'a>(_: X) {}
 fn relate<X>(_: X, _: X) {}
 
 type Opaque<'a> = impl Copy + Captures<'a>;
 fn test<'x>(_: Opaque<'x>) {
 let opaque = None::<Opaque<'_>>; // let's call this lifetime '?1
 let hidden = None::<u8>;
 ensure_outlives::<'x>(opaque); // outlives constraint: '?1: 'x
 relate(opaque, hidden); // defining use: Opaque<'?1> := u8
 }","#![feature(type_alias_impl_trait)]
 trait Captures<'a> {}
 impl<T> Captures<'_> for T {}
 
 fn ensure_outlives<'a, X: 'a>(_: X) {}
 fn relate<X>(_: X, _: X) {}
 
 type Opaque<'a> = impl Copy + Captures<'a>;
 fn test<'x>(_: Opaque<'x>) {
 let opaque = None::<Opaque<'_>>; // let's call this lifetime '?1
 let hidden = None::<u8>;
 ensure_outlives::<'x>(opaque); // outlives constraint: '?1: 'x
 relate(opaque, hidden); // defining use: Opaque<'?1> := u8
 }",,,,,1,Copy,,,#![feature(type_alias_impl_trait)]
113916,"{'T-types', 'A-impl-trait', 'F-type_alias_impl_trait', 'C-bug'}",https://github.com/rust-lang/rust/issues/113916,exclude,,,,,,,"""correctly"" check opaque type lifetimes to be unique params",2023-07-21T10:14:08Z,2024-03-28T11:56:36Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,251,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,,,,,,,,,,,
113840,"{'A-trait-system', 'F-trait_upcasting'}",https://github.com/rust-lang/rust/issues/113840,exclude,,,,,,,possible bug in vtable formation,2023-07-18T18:17:10Z,2023-07-20T22:22:29Z,113856,https://github.com/rust-lang/rust/pull/113856,Refactor vtable encoding and optimize it for the case of multiple marker traits,2023/7/19 12:15,2023/7/20 22:22,2,268,"['util.rs', 'vtable.rs', 'print_vtable_sizes.rs', 'print_vtable_sizes.stdout', 'multiple-markers.rs', 'multiple-markers.stderr']","['compiler/rustc_infer/src/traits', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/traits/object', 'tests/ui/traits/object', 'tests/ui/traits/vtable', 'tests/ui/traits/vtable']",,0,,,,,,,,,,,
113818,"{'A-trait-system', 'T-types', 'A-type-system', 'C-bug'}",https://github.com/rust-lang/rust/issues/113818,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,Error in trait resolution on traits with associated types with generic lifetimes,2023-07-18T09:23:46Z,2024-02-26T16:13:22Z,,,,,,223,,,,,0,,,,,,,,,,,
113796,"{'A-lifetimes', 'requires-nightly', 'A-async-await', 'C-bug', 'A-implied-bounds', 'F-async_fn_in_trait'}",https://github.com/rust-lang/rust/issues/113796,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,4,AFIT no longer seems to play nice with lifetime GATs,2023-07-17T15:00:26Z,2023-07-30T00:41:33Z,113704,https://github.com/rust-lang/rust/pull/113704,Make RPITITs inherit the `assumed_wf_types` of their parent method,2023/7/14 18:42,2023/7/30 0:41,12,268,"['wfcheck.rs', 'cstore_impl.rs', 'encoder.rs', 'mod.rs', 'mod.rs', 'implied_bounds.rs', 'lib.rs', 'async-generics-and-bounds.stderr', 'async-generics.stderr', 'assumed-wf-bounds-in-impl.rs', 'bad-item-bound-within-rpitit.rs', 'bad-item-bound-within-rpitit.stderr', 'wf-bounds.stderr']","['compiler/rustc_hir_analysis/src/check', 'compiler/rustc_metadata/src/rmeta/decoder', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_metadata/src/rmeta', 'compiler/rustc_middle/src/query', 'compiler/rustc_ty_utils/src', 'compiler/rustc_ty_utils/src', 'tests/ui/async-await/in-trait', 'tests/ui/async-await/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait']",,0,"#![allow(incomplete_features)]
 #![feature(async_fn_in_trait)]
 
 trait AsyncLendingIterator {
 type Item<'a>
 where
 Self: 'a;
 
 async fn next(&mut self) -> Option<Self::Item<'_>>;
 }
 
 struct Lend<I>(I);
 impl<I> AsyncLendingIterator for Lend<I> {
 type Item<'a> = &'a I
 where
 Self: 'a;
 
 async fn next(&mut self) -> Option<Self::Item<'_>> {
 todo!()
 }
 }","#![allow(incomplete_features)]
 #![feature(async_fn_in_trait)]
 
 trait AsyncLendingIterator {
 type Item<'a>
 where
 Self: 'a;
 
 async fn next(&mut self) -> Option<Self::Item<'_>>;
 }
 
 struct Lend<I>(I);
 impl<I> AsyncLendingIterator for Lend<I> {
 type Item<'a> = &'a I
 where
 Self: 'a;
 
 async fn next(&mut self) -> Option<Self::Item<'_>> {
 todo!()
 }
 }",,1,,,1,,,,#![feature(async_fn_in_trait)]
113794,"{'I-ICE', 'A-lifetimes', 'requires-nightly', 'T-compiler', 'C-bug', 'F-return_position_impl_trait_in_trait'}",https://github.com/rust-lang/rust/issues/113794,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,2,ICE: rpitit: `item_name: no name for DefPath {..}`,2023-07-17T14:39:24Z,2023-07-29T01:40:49Z,114146,https://github.com/rust-lang/rust/pull/114146,Skip reporting item name when checking RPITIT GAT's associated type bounds hold,2023/7/27 22:21,2023/7/29 1:40,11,129,"['note.rs', 'assoc.rs', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'bad-item-bound-within-rpitit.rs', 'bad-item-bound-within-rpitit.stderr']","['compiler/rustc_infer/src/infer/error_reporting', 'compiler/rustc_ty_utils/src', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait']",,0,"#![feature(return_position_impl_trait_in_trait)]
 
 trait Foo {
 fn bar<'other: 'a>() -> impl Sized + 'a {}
 }","#![feature(return_position_impl_trait_in_trait)]
 
 trait Foo {
 fn bar<'other: 'a>() -> impl Sized + 'a {}
 }",,,,,1,,,,#![feature(return_position_impl_trait_in_trait)]
113721,"{'A-lifetimes', 'A-GATs', 'F-generic_associated_types_extended', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/113721,Not reproducible anymore,,,,,,,GAT/extended: wrong lifetime analysis,2023-07-15T12:03:40Z,2024-12-07T08:33:36Z,,,,,,510,,,,,0,,,,,,,,,,,
113689,"{'I-ICE', 'A-impl-trait', 'T-compiler', 'regression-from-stable-to-beta'}",https://github.com/rust-lang/rust/issues/113689,valid,members,1. Crash-Front-end Panic,valid,2. HIR-trait solving,1. Type-Opaque Types,1,ICE when trait resolution defines opaque types,2023-07-14T12:48:02Z,2023-07-19T07:27:43Z,113690,https://github.com/rust-lang/rust/pull/113690,"allow opaques to be defined by trait queries, again",2023/7/14 12:58,2023/7/19 7:27,4,42,"['infer.rs', 'defined-by-trait-resolution.rs', 'defined-by-user-annotation.rs']","['compiler/rustc_trait_selection/src', 'tests/ui/impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"fn returns_u8(_: impl Fn() -> u8) {}
 fn foo() -> impl Sized {
 returns_u8(foo);
 0u8
 }","fn returns_u8(_: impl Fn() -> u8) {}
 fn foo() -> impl Sized {
 returns_u8(foo);
 0u8
 }",,,,,,Sized,,,
113664,"{'T-compiler', 'requires-nightly', 'A-MIR'}",https://github.com/rust-lang/rust/issues/113664,question,,,,,,,Why isn't the `unsafe` keyword necessary for custom MIR?,2023-07-13T17:44:15Z,2023-07-13T19:21:27Z,,,,,,0,,,,,0,,,,,,,,,,,
113619,"{'F-type_alias_impl_trait', 'I-unsound', 'T-types', 'requires-nightly', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/113619,valid,developer,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,1,Type alias impl trait resolves to different concrete types,2023-07-12T12:02:13Z,2023-07-18T20:49:30Z,113636,https://github.com/rust-lang/rust/pull/113636,Restrict recursive opaque type check,2023/7/13 0:43,2023/7/18 20:49,6,107,"['writeback.rs', 'recursive-tait-conflicting-defn-2.rs', 'recursive-tait-conflicting-defn-2.stderr', 'recursive-tait-conflicting-defn.rs', 'recursive-tait-conflicting-defn.stderr']","['compiler/rustc_hir_typeck/src', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 
 trait Test {}
 
 struct A;
 
 impl Test for A {}
 
 struct B<T> {
 inner: T,
 }
 
 impl<T: Test> Test for B<T> {}
 
 type TestImpl = impl Test;
 fn test() -> TestImpl {
 A
 }
 
 fn make_option() -> Option<TestImpl> {
 Some(test())
 }
 
 fn make_option2() -> Option<TestImpl> {
 let inner = make_option().unwrap();
 
 B { inner }.into()
 }","#![feature(type_alias_impl_trait)]
 
 trait Test {}
 
 struct A;
 
 impl Test for A {}
 
 struct B<T> {
 inner: T,
 }
 
 impl<T: Test> Test for B<T> {}
 
 type TestImpl = impl Test;
 fn test() -> TestImpl {
 A
 }
 
 fn make_option() -> Option<TestImpl> {
 Some(test())
 }
 
 fn make_option2() -> Option<TestImpl> {
 let inner = make_option().unwrap();
 
 B { inner }.into()
 }",,,,,,,,,#![feature(type_alias_impl_trait)]
113594,"{'I-ICE', 'F-type_alias_impl_trait', 'A-impl-trait', 'requires-nightly', 'T-compiler', 'C-bug', 'I-monomorphization'}",https://github.com/rust-lang/rust/issues/113594,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,1. Type-Opaque Types,6,"TAIT: ""open drop from non-ADT""",2023-07-11T23:48:06Z,2023-09-29T13:52:09Z,115759,https://github.com/rust-lang/rust/pull/115759,Reveal opaque types before drop elaboration,2023/9/11 15:03,2023/9/29 13:52,79,260,"['base.rs', 'value_and_place.rs', 'place.rs', 'projection.rs', 'validate.rs', 'syntax.rs', 'elaborate_drops.rs', 'elaborate_drops.rs', 'lib.rs', 'reveal_all.rs', 'function_interfaces.rs', 'async_await.b-{closure#0}.generator_resume.0.mir', 'issue_78442.bar.RevealAll.panic-abort.diff', 'issue_78442.bar.RevealAll.panic-unwind.diff', 'indirect-recursion-issue-112047.stderr', 'cross_inference_pattern_bug.rs', 'destructure_tait-ice-113594.rs', 'destructure_tait-layout_of-ice-113594.rs', 'indirect-recursion-issue-112047.stderr']","['compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_dataflow/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'tests/incremental/hashes', 'tests/mir-opt/building', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/ui/async-await/in-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 
 pub struct Foo {
 /// This type must have nontrivial drop glue
 field: String,
 }
 
 pub type Tait = impl Sized;
 
 pub fn ice_cold(beverage: Tait) {
 // Must destructure at least one field of `Foo`
 let Foo { field } = beverage;
 _ = field;
 }","#![feature(type_alias_impl_trait)]
 
 pub struct Foo {
 /// This type must have nontrivial drop glue
 field: String,
 }
 
 pub type Tait = impl Sized;
 
 pub fn ice_cold(beverage: Tait) {
 // Must destructure at least one field of `Foo`
 let Foo { field } = beverage;
 _ = field;
 }",,,,,,Sized,,,#![feature(type_alias_impl_trait)]
113537,"{'A-trait-system', 'T-compiler', 'A-variance', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/113537,exclude,,,,,,,Lifetime should be invariant WRT associated type?,2023-07-10T13:52:15Z,2023-07-12T13:57:35Z,,,,,,2,,,,,0,,,,,,,,,,,
113407,"{'I-slow', 'A-mir-opt', 'A-floating-point', 'A-const-prop'}",https://github.com/rust-lang/rust/issues/113407,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,6. Compatibility Issues,6,Subnormal f64 to f32 cast is incorrect in CTFE,2023-07-06T12:48:42Z,2023-07-26T23:09:35Z,113843,https://github.com/rust-lang/rust/pull/113843,Replace in-tree `rustc_apfloat` with the new version of the crate,2023/7/18 19:58,2023/7/26 23:09,20,7823,"['dep5', 'Cargo.lock', 'NCSA.txt', 'Cargo.toml', 'ieee.rs', 'lib.rs', 'ppc.rs', 'ieee.rs', 'ppc.rs', 'Cargo.toml', 'Cargo.toml', 'Cargo.toml', 'foreign_items.rs', 'deps.rs', 'style.rs', 'apfloat-f64-roundtrip.rs', 'apfloat-remainder-regression.rs', 'apfloat-modulo-wrong.rs', 'triagebot.toml']","['.reuse', '', 'LICENSES', 'compiler/rustc_apfloat', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/tests', 'compiler/rustc_apfloat/tests', 'compiler/rustc_const_eval', 'compiler/rustc_middle', 'compiler/rustc_mir_build', 'src/tools/miri/src/shims', 'src/tools/tidy/src', 'src/tools/tidy/src', 'tests/ui/const_prop', 'tests/ui/const_prop', 'tests/ui/numbers-arithmetic', '']",,1,"pub fn main() {
 let f = f64::from_bits(0x19873cc2) as f32;
 println!(""{:x}"", f.to_bits());
 println!(""{}"", f == 0.);
 }","pub fn main() {
 let f = f64::from_bits(0x19873cc2) as f32;
 println!(""{:x}"", f.to_bits());
 println!(""{}"", f == 0.);
 }",,,,,,,"-Zmir-opt-level=X
-Copt-level=X",rustc -Zmir-opt-level=1 -Copt-level=3 repro.rs && ./repro,
113278,"{'F-type_alias_impl_trait', 'I-unsound', 'A-impl-trait', 'T-types', 'requires-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/113278,valid,developer,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,4,opaque type wf check anchor usage is unsound,2023-07-03T08:49:37Z,2023-07-26T00:41:45Z,113661,https://github.com/rust-lang/rust/pull/113661,Double check that hidden types match the expected hidden type,2023/7/13 16:26,2023/7/26 0:41,22,272,"['opaque_types.rs', 'compare_types.rs', 'check.rs', 'eval_ctxt.rs', 'ui_tests.rs', 'hidden_type_mismatch.rs', 'hidden_type_mismatch.stderr', 'nested-rpit-with-lifetimes.rs']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_const_eval/src/util', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_trait_selection/src/solve', 'src/tools/tidy/src', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(trivial_bounds, type_alias_impl_trait)]
 mod sus {
 pub type Sep = impl Sized;
 pub fn define_sep() -> Sep {
 String::new()
 }
 
 pub type Tait = impl Mk;
 
 pub trait Mk: Proj {
 fn mk() -> <Self as Proj>::Assoc;
 }
 
 impl<T> Mk for T
 where
 T: Proj<Assoc = ()>,
 {
 fn mk() -> <T as Proj>::Assoc {
 ()
 }
 }
 
 pub trait Proj {
 type Assoc;
 }
 impl Proj for () {
 type Assoc = Sep;
 }
 
 fn define() -> Tait
 where
 (): Proj<Assoc = ()>,
 {
 }
 }
 
 fn main() {
 let _ = <sus::Tait as sus::Mk>::mk();
 }","#![feature(trivial_bounds, type_alias_impl_trait)]
 
 mod sus {
 use super::*;
 pub type Sep = impl Sized + std::fmt::Display;
 pub fn mk_sep() -> Sep {
 String::from(""hello"")
 }
 
 pub trait Proj {
 type Assoc;
 }
 impl Proj for () {
 type Assoc = sus::Sep;
 }
 
 pub struct Bar<T: Proj> {
 pub inner: <T as Proj>::Assoc,
 pub _marker: T,
 }
 impl<T: Proj> Clone for Bar<T> {
 fn clone(&self) -> Self {
 todo!()
 }
 }
 impl<T: Proj<Assoc = i32> + Copy> Copy for Bar<T> {}
 pub type Tait = impl Copy + From<Bar<()>> + Into<Bar<()>>;
 pub fn define_tait() -> Tait
 where
 (): Proj<Assoc = i32>,
 {
 Bar {
 inner: 1i32,
 _marker: (),
 }
 }
 }
 
 fn copy_tait(x: sus::Tait) -> (sus::Tait, sus::Tait) {
 (x, x)
 }
 
 fn main() {
 let bar = sus::Bar {
 inner: sus::mk_sep(),
 _marker: (),
 };
 let (y, z) = copy_tait(bar.into()); // copy a string
 drop(y.into()); // drop one instance
 println!(""{}"", z.into().inner); // print the other
 }",,,,1,,"Sized
Display",,,"#![feature(trivial_bounds, type_alias_impl_trait)]"
112828,"{'I-ICE', 'P-medium', 'T-rustdoc', 'E-needs-test', 'T-compiler', 'A-synthetic-impls', 'C-bug', 'regression-from-stable-to-stable', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/112828,Not reproducible anymore,developer,1. Crash-Front-end Panic,,,,,rustdoc: ICE: synthetic auto trait impls: `unable to fulfill trait [鈥 for [鈥` due to ambiguity involving to unconstrained param in impl,2023-06-20T05:34:53Z,2024-04-02T23:24:54Z,123348,https://github.com/rust-lang/rust/pull/123348,rustdoc: add a couple of regression tests,2024/4/2 1:10,2024/4/2 23:24,287,85,"['const-in-super-trait-and-item-bound.rs', 'projections-in-super-trait-bound-unsatisfied.rs', 'projections-in-super-trait-bound-unsatisfied.stderr', 'unconstrained-param-in-impl-ambiguity.rs', 'unconstrained-param-in-impl-ambiguity.stderr']","['tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls']",P-medium,0,,,,,,,,,,,
112604,"{'I-ICE', 'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/112604,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Borrow Check,4. Basic syntax&structure,1,ICE: broken MIR: equate_inputs_and_outputs: NoSolution,2023-06-14T02:08:43Z,2023-06-16T01:55:33Z,112654,https://github.com/rust-lang/rust/pull/112654,normalize closure output in equate_inputs_and_outputs,2023/6/15 12:59,2023/6/16 1:55,1,65,"['input_output.rs', 'issue-112604-closure-output-normalize.rs']","['compiler/rustc_borrowck/src/type_check', 'tests/ui/nll']",,0,,"trait Trait {
 type Gat<'lt>;
 }
 
 impl Trait for () {
 type Gat<'lt> = ();
 }
 
 fn dyn_hoops<T: Trait>(_: T) -> *const dyn FnOnce(T::Gat<'_>) {
 loop {}
 }
 
 fn main() {
 let _ = || { dyn_hoops(()) };
 }",,,1,,,FnOnce,,,
112573,"{'T-lang', 'F-associated_type_bounds', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/112573,exclude,,,,,,,Should associated type bounds on supertraits be implied?,2023-06-13T00:44:21Z,2023-06-29T02:42:34Z,112629,https://github.com/rust-lang/rust/pull/112629,Make associated type bounds in supertrait position implied,2023/6/14 18:43,2023/6/29 2:42,16,243,"['bounds.rs', 'mod.rs', 'item_bounds.rs', 'predicates_of.rs', 'implied-in-supertrait.rs', 'rtn-implied-in-supertrait.rs', 'rtn-implied-in-supertrait.stderr']","['compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'tests/ui/associated-type-bounds', 'tests/ui/async-await/return-type-notation', 'tests/ui/async-await/return-type-notation']",,0,,,,,,,,,,,
112564,"{'T-opsem', 'A-MIR'}",https://github.com/rust-lang/rust/issues/112564,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,4,MIR: Do we allow accesing a moved place?,2023-06-12T16:09:01Z,2023-07-12T12:11:07Z,113569,https://github.com/rust-lang/rust/pull/113569,miri: protect Move() function arguments during the call,2023/7/11 10:25,2023/7/12 12:11,29,908,"['machine.rs', 'eval_context.rs', 'intern.rs', 'machine.rs', 'mod.rs', 'operand.rs', 'place.rs', 'terminator.rs', 'visitor.rs', 'syntax.rs', 'const_prop.rs', 'dataflow_const_prop.rs', 'rust-version', 'mod.rs', 'diagnostics.rs', 'mod.rs', 'mod.rs', 'perms.rs', 'lib.rs', 'machine.rs', 'mod.rs', 'arg_inplace_mutate.rs', 'arg_inplace_mutate.stack.stderr', 'arg_inplace_mutate.tree.stderr', 'arg_inplace_observe_after.rs', 'arg_inplace_observe_after.stderr', 'arg_inplace_observe_during.none.stderr', 'arg_inplace_observe_during.rs', 'arg_inplace_observe_during.stack.stderr', 'arg_inplace_observe_during.tree.stderr', 'return_pointer_aliasing.none.stderr', 'return_pointer_aliasing.rs', 'return_pointer_aliasing.stack.stderr', 'return_pointer_aliasing.tree.stderr', 'dyn_alignment.rs', 'dyn_alignment.stderr', 'return_place_on_heap.rs']","['compiler/rustc_const_eval/src/const_eval', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'src/tools/miri', 'src/tools/miri/src/borrow_tracker', 'src/tools/miri/src/borrow_tracker/stacked_borrows', 'src/tools/miri/src/borrow_tracker/stacked_borrows', 'src/tools/miri/src/borrow_tracker/tree_borrows', 'src/tools/miri/src/borrow_tracker/tree_borrows', 'src/tools/miri/src', 'src/tools/miri/src', 'src/tools/miri/src/shims', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/function_calls', 'src/tools/miri/tests/fail/unaligned_pointers', 'src/tools/miri/tests/fail/unaligned_pointers', 'src/tools/miri/tests/pass/function_calls']",,0,"#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 pub fn dump_var(val0: u32) {
 println!(""{val0}"");
 }
 
 pub struct Adt52 {
 fld1: (u32, usize, u16),
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn14() {
 mir! {
 let fld1: (u32, usize, u16);
 let non_copy: Adt52;
 let p: *const u32;
 let i: u32;
 let unit: ();
 {
 fld1 = (0, 0_usize, 0);
 non_copy = Adt52 {fld1};
 p = core::ptr::addr_of!(non_copy.fld1.0);
 Call(unit, bb13, fn15(Move(non_copy)))
 }
 bb13 = {
 i = *p;
 Call(unit, bb18, dump_var(i))
 }
 bb18 = {
 Return()
 }
 
 }
 }
 pub fn fn15(mut x: Adt52) {
 x.fld1 = (1, 0, 0);
 }
 pub fn main() {
 fn14();
 }","#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 
 pub fn dump_var(val0: u32) {
 println!(""{val0}"");
 }
 
 pub struct Adt52 {
 fld1: (u32, usize, u16),
 }
 
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 fn fn14() {
 mir! {
 let fld1: (u32, usize, u16);
 let non_copy: Adt52;
 let p: *const u32;
 let i: u32;
 let unit: ();
 {
 fld1 = (0, 0_usize, 0);
 non_copy = Adt52 {fld1};
 p = core::ptr::addr_of!(non_copy.fld1.0);
 Call(unit, bb13, fn15(Move(non_copy)))
 }
 bb13 = {
 i = *p;
 Call(unit, bb18, dump_var(i))
 }
 bb18 = {
 Return()
 }
 
 }
 }
 pub fn fn15(mut x: Adt52) {
 x.fld1 = (1, 0, 0);
 }
 pub fn main() {
 fn14();
 }",1,,,,,,"-Zmir-opt-level=X
-Copt-level=X",rustc -Zmir-opt-level=1 -Copt-level=3 repro.rs && ./repro,"#![feature(custom_mir, core_intrinsics)]"
112453,"{'A-impl-trait', 'C-cleanup', 'E-medium'}",https://github.com/rust-lang/rust/issues/112453,exclude,,,,,,,change `DefiningAnchor::Bind` to a list of opaques,2023-06-09T09:05:38Z,2024-04-12T06:48:35Z,,,,,,307,,,,,0,,,,,,,,,,,
112250,"{'I-ICE', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/112250,valid,developer,1. Crash-Front-end Panic,valid,2. HIR-trait solving,1. Type-Trait & Bound,2,ICE: compiler/rustc_borrowck/src/universal_regions.rs:882:36: cannot convert `RePlaceholder(Placeholder { bound: BoundRegion { kind: BrNamed})` to a region vid,2023-06-03T17:31:45Z,2023-11-17T14:26:17Z,112422,https://github.com/rust-lang/rust/pull/112422,ignore implied bounds with placeholders,2023/6/8 11:54,2023/11/17 14:26,166,84,"['free_region_relations.rs', 'outlives_bounds.rs', 'normalization-placeholder-leak.fail.stderr', 'normalization-placeholder-leak.rs']","['compiler/rustc_borrowck/src/type_check', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds']",,0,,"trait Trait {
 type Ty<'a> where Self: 'a;
 }
 
 impl<T> Trait for T {
 type Ty<'a> = () where Self: 'a;
 }
 
 struct Foo<T: Trait>(T)
 where
 for<'a> T::Ty<'a>: Sized;
 
 // implied bound: 'static: placeholder('a)
 fn test(_: Foo<&'static str>) {}",,,,,,Sized,,,
112242,"{'I-ICE', 'T-rustdoc', '-Znormalize-docs', 'E-needs-test', 'T-compiler', 'A-synthetic-impls', 'C-bug', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/112242,Not reproducible anymore,,1. Crash-Front-end Panic,,,,,"rustdoc: ICE: synthetic auto trait impls: `index out of bounds, snapshot vec` using `-Znormalize-docs`",2023-06-03T14:59:27Z,2024-04-02T23:24:55Z,,,,,,304,,,,,0,,,,,,,,,,,
112225,"{'P-high', 'A-inference', 'T-compiler', 'A-async-await', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/112225,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,4. Basic syntax&structure,1,1.70.0: Type inference no longer works in conjunction with Glib's clone macro,2023-06-02T21:20:00Z,2023-06-05T01:33:55Z,112266,https://github.com/rust-lang/rust/pull/112266,,,,2,66,"['checks.rs', 'issue-112225-1.rs', 'issue-112225-2.rs', 'issue-112225-2.stderr']","['compiler/rustc_hir_typeck/src/fn_ctxt', 'tests/ui/async-await/issues', 'tests/ui/async-await/issues', 'tests/ui/async-await/issues']",P-high,0,"use futures::Future;
 use glib::clone;
 
 fn main() {
 let obj = String::new();
 do_async(
 // just using `compound()` without `async` block works
 async { compound().await },
 clone!(@strong obj => move |info| if let Ok(info) = info {
 // removing this line makes the code compile
 println!(""{:?}"", info.t);
 }),
 );
 }
 
 struct Compound {
 t: i32
 }
 
 // Just returning a simple type like i32 makes the code compile
 async fn compound() -> Result<Compound, ()> {
 Err(())
 }
 
 async fn do_async<R, Fut, F>(tokio_fut: Fut, glib_closure: F)
 where
 R: Send + 'static,
 Fut: Future<Output = R> + Send + 'static,
 F: FnOnce(R) + 'static,
 {
 glib_closure(tokio_fut.await);
 }","use core::future::Future;
 
 fn main() {
 do_async(
 async { (0,) },
 {
 // closure must be inside block
 |info| println!(""{:?}"", info.0)
 },
 );
 }
 
 fn do_async<R, Fut, F>(tokio_fut: Fut, glib_closure: F)
 where
 Fut: Future<Output = R>,
 F: FnOnce(R),
 {
 }",1,1,,,1,FnOnce,,,
112087,"{'T-compiler', 'fixed-by-polonius', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/112087,duplicate,,,,,,,Borrow checker thinks variable lives longer than it actually lives,2023-05-29T21:11:28Z,2024-01-26T00:25:22Z,,,,,,241,,,,,0,,,,,,,,,,,
111935,"{'T-types', 'A-impl-trait', 'P-high', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/111935,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,3,RPIT allows defining use with invalid args,2023-05-25T07:17:30Z,2024-03-28T11:56:37Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,308,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-high,0,"// Lt indirection is necessary to make the lifetime of the function late-bound,
 // in order to bypass some other bugs.
 type Lt<'lt> = Option<*mut &'lt ()>;
 
 // PASS!
 #[cfg(case1)]
 fn foo<'a>(_: Lt<'a>) -> impl Sized + 'a {
 let _: () = foo(Lt::<'static>::None);
 // invalid defining use: Opaque<'static> := ()
 }
 
 // ICE!
 #[cfg(case2)]
 fn foo<'a>(_: Lt<'a>) -> impl Sized + 'a {
 let _: () = foo(Lt::<'_>::None);
 // invalid defining use: Opaque<'_> := ()
 }
 
 // PASS!
 #[cfg(case3)]
 fn foo<'a, 'b>(_: Lt<'a>, _: Lt<'b>) -> impl Sized + 'a + 'b {
 let _: () = foo(Lt::<'a>::None, Lt::<'a>::None);
 // invalid defining use: Opaque<'a, 'a> := ()
 // because of the use of equal lifetimes in args
 }","// Lt indirection is necessary to make the lifetime of the function late-bound,
 // in order to bypass some other bugs.
 type Lt<'lt> = Option<*mut &'lt ()>;
 
 // PASS!
 #[cfg(case1)]
 fn foo<'a>(_: Lt<'a>) -> impl Sized + 'a {
 let _: () = foo(Lt::<'static>::None);
 // invalid defining use: Opaque<'static> := ()
 }
 
 // ICE!
 #[cfg(case2)]
 fn foo<'a>(_: Lt<'a>) -> impl Sized + 'a {
 let _: () = foo(Lt::<'_>::None);
 // invalid defining use: Opaque<'_> := ()
 }
 
 // PASS!
 #[cfg(case3)]
 fn foo<'a, 'b>(_: Lt<'a>, _: Lt<'b>) -> impl Sized + 'a + 'b {
 let _: () = foo(Lt::<'a>::None, Lt::<'a>::None);
 // invalid defining use: Opaque<'a, 'a> := ()
 // because of the use of equal lifetimes in args
 }",,,,,1,,,,
111906,"{'I-ICE', 'glacier', 'A-impl-trait', 'P-high', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/111906,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Borrow Check,1. Type-Opaque Types,3,ICE: opaque type with non-universal region args,2023-05-24T13:03:50Z,2024-03-28T11:56:35Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,308,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-high,0,"trait Trait<'a, 'b> {}
 impl<'a, 'b, T> Trait<'a, 'b> for T {}
 
 fn foo<'a: 'a, 'b: 'b>() -> impl Trait<'a, 'b> {
 let _: *mut &'a () = foo::<'a, 'b>();
 let _: *mut &'b () = foo::<'a, 'b>();
 loop {}
 }","fn foo<'a: 'a>() -> impl Sized + 'a {
 let _: *mut &'a () = foo::<'a>();
 loop {}
 }",,,,,1,Sized,,,
111662,"{'NLL-diagnostics', 'A-lifetimes', 'A-closures', 'A-NLL', 'C-bug', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/111662,duplicate,,,,,,,Closures which return a reference that depends on an argument unconditionally fail borrow checking,2023-05-16T21:53:20Z,2024-03-01T10:21:07Z,,,,,,289,,,,,0,,,,,,,,,,,
111591,{'A-type-system'},https://github.com/rust-lang/rust/issues/111591,Not a bug,,,,,,,[Type manipulation]Is this by design or bug? ,2023-05-15T12:15:06Z,2023-05-31T07:43:52Z,,,,,,15,,,,,0,,,,,,,,,,,
111509,"{'A-mir-opt', 'A-MIR'}",https://github.com/rust-lang/rust/issues/111509,exclude,,,,,,,Tracking issue for ConstProp MIR opt,2023-05-12T14:53:47Z,2024-01-03T21:33:26Z,,,,,,236,,,,,0,,,,,,,,,,,
111502,"{'A-mir-opt', 'T-opsem'}",https://github.com/rust-lang/rust/issues/111502,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Mutating through addr_of produces LLVM IR with UB,2023-05-12T11:05:26Z,2023-05-14T13:19:32Z,111517,https://github.com/rust-lang/rust/pull/111517,allow mutating function args through `&raw const`,2023/5/12 21:35,2023/5/14 13:19,2,68,"['deduce_param_attrs.rs', 'addr-of-mutate.rs']","['compiler/rustc_mir_transform/src', 'tests/codegen']",,0,"pub fn first() -> bool {
 let mut a = (0., true);
 let b = (0., false);
 let a_ptr_and_b = (core::ptr::addr_of_mut!(a), b);
 let got = unsafe { second(a_ptr_and_b.0, a_ptr_and_b, true, true) };
 return got;
 }
 
 unsafe fn second(
 a_ptr: *mut (f32, bool),
 a_ptr_and_b: (*mut (f32, bool), (f64, bool)),
 t: bool,
 t_copy: bool,
 ) -> bool {
 let b_bool_ptr = core::ptr::addr_of!(a_ptr_and_b.1 .1) as *mut bool;
 let t_or_t = t | t_copy;
 let t_xor_t = t ^ t_copy;
 (*b_bool_ptr) = t_or_t ^ t_xor_t;
 let unused = a_ptr_and_b;
 return a_ptr_and_b.1.1 == (*a_ptr).1;
 }
 
 pub fn main() {
 println!(""{}"", first());
 }","pub fn first() -> bool {
 let mut a = (0., true);
 let b = (0., false);
 let a_ptr_and_b = (core::ptr::addr_of_mut!(a), b);
 let got = unsafe { second(a_ptr_and_b.0, a_ptr_and_b, true, true) };
 return got;
 }
 
 unsafe fn second(
 a_ptr: *mut (f32, bool),
 a_ptr_and_b: (*mut (f32, bool), (f64, bool)),
 t: bool,
 t_copy: bool,
 ) -> bool {
 let b_bool_ptr = core::ptr::addr_of!(a_ptr_and_b.1 .1) as *mut bool;
 let t_or_t = t | t_copy;
 let t_xor_t = t ^ t_copy;
 (*b_bool_ptr) = t_or_t ^ t_xor_t;
 let unused = a_ptr_and_b;
 return a_ptr_and_b.1.1 == (*a_ptr).1;
 }
 
 pub fn main() {
 println!(""{}"", first());
 }",1,,,,,,"-Zmir-opt-level=X
-Copt-level=X",rustc -Zmir-opt-level=0 -C opt-level=3 repro.rs && ./repro,
111435,"{'A-trait-system', 'A-associated-items', 'T-types', 'A-higher-ranked', 'C-bug'}",https://github.com/rust-lang/rust/issues/111435,Not reproducible anymore,,,,,,,hrtb on associated type not satisfied ,2023-05-10T17:30:39Z,2024-06-12T15:26:03Z,,,,,,398,,,,,0,,,,,,,,,,,
111422,"{'I-unsound', 'A-mir-opt', 'requires-nightly'}",https://github.com/rust-lang/rust/issues/111422,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Miri reports UB with opt-level 4 in code that should not have UB,2023-05-10T07:38:23Z,2023-05-12T10:19:22Z,111441,https://github.com/rust-lang/rust/pull/111441,Verify copies of mutable pointers in 2 stages in ReferencePropagation,2023/5/10 18:50,2023/5/12 10:19,2,264,"['ref_prop.rs', 'reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff', 'reference_prop.read_through_raw.ReferencePropagation.diff', 'reference_prop.rs', 'reference_prop.unique_with_copies.ReferencePropagation.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,,"#![crate_type = ""lib""]
 
 pub fn mut_raw_then_mut_shr() -> (i32, i32) {
 let mut x = 2;
 let xref = &mut x;
 let xraw = &mut *xref as *mut _;
 let xshr = &*xref;
 let a = *xshr;
 unsafe {
 *xraw = 4;
 }
 (a, x)
 }",,,,,,,"+master
-Zdump-mir=all
-Zmir-opt-level=X
-Zmir-enable-passes=+X
Cdebug-assertions=no",rustc +master -Zdump-mir=all test.rs -Zmir-opt-level=0 -Zmir-enable-passes=+ReferencePropagation -Cdebug-assertions=no,
111355,"{'F-unsized_fn_params', 'requires-nightly', 'A-MIR', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/111355,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Inlining introduces unsized temporaries,2023-05-08T14:22:49Z,2023-05-21T14:14:26Z,111424,https://github.com/rust-lang/rust/pull/111424,Don't inline functions with unsized args,2023/5/10 10:24,2023/5/21 14:14,12,80,"['inline.rs', 'unsized_argument.caller.Inline.diff', 'unsized_argument.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/inline', 'tests/mir-opt/inline']",,0,"#![feature(unsized_fn_params)]
 use std::any::Any;
 use std::hint::black_box;
 
 #[repr(align(1024))]
 #[allow(dead_code)]
 struct A(u8);
 
 impl A {
 fn f(&self) {
 assert_eq!(0, black_box(self as *const A as usize) % 1024);
 }
 }
 
 #[inline(always)]
 pub fn f(a: dyn Any) {
 a.downcast_ref::<A>().unwrap().f()
 }
 
 pub fn main() {
 let a = Box::new(A(0)) as Box<dyn Any>;
 f(*a);
 }","#![feature(unsized_fn_params)]
 use std::any::Any;
 use std::hint::black_box;
 
 #[repr(align(1024))]
 #[allow(dead_code)]
 struct A(u8);
 
 impl A {
 fn f(&self) {
 assert_eq!(0, black_box(self as *const A as usize) % 1024);
 }
 }
 
 #[inline(always)]
 pub fn f(a: dyn Any) {
 a.downcast_ref::<A>().unwrap().f()
 }
 
 pub fn main() {
 let a = Box::new(A(0)) as Box<dyn Any>;
 f(*a);
 }",,,1,1,,,,,#![feature(unsized_fn_params)]
111092,"{'T-types', 'E-hard', 'T-compiler', 'C-cleanup', 'A-type-system'}",https://github.com/rust-lang/rust/issues/111092,exclude,,,,,,,merge generalizer impls,2023-05-02T11:18:45Z,2023-05-16T01:07:40Z,111221,https://github.com/rust-lang/rust/pull/111221,Combine three generalizer implementations,2023/5/4 21:21,2023/5/16 1:07,13,1458,"['combine.rs', 'equate.rs', 'mod.rs', 'generalize.rs', 'mod.rs', 'mod.rs', 'test_type_match.rs', 'sub.rs', '_match.rs', 'mod.rs', 'relate.rs', 'universe-error1.rs', 'universe-error1.stderr']","['compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/error_reporting', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/nll_relate', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders']",,0,,,,,,,,,,,
110947,"{'I-unsound', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/110947,valid,Rustlantis,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,2. Ownership-Borrow&Move,1,`-Zmir-opt-level=2` misoptimises valid code under Tree Borrows,2023-04-28T13:47:51Z,2023-05-05T07:30:48Z,110954,https://github.com/rust-lang/rust/pull/110954,Reject borrows of projections in ConstProp.,2023/4/28 16:58,2023/5/5 7:30,6,89,"['const_prop.rs', 'address_of_pair.fn0.ConstProp.diff', 'address_of_pair.rs', 'const_prop_miscompile.bar.ConstProp.diff', 'const_prop_miscompile.foo.ConstProp.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/mir-opt']",,0,"#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn0() -> bool {
 mir! {
 type RET = bool;
 let pair: (i8, bool);
 let ptr: *mut bool;
 {
 pair = (1, false);
 ptr = core::ptr::addr_of_mut!(pair.1);
 RET = pair.1 <= (*ptr);
 pair = (1, false);
 (*ptr) = RET | RET;
 RET = !pair.1;
 Return()
 }
 
 }
 }
 pub fn main() {
 println!(""{}"", fn0());
 }","#![feature(custom_mir, core_intrinsics)]
 extern crate core;
 use core::intrinsics::mir::*;
 #[custom_mir(dialect = ""runtime"", phase = ""initial"")]
 pub fn fn0() -> bool {
 mir! {
 type RET = bool;
 let pair: (i8, bool);
 let ptr: *mut bool;
 {
 pair = (1, false);
 ptr = core::ptr::addr_of_mut!(pair.1);
 RET = pair.1 <= (*ptr);
 pair = (1, false);
 (*ptr) = RET | RET;
 RET = !pair.1;
 Return()
 }
 
 }
 }
 pub fn main() {
 println!(""{}"", fn0());
 }",1,,,,,,-Zmir-opt-level=X,rustc -Zmir-opt-level=2 repro.rs && ./repro,"#![feature(custom_mir, core_intrinsics)]"
110934,"{'A-lifetimes', 'E-needs-test', 'A-resolve', 'E-easy', 'F-inline_const'}",https://github.com/rust-lang/rust/issues/110934,exclude,,,,,,,inline const test for elided lifetimes being infer vars,2023-04-28T08:08:47Z,2023-06-02T02:36:04Z,112147,https://github.com/rust-lang/rust/pull/112147,add inline-const test for elided lifetimes being infer vars,2023/5/31 17:17,2023/6/2 2:36,34,11,['elided-lifetime-being-infer-vars.rs'],['tests/ui/inline-const'],,0,,,,,,,,,,,
110933,"{'A-lifetimes', 'E-needs-test', 'F-associated_const_equality', 'A-resolve', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/110933,valid,members,2. Correctness Issues-Completeness Issues,,1. AST,2. Ownership-Lifetime,1,assoc const equality anon consts have elided lifetimes set to `'static`,2023-04-28T08:03:15Z,2023-06-26T00:28:29Z,110984,https://github.com/rust-lang/rust/pull/1109840984,Add a regression test for #110933,2023/6/25 14:03,2023/6/26 0:28,58,20,['issue-110933.rs'],['tests/ui/associated-consts'],,0,"#![feature(associated_const_equality)]
 
 trait Trait {
 const ASSOC: usize;
 }
 
 fn foo<T: Trait<ASSOC = {
 let a = 10_usize;
 let b: &'_ usize = &a;
 *b
 }>>() {
 
 }","#![feature(associated_const_equality)]
 
 trait Trait {
 const ASSOC: usize;
 }
 
 fn foo<T: Trait<ASSOC = {
 let a = 10_usize;
 let b: &'_ usize = &a;
 *b
 }>>() {
 
 }",,,,,1,,,,#![feature(associated_const_equality)]
110931,"{'A-const-generics', 'C-bug', 'A-resolve', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/110931,valid,members,2. Correctness Issues-Completeness Issues,,1. AST,2. Ownership-Lifetime,1,const arguments have `'_` resolved to `'static` instead of infer vars,2023-04-28T07:52:37Z,2023-04-30T03:45:16Z,110984,https://github.com/rust-lang/rust/pull/110984,Do not resolve anonymous lifetimes in consts to be static.,2023/4/29 10:33,2023/4/30 3:45,1,24,"['late.rs', 'elided-lifetime-in-anon-const.rs']","['compiler/rustc_resolve/src', 'tests/ui/lifetimes']",,0,"fn foo() -> [(); {
 let a = 10_usize;
 let b: &'_ usize = &a;
 *b
 }] {
 
 }","fn foo() -> [(); {
 let a = 10_usize;
 let b: &'_ usize = &a;
 *b
 }] {
 
 }",,,,,1,,,,
110781,"{'I-unsound', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/110781,exclude,,,,,,,UB: edition 2015/18 with -Zmir-opt-level=2: destructing tuple inside closure,2023-04-24T20:18:27Z,2023-05-04T20:49:20Z,110826,https://github.com/rust-lang/rust/pull/110826,Make PlaceMention a non-mutating use.,2023/4/25 20:18,2023/5/4 20:49,10,59,"['def_use.rs', 'mod.rs', 'analyze.rs', 'visit.rs', 'liveness.rs', 'const_prop.rs', 'place_mention.main.DeadStoreElimination.diff', 'place_mention.rs']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination']",,0,,,,,,,,,,,
110726,"{'I-ICE', 'glacier', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/110726,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,1. Type-Opaque Types,3,ICE with unused lifetime on recursive RPIT,2023-04-23T16:11:05Z,2024-03-28T11:56:37Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,339,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"fn foo<'a>() -> impl Sized + 'a {
 let i: i32 = foo();
 i
 }","fn foo<'a>() -> impl Sized + 'a {
 let i: i32 = foo();
 i
 }",,,,,1,Sized,,,
110623,"{'I-ICE', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/110623,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Borrow Check,1. Type-Opaque Types,3,"ICE: ""no errors encountered even though `delay_span_bug` issued"" in recursive impl",2023-04-20T19:38:38Z,2024-03-28T11:56:35Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,342,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"use std::{collections::BTreeMap, num::ParseIntError, str::FromStr};
 
 enum FileSystem {
 File(usize),
 Directory(BTreeMap<String, FileSystem>),
 }
 
 impl FromStr for FileSystem {
 type Err = ParseIntError;
 
 fn from_str(s: &str) -> Result<Self, Self::Err> {
 if s.starts_with(""dir"") {
 Ok(Self::new_dir())
 } else {
 Ok(Self::File(s.split_whitespace().next().unwrap().parse()?))
 }
 }
 }
 
 impl FileSystem {
 fn new_dir() -> FileSystem {
 FileSystem::Directory(BTreeMap::new())
 }
 
 fn insert(&mut self, name: String, other: FileSystem) -> Option<FileSystem> {
 match self {
 FileSystem::File(_) => panic!(""can only insert into directory!""),
 FileSystem::Directory(tree) => tree.insert(name, other),
 }
 }
 
 // Recursively build a tree from commands. This uses (abuses?)
 // the fact that `cd /` only appears at the start and that
 // subsequent `cd`s can only move ONE level to use the recursion
 // stack as the filesystem stack
 fn build<'a>(
 &mut self,
 mut commands: impl Iterator<Item = &'a str> + 'a,
 ) -> Option<impl Iterator<Item = &'a str> + 'a> {
 let cmd = commands.next()?;
 let mut elements = cmd.lines();
 match elements.next().map(str::trim) {
 Some(""cd /"") | None => self.build(commands),
 Some(""cd .."") => {
 // return to higher scope
 Some(commands)
 }
 Some(""ls"") => {
 for item in elements {
 let name = item.split_whitespace().last().unwrap();
 let prior = self.insert(name.to_string(), item.parse().unwrap());
 debug_assert!(prior.is_none());
 }
 // continue on
 self.build(commands)
 }
 Some(other_cd) => {
 let name = other_cd
 .trim()
 .strip_prefix(""cd "")
 .expect(""expected a cd command"");
 let mut directory = FileSystem::new_dir();
 let further_commands = directory.build(commands);
 self.insert(name.to_string(), directory);
 self.build(further_commands?) // THIS LINE FAILS TO COMPILE
 }
 }
 }
 }
 
 fn main() {}","struct FileSystem;
 
 impl FileSystem {
 fn build<'a>(
 &mut self,
 commands: impl Iterator<Item = &'a str> + 'a,
 ) -> Option<impl Iterator<Item = &'a str> + 'a> {
 let further_commands = self.build(commands);
 self.build(further_commands?)
 }
 }
 
 fn main() {}",,,,,1,,,,
110593,"{'F-generic_associated_types', 'A-lifetimes', 'C-discussion', 'T-types', 'A-GATs'}",https://github.com/rust-lang/rust/issues/110593,question,,,,,,,Inconsistency in Required where clauses on GAT ,2023-04-20T10:57:34Z,2023-04-21T02:42:57Z,,,,,,0,,,,,0,,,,,,,,,,,
110551,"{'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/110551,valid,members,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Codegen regression involving `assume`/`unreachable_unchecked`,2023-04-19T17:05:42Z,2023-04-21T17:28:34Z,110569,https://github.com/rust-lang/rust/pull/110569,"Deduplicate unreachable blocks, for real this time",2023/4/20 1:06,2023/4/21 17:28,2,80,"['instcombine.rs', 'simplify.rs', 'unwrap_unchecked.unwrap_unchecked.Inline.diff', 'instcombine_duplicate_switch_targets_e2e.rs', 'instcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir']","['compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'tests/mir-opt/inline', 'tests/mir-opt', 'tests/mir-opt']",P-medium,0,"pub fn f(a: Option<u32>) -> u32 {
 match a {
 None => {}
 Some(_) => unsafe { std::hint::unreachable_unchecked() }
 }
 
 a.unwrap()
 }","pub fn f(a: Option<u32>) -> u32 {
 match a {
 None => {}
 Some(_) => unsafe { std::hint::unreachable_unchecked() }
 }
 
 a.unwrap()
 }",,,,1,,,,,
110373,"{'A-trait-system', 'C-enhancement', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/110373,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-type & wf check,5. Exception Handling & Report,2,Improve error message E0608 when the type supports Index but Idx is missing trait bounds,2023-04-15T20:17:50Z,2023-04-19T07:22:42Z,110432,https://github.com/rust-lang/rust/pull/110432,Report more detailed reason why `Index` impl is not satisfied,2023/4/16 22:37,2023/4/19 7:22,3,183,"['expr.rs', 'symbol.rs', 'index.rs', 'bad-index-due-to-nested.rs', 'bad-index-due-to-nested.stderr']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_span/src', 'library/core/src/ops', 'tests/ui/typeck', 'tests/ui/typeck']",,0,"use std::collections::HashMap;
 use std::hash::Hash;
 
 pub struct Edge<E> {
 id: E,
 src: usize,
 dst: usize,
 wt: u64
 }
 
 pub struct Graph<V, E> {
 nodes: Vec<V>,
 node_index_map: HashMap<V, usize>,
 edges: Vec<Edge<E>>,
 }
 
 pub fn build_graph<V, E>(v: V, e: E) -> Graph<V, E>
 where V: Copy + Eq + Hash, E: Eq + Hash {
 let mut node_index_map = HashMap::new();
 let nodes = vec![v];
 node_index_map.insert(v, 0);
 let edges = vec![Edge { id: e, src: node_index_map[&v], dst: 0, wt: 1}];
 Graph {
 nodes,
 node_index_map,
 edges,
 }
 }
 
 impl<V, E> Graph<V, E> {
 pub fn node_index(&self, node: V) -> usize {
 self.node_index_map[&node] // produces an error
 }
 }","use core::ops::Index;
 
 trait Trait {}
 struct Container;
 
 impl<T: Trait> Index<T> for Container {
 type Output = T;
 
 fn index(&self, idx: T) -> &Self::Output {
 &idx
 }
 }
 
 fn main() {
 struct Containee;
 
 Container[Containee];
 }",1,,,,,,,,
110358,"{'I-ICE', 'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/110358,Not reproducible anymore,,,,,,,"broken MIR (after phase change to runtime-optimized): Field projection specified type `BoxResolver`, but actual type is `<With as Archive>::Resolver`",2023-04-15T14:03:02Z,2023-06-16T18:18:26Z,,,,,,62,,,,,0,,,,,,,,,,,
110097,"{'I-slow', 'C-optimization', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/110097,valid,developer,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,2,"missed optimization for `if let`, even though equivalent match is optimized",2023-04-08T23:11:51Z,2024-03-08T09:33:01Z,120268,https://github.com/rust-lang/rust/pull/120268,Replace the default branch with an unreachable branch If it is the last variant,2024/1/23 12:37,2024/3/8 9:33,334,1551,"['patch.rs', 'terminator.rs', 'uninhabited_enum_branching.rs', 'uninhabited_enum_default_branch.rs', 'funky_arms.float_to_exponential_common.GVN.panic-abort.diff', 'funky_arms.float_to_exponential_common.GVN.panic-unwind.diff', 'issue_59352.num_to_digit.PreCodegen.after.panic-abort.mir', 'issue_59352.num_to_digit.PreCodegen.after.panic-unwind.mir', 'issue_117368_print_invalid_constant.main.GVN.32bit.panic-abort.diff', 'issue_117368_print_invalid_constant.main.GVN.32bit.panic-unwind.diff', 'issue_117368_print_invalid_constant.main.GVN.64bit.panic-abort.diff', 'issue_117368_print_invalid_constant.main.GVN.64bit.panic-unwind.diff', 'separate_const_switch.identity.JumpThreading.diff', 'separate_const_switch.too_complex.JumpThreading.diff', 'simplify_locals_fixedpoint.foo.SimplifyLocals-final.panic-abort.diff', 'simplify_locals_fixedpoint.foo.SimplifyLocals-final.panic-unwind.diff', 'uninhabited_enum_branching.byref.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.byref.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.custom_discriminant.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.custom_discriminant.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t1.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t1.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t2.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t2.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t3.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t3.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t4.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t4.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t4_uninhabited_default.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t4_uninhabited_default.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t4_uninhabited_default_2.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t4_uninhabited_default_2.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.otherwise_t5_uninhabited_default.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.otherwise_t5_uninhabited_default.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_enum_branching.rs', 'uninhabited_enum_branching.simple.UninhabitedEnumBranching.panic-abort.diff', 'uninhabited_enum_branching.simple.UninhabitedEnumBranching.panic-unwind.diff', 'uninhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff']","['compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_transform/src', 'tests/codegen/enum', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/issues', 'tests/mir-opt/issues', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"pub fn change_value(val: Result<i32, ()>) -> Result<i32, ()> {
 if let Ok(x) = val {
 Ok(x * 2)
 } else {
 Err(())
 }
 }
 
 pub fn change_value2(val: Result<i32, ()>) -> Result<i32, ()> {
 match val {
 Ok(x) => Ok(x * 2),
 Err(()) => Err(())
 }
 }","pub fn change_value(val: Result<i32, ()>) -> Result<i32, ()> {
 if let Ok(x) = val {
 Ok(x * 2)
 } else {
 Err(())
 }
 }
 
 pub fn change_value2(val: Result<i32, ()>) -> Result<i32, ()> {
 match val {
 Ok(x) => Ok(x * 2),
 Err(()) => Err(())
 }
 }",,,,,,,,,
109931,"{'A-impl-trait', 'T-rustdoc', 'A-async-await', 'regression-from-stable-to-beta', 'C-bug', 'AsyncAwait-Triaged'}",https://github.com/rust-lang/rust/issues/109931,exclude,,,,,,,Rustdoc lists empty opaque type for async fn,2023-04-04T09:48:11Z,2023-04-17T04:42:45Z,,,,,,12,,,,,0,,,,,,,,,,,
109892,"{'A-trait-system', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/109892,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,4. Basic syntax&structure,1,"`FnPtr` blanket impls cause ""multiple applicable items in scope"" for unrelated types.",2023-04-03T13:37:58Z,2023-04-04T01:12:21Z,109896,https://github.com/rust-lang/rust/pull/109896,Never consider int and float vars for `FnPtr` candidates,2023/4/3 15:28,2023/4/4 1:12,0,32,"['candidate_assembly.rs', 'mod.rs', 'fn-ptr-trait-int-float-infer-var.rs']","['compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'tests/ui/fn']",P-high,0,"trait MyCmp {
 fn cmp(&self) {}
 }
 impl MyCmp for f32 {}
 
 fn main() {
 0.0.cmp();
 }","trait MyCmp {
 fn cmp(&self) {}
 }
 impl MyCmp for f32 {}
 
 fn main() {
 0.0.cmp();
 }",,,,,,,,,
109799,"{'T-types', 'T-compiler', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/109799,exclude,,,,,,,incomplete normalization in implied bounds,2023-03-31T02:15:48Z,2024-01-18T16:38:35Z,,,,,,293,,,,,0,,,,,,,,,,,
109654,"{'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/109654,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
109591,"{'A-impl-trait', 'C-bug'}",https://github.com/rust-lang/rust/issues/109591,exclude,,,,,,,Unnecessary lifetime error,2023-03-25T12:20:56Z,2023-03-27T22:54:31Z,,,,,,2,,,,,0,,,,,,,,,,,
109502,"{'A-testsuite', 'E-medium', 'E-mentor', 'T-compiler', 'E-help-wanted', 'A-mir-opt', 'A-contributor-roadblock'}",https://github.com/rust-lang/rust/issues/109502,exclude,,,,,,,mir-opt tests generate an excessive amount of output,2023-03-22T21:39:53Z,2023-08-27T20:09:44Z,,,,,,157,,,,,0,,,,,,,,,,,
109420,"{'I-ICE', 'T-compiler', 'C-bug', 'A-borrow-checker', 'A-type-system'}",https://github.com/rust-lang/rust/issues/109420,duplicate,,,,,,,ICE with Indicatif crate: cannot relate bound region,2023-03-21T00:04:01Z,2023-03-21T16:15:17Z,,,,,,0,,,,,0,,,,,,,,,,,
109339,"{'I-ICE', 'T-compiler', 'C-bug', 'A-borrow-checker', 'regression-from-stable-to-stable', 'A-type-system'}",https://github.com/rust-lang/rust/issues/109339,Not reproducible anymore,,,,,,,"cannot relate bound region: `ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:199 ~ dev_remenants[a0e3]::is_ignored::'), ') }) <= '_#3r`",2023-03-19T04:54:54Z,2023-03-21T16:22:27Z,,,,,,2,,,,,0,,,,,,,,,,,
109289,"{'A-mir-opt', 'A-debuginfo', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/109289,Not reproducible anymore,,,,,,,MIR inlining breaks --remap-path-prefix,2023-03-18T03:51:06Z,2023-03-24T22:16:40Z,,,,,,6,,,,,0,,,,,,,,,,,
109271,"{'A-lifetimes', 'A-closures', 'D-papercut', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/109271,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,5. Exception Handling & Report,3,"Detect unused ""passing `self` into closure"" pattern to side-step borrow checker",2023-03-17T16:19:35Z,2023-04-20T01:49:13Z,110061,https://github.com/rust-lang/rust/pull/110061,Add suggestion to use closure argument instead of a capture on borrowck error,2023/4/7 18:56,2023/4/20 1:49,33,508,"['borrowck_errors.rs', 'conflict_errors.rs', 'hir.rs', 'feature-self-return-type.stderr', 'issue-61949-self-return-type.stderr', 'issue-109271-pass-self-into-closure.fixed', 'issue-109271-pass-self-into-closure.rs', 'issue-109271-pass-self-into-closure.stderr', 'generic-slice.stderr', 'auto-trait-regions.drop_tracking.stderr', 'auto-trait-regions.drop_tracking_mir.stderr', 'auto-trait-regions.no_drop_tracking.stderr', 'auto-trait-regions.stderr', 'issue-69314.stderr', 'adt-brace-enums.stderr', 'adt-brace-structs.stderr', 'adt-nullary-enums.stderr', 'adt-tuple-enums.stderr', 'adt-tuple-struct-calls.stderr', 'adt-tuple-struct.stderr', 'fns.stderr', 'method-call.stderr', 'method-ufcs-3.stderr', 'issue-18118.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_hir/src', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/consts/const-eval', 'tests/ui/generator', 'tests/ui/generator', 'tests/ui/generator', 'tests/ui/generator', 'tests/ui/lifetimes', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/nll/user-annotations', 'tests/ui/static']",,0,,.,,,,,,,,,
109260,"{'A-lints', 'A-MIR', 'T-compiler', 'A-const-eval', 'S-has-mcve', 'C-bug', 'L-unconditional_panic'}",https://github.com/rust-lang/rust/issues/109260,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,3. MIR-report,5. Exception Handling & Report,1,`unconditional_panic` array bounds check doesn't work through `Deref`,2023-03-17T11:41:21Z,2024-10-06T13:45:15Z,129517,https://github.com/rust-lang/rust/pull/129517,,,,569,,,,,0,"fn main() {
 let mut arr_0: [u32; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
 
 let ptr_0 = Box::new(arr_0);
 
 let ptr_v = ptr_0[11];
 let arr_v = arr_0[11];
 println!(""v:{}"", ptr_v);
 }","fn main() {
 let mut arr_0: [u32; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
 
 let ptr_0 = Box::new(arr_0);
 
 let ptr_v = ptr_0[11];
 let arr_v = arr_0[11];
 println!(""v:{}"", ptr_v);
 }",,,,,,,,,
108810,"{'C-cleanup', 'T-compiler', 'E-medium', 'A-type-system'}",https://github.com/rust-lang/rust/issues/108810,exclude,,,,,,,creating a `TypeErrCtxt` should only be possible if we emit an error,2023-03-06T13:08:57Z,2023-04-13T18:18:00Z,,,,,,38,,,,,0,,,,,,,,,,,
108639,"{'A-NLL', 'T-types', 'NLL-complete', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/108639,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,4,error promoting type-tests from closures part 2,2023-03-02T04:41:11Z,2023-03-07T06:49:36Z,108691,https://github.com/rust-lang/rust/pull/108691,fix multiple issues when promoting type-test subject,2023/3/3 5:13,2023/3/7 6:49,5,368,"['nll.rs', 'mod.rs', 'constraint_conversion.rs', 'free_region_relations.rs', 'query.rs', 'type-test-subject-non-trivial-region.rs', 'type-test-subject-opaque-1.rs', 'type-test-subject-opaque-2.rs', 'type-test-subject-unnamed-region.rs', 'projection-one-region-closure.stderr', 'projection-one-region-trait-bound-closure.stderr', 'projection-two-region-trait-bound-closure.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/mir', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives']",,0,"trait Trait {
 type Item<'a>: 'a;
 }
 
 fn assert_static<T: 'static>(_: T) {}
 fn relate<T>(_: T, _: T) {}
 
 fn test_args<I: Trait>() {
 let closure = |a, b| {
 relate(&a, b);
 assert_static(a);
 //~^ ERROR the associated type may not live long enough
 };
 closure(None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 }","trait Trait {
 type Item<'a>: 'a;
 }
 
 fn assert_static<T: 'static>(_: T) {}
 fn relate<T>(_: T, _: T) {}
 
 fn test_args<I: Trait>() {
 let closure = |a, b| {
 relate(&a, b);
 assert_static(a);
 //~^ ERROR the associated type may not live long enough
 };
 closure(None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 }",,,,,1,,,,
108635,"{'A-NLL', 'T-types', 'NLL-complete', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/108635,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,4,error promoting type-tests from closures,2023-03-02T03:28:21Z,2023-03-07T06:49:35Z,108691,https://github.com/rust-lang/rust/pull/108691,fix multiple issues when promoting type-test subject,2023/3/3 5:13,2023/3/7 6:49,5,368,"['nll.rs', 'mod.rs', 'constraint_conversion.rs', 'free_region_relations.rs', 'query.rs', 'type-test-subject-non-trivial-region.rs', 'type-test-subject-opaque-1.rs', 'type-test-subject-opaque-2.rs', 'type-test-subject-unnamed-region.rs', 'projection-one-region-closure.stderr', 'projection-one-region-trait-bound-closure.stderr', 'projection-two-region-trait-bound-closure.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/mir', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives']",,0,"trait Trait {
 type Item<'a>: 'a;
 }
 
 fn assert_static<T: 'static>(_: T) {}
 
 fn test_args<I: Trait>() {
 let closure = |a, _b| assert_static(a);
 //~^ ERROR the associated type may not live long enough
 
 closure(None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 }
 
 fn test_upvars<I: Trait>() {
 let upvars = (None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 let _closure = || {
 let (a, _b) = upvars;
 assert_static(a);
 //~^ ERROR the associated type may not live long enough
 };
 }","trait Trait {
 type Item<'a>: 'a;
 }
 
 fn assert_static<T: 'static>(_: T) {}
 
 fn test_args<I: Trait>() {
 let closure = |a, _b| assert_static(a);
 //~^ ERROR the associated type may not live long enough
 
 closure(None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 }
 
 fn test_upvars<I: Trait>() {
 let upvars = (None::<I::Item::<'_>>, &None::<I::Item::<'_>>);
 let _closure = || {
 let (a, _b) = upvars;
 assert_static(a);
 //~^ ERROR the associated type may not live long enough
 };
 }",,,,,1,,,,
108592,"{'T-types', 'A-impl-trait', 'P-high', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/108592,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-Type Infer,2. Ownership-Lifetime,1,impl Trait lifetimes regression 1.67 part 2,2023-03-01T06:19:10Z,2023-04-20T06:14:53Z,110399,https://github.com/rust-lang/rust/pull/110399,Account for opaque variance in outlives,2023/4/16 10:43,2023/4/20 6:14,49,129,"['components.rs', 'obligations.rs', 'verify.rs', 'issue-108591.rs', 'issue-108592.rs']","['compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'tests/ui/impl-trait', 'tests/ui/impl-trait']",P-high,0,"fn opaque<'a: 'a>() -> impl Sized {}
 fn assert_static<T: 'static>(_: T) {}
 
 fn test() {
 let closure = |_| {
 assert_static(opaque());
 //~^ ERROR the opaque type may not live long enough
 };
 closure(&opaque());
 }","fn opaque<'a: 'a>() -> impl Sized {}
 fn assert_static<T: 'static>(_: T) {}
 
 fn test() {
 let closure = |_| {
 assert_static(opaque());
 //~^ ERROR the opaque type may not live long enough
 };
 closure(&opaque());
 }",,,,,1,Sized,,,
108591,"{'T-types', 'A-impl-trait', 'P-high', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/108591,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-Type Infer,2. Ownership-Lifetime,1,impl Trait lifetimes regression 1.67,2023-03-01T05:50:44Z,2023-04-20T06:14:52Z,110399,https://github.com/rust-lang/rust/pull/110399,Account for opaque variance in outlives,2023/4/16 10:43,2023/4/20 6:14,50,129,"['components.rs', 'obligations.rs', 'verify.rs', 'issue-108591.rs', 'issue-108592.rs']","['compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'tests/ui/impl-trait', 'tests/ui/impl-trait']",P-high,0,"struct MyTy<'a>(Vec<u8>, &'a ());
 
 impl MyTy<'_> {
 fn one(&mut self) -> &mut impl Sized {
 &mut self.0
 }
 fn two(&mut self) -> &mut (impl Sized + 'static) {
 self.one()
 //~^ ERROR lifetime may not live long enough
 }
 }","struct MyTy<'a>(Vec<u8>, &'a ());
 
 impl MyTy<'_> {
 fn one(&mut self) -> &mut impl Sized {
 &mut self.0
 }
 fn two(&mut self) -> &mut (impl Sized + 'static) {
 self.one()
 //~^ ERROR lifetime may not live long enough
 }
 }",,,,,1,Sized,,,
108360,"{'A-mir-opt', 'requires-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/108360,valid,developer,3. Miscompilation-Inconsistent Output Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Unsound mir-opt level 4 with loops and `.try_into().unwrap_or()`,2023-02-22T19:46:11Z,2023-02-23T12:21:54Z,108208,https://github.com/rust-lang/rust/pull/108208,,,,0,,,,,0,"fn main() {
 for x in 0..1 {
 let mut value = 0u8;
 value = x.try_into().unwrap_or(42);
 assert_eq!(value, 0);
 }
 }","fn main() {
 for x in 0..1 {
 let mut value = 0u8;
 value = x.try_into().unwrap_or(42);
 assert_eq!(value, 0);
 }
 }",,,,,,,-Zmir-opt-level=X,RUSTFLAGS=-Zmir-opt-level=4 cargo run,
108166,"{'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/108166,exclude,,,,,,,Miscompilation of libcore with -Zmir-opt-level=3,2023-02-17T15:51:53Z,2023-02-23T09:20:07Z,108208,https://github.com/rust-lang/rust/pull/108208,Correctly handle aggregates in DataflowConstProp,2023/2/18 10:20,2023/2/23 9:20,5,129,"['dataflow_const_prop.rs', 'enum.multiple.DataflowConstProp.diff', 'enum.rs', 'enum.simple.DataflowConstProp.diff']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt/dataflow-const-prop']",,0,,,,,,,,,,,
108068,"{'I-slow', 'A-codegen', 'C-enhancement', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/108068,valid,members,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,2,Improve codegen of large Copy parameters under CopyProp to match DestinationPropagation,2023-02-15T00:04:23Z,2023-07-20T16:57:03Z,113758,https://github.com/rust-lang/rust/pull/113758,Turn copy into moves during DSE.,2023/7/16 13:48,2023/7/20 16:57,155,161,"['liveness.rs', 'mod.rs', 'dead_store_elimination.rs', 'iter-repeat-n-trivial-drop.rs', 'move-operands.rs', 'call_arg_copy.move_simple.DeadStoreElimination.panic-abort.diff', 'call_arg_copy.move_simple.DeadStoreElimination.panic-unwind.diff', 'call_arg_copy.rs', 'dyn_trait.get_query.Inline.panic-abort.diff', 'dyn_trait.get_query.Inline.panic-unwind.diff', 'dyn_trait.try_execute_query.Inline.panic-abort.diff', 'dyn_trait.try_execute_query.Inline.panic-unwind.diff', 'inline_into_box_place.main.Inline.panic-abort.diff', 'inline_into_box_place.main.Inline.panic-unwind.diff', 'inline_trait_method_2.test2.Inline.after.panic-abort.mir', 'inline_trait_method_2.test2.Inline.after.panic-unwind.mir', 'issue_101973.inner.ConstProp.panic-abort.diff', 'issue_101973.inner.ConstProp.panic-unwind.diff', 'issue_59352.num_to_digit.PreCodegen.after.panic-abort.mir', 'issue_59352.num_to_digit.PreCodegen.after.panic-unwind.mir', 'checked_ops.checked_shl.PreCodegen.after.mir', 'loops.int_range.PreCodegen.after.mir', 'range_iter.inclusive_loop.PreCodegen.after.panic-abort.mir', 'range_iter.inclusive_loop.PreCodegen.after.panic-unwind.mir', 'range_iter.range_inclusive_iter_next.PreCodegen.after.panic-abort.mir', 'range_iter.range_inclusive_iter_next.PreCodegen.after.panic-unwind.mir', 'slice_index.slice_index_range.PreCodegen.after.panic-abort.mir', 'slice_index.slice_index_range.PreCodegen.after.panic-unwind.mir', 'slice_iter.slice_iter_mut_next_back.PreCodegen.after.panic-abort.mir', 'slice_iter.slice_iter_mut_next_back.PreCodegen.after.panic-unwind.mir', 'slice_iter.slice_iter_next.PreCodegen.after.panic-abort.mir', 'slice_iter.slice_iter_next.PreCodegen.after.panic-unwind.mir']","['compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'tests/codegen', 'tests/codegen', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/issues', 'tests/mir-opt/issues', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen']",,0,"type T = [u8; 256];
 pub fn f(a: T, b: fn(_: T, _: T)) {
 b(a, a)
 }","type T = [u8; 256];
 pub fn f(a: T, b: fn(_: T, _: T)) {
 b(a, a)
 }",,,,,,,-Zmir-enable-passes=+X,=-Zmir-enable-passes=+DestinationPropagation,
107887,"{'A-trait-system', 'fixed-by-next-solver', 'I-unsound', 'T-types', 'P-medium', 'T-compiler', 'C-bug', 'WG-trait-system-refactor'}",https://github.com/rust-lang/rust/issues/107887,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-trait solving,1. Type-New Solver,5,`project` for trait object bound candidates is incomplete,2023-02-10T13:19:36Z,2024-10-15T17:21:43Z,130654,https://github.com/rust-lang/rust/pull/130654,stabilize `-Znext-solver=coherence` again,2024/9/21 7:19,2024/10/15 17:21,613,1002,"['feature_gate.rs', 'tests.rs', 'context.rs', 'config.rs', 'options.rs', 'engine.rs', '118987.rs', 'associated-types-coherence-failure.stderr', 'opaque_type_candidate_selection.rs', 'coherence-negative-outlives-lifetimes.stock.stderr', 'coherence-negative-outlives-lifetimes.with_negative_coherence.stderr', 'coherence-overlap-downstream-inherent.old.stderr', 'coherence-overlap-downstream-inherent.rs', 'coherence-overlap-downstream-inherent.stderr', 'coherence-overlap-downstream.next.stderr', 'coherence-overlap-downstream.rs', 'coherence-overlap-downstream.stderr', 'coherence-overlap-issue-23516-inherent.old.stderr', 'coherence-overlap-issue-23516-inherent.rs', 'coherence-overlap-issue-23516-inherent.stderr', 'coherence-overlap-issue-23516.old.stderr', 'coherence-overlap-issue-23516.rs', 'coherence-overlap-issue-23516.stderr', 'coherence-overlap-negate-not-use-feature-gate.stderr', 'coherence-overlap-unnormalizable-projection-0.classic.stderr', 'coherence-overlap-unnormalizable-projection-0.rs', 'coherence-overlap-unnormalizable-projection-0.stderr', 'coherence-overlap-unnormalizable-projection-1.classic.stderr', 'coherence-overlap-unnormalizable-projection-1.rs', 'coherence-overlap-unnormalizable-projection-1.stderr', 'coherent-due-to-fulfill.rs', 'incoherent-even-though-we-fulfill.rs', 'incoherent-even-though-we-fulfill.stderr', 'inter-crate-ambiguity-causes-notes.old.stderr', 'inter-crate-ambiguity-causes-notes.rs', 'inter-crate-ambiguity-causes-notes.stderr', 'negative-coherence-check-placeholder-outlives.stderr', 'negative-coherence-considering-regions.any_lt.stderr', 'negative-coherence-placeholder-region-constraints-on-unification.explicit.stderr', 'normalize-for-errors.current.stderr', 'normalize-for-errors.rs', 'normalize-for-errors.stderr', 'associated-type.next.stderr', 'associated-type.old.stderr', 'associated-type.rs', 'opaques.current.stderr', 'opaques.next.stderr', 'opaques.rs', 'orphan-check-opaque-types-not-covering.next.stderr', 'orphan-check-opaque-types-not-covering.rs', 'orphan-check-opaque-types-not-covering.stderr', 'orphan-check-projections-covering.rs', 'orphan-check-weak-aliases-not-covering.next.stderr', 'orphan-check-weak-aliases-not-covering.rs', 'orphan-check-weak-aliases-not-covering.stderr', 'skip-reporting-if-references-err.current.stderr', 'skip-reporting-if-references-err.rs', 'skip-reporting-if-references-err.stderr', 'super-trait-knowable-1.current.stderr', 'super-trait-knowable-1.rs', 'super-trait-knowable-2.rs', 'super-trait-knowable-3.current.stderr', 'super-trait-knowable-3.rs', 'unevaluated-const-ice-119731.rs', 'unevaluated-const-ice-119731.stderr', 'unknown-alias-defkind-anonconst-ice-116710.rs', 'unknown-alias-defkind-anonconst-ice-116710.stderr', 'issue-23563.stderr', 'feature-gate-with_negative_coherence.stderr', 'leak-check-in-selection-5-ambig.rs', 'structually-relate-aliases.rs', 'structually-relate-aliases.stderr', 'auto-trait-coherence.old.stderr', 'auto-trait-coherence.rs', 'auto-trait-coherence.stderr', 'coherence-treats-tait-ambig.rs', 'coherence-treats-tait-ambig.stderr', 'negative-reasoning.rs', 'negative-reasoning.stderr', 'impl-unused-tps.rs', 'impl-unused-tps.stderr', 'issue-48728.rs', 'default-impl-normalization-ambig-2.rs', 'default-impl-normalization-ambig-2.stderr', 'default-item-normalization-ambig-1.rs', 'default-item-normalization-ambig-1.stderr', 'specialization-no-default.rs', 'specialization-default-items-drop-coherence.current.stderr', 'specialization-default-items-drop-coherence.next.stderr', 'specialization-default-items-drop-coherence.rs', 'specialization-overlap-projection.current.stderr', 'specialization-overlap-projection.next.stderr', 'specialization-overlap-projection.rs', 'specialization-overlap-projection.stderr', 'issue-83613.rs', 'issue-83613.stderr', 'issue-105231.rs', 'issue-105231.stderr', 'issue-102048.rs', 'issue-102048.stderr', 'cycle-via-builtin-auto-trait-impl.rs', 'cycle-via-builtin-auto-trait-impl.stderr', 'coherence-bikeshed-intrinsic-from.rs', 'coherence-bikeshed-intrinsic-from.stderr', 'impl_trait_for_same_tait.stderr', 'implied_lifetime_wf_check.error.stderr', 'issue-104817.rs', 'issue-104817.stock.stderr']","['compiler/rustc_ast_passes/src', 'compiler/rustc_interface/src', 'compiler/rustc_middle/src/ty', 'compiler/rustc_session/src', 'compiler/rustc_session/src', 'compiler/rustc_trait_selection/src/traits', 'tests/crashes', 'tests/ui/associated-types', 'tests/ui/auto-traits', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/error-codes/e0119', 'tests/ui/feature-gates', 'tests/ui/higher-ranked/leak-check', 'tests/ui/higher-ranked', 'tests/ui/higher-ranked', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui', 'tests/ui', 'tests/ui/issues', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/defaultimpl', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/traits/alias', 'tests/ui/traits/alias', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits/next-solver/coherence', 'tests/ui/traits/next-solver/coherence', 'tests/ui/traits/solver-cycles', 'tests/ui/traits/solver-cycles', 'tests/ui/transmutability/malformed-program-gracefulness', 'tests/ui/transmutability/malformed-program-gracefulness', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-medium,1,"struct W<T: ?Sized>(*const T);
 
 trait Trait<T: ?Sized> {
 type Assoc;
 }
 
 // This would trigger the check for overlap between automatic and custom impl.
 // They actually don't overlap so an impl like this should remain possible
 // forever.
 //
 // impl Trait<u64> for dyn Trait<u32> {}
 trait Indirect {}
 impl Indirect for dyn Trait<u32, Assoc = ()> {}
 impl<T: Indirect + ?Sized> Trait<u64> for T {
 type Assoc = ();
 }
 
 trait Overlap<U: ?Sized> {
 type Assoc: Default;
 }
 impl<T: ?Sized + EvaluateHack<W<U>>, U: ?Sized> Overlap<U> for T {
 type Assoc = Box<u32>;
 }
 impl<U: ?Sized> Overlap<U> for dyn Trait<u32, Assoc = ()> {
 type Assoc = usize;
 }
 
 // Incomplete impl where `dyn Trait<u32>: Trait<_>` does not hold, but
 // `dyn Trait<u32>: Trait<u64>` does.
 trait EvaluateHack<U: ?Sized> {}
 impl<T: ?Sized, U: ?Sized> EvaluateHack<W<U>> for T
 where
 T: Trait<U, Assoc = ()>, // incompletely constrains `_` to `u32`
 U: IsU64,
 T: Trait<U, Assoc = ()>, // incompletely constrains `_` to `u32`
 {
 }
 
 trait IsU64 {}
 impl IsU64 for u64 {}
 
 fn overlap<T: Overlap<U> + ?Sized, U>() -> T::Assoc {
 Default::default()
 }
 
 fn generic_first<T: ?Sized + EvaluateHack<W<U>>, U>() {
 overlap::<T, U>();
 }
 fn main() {
 generic_first::<dyn Trait<u32, Assoc = ()>, u64>();
 }","struct W<T: ?Sized>(*const T);
 
 trait Trait<T: ?Sized> {
 type Assoc;
 }
 
 // This would trigger the check for overlap between automatic and custom impl.
 // They actually don't overlap so an impl like this should remain possible
 // forever.
 //
 // impl Trait<u64> for dyn Trait<u32> {}
 trait Indirect {}
 impl Indirect for dyn Trait<u32, Assoc = ()> {}
 impl<T: Indirect + ?Sized> Trait<u64> for T {
 type Assoc = ();
 }
 
 trait Overlap<U: ?Sized> {
 type Assoc: Default;
 }
 impl<T: ?Sized + EvaluateHack<W<U>>, U: ?Sized> Overlap<U> for T {
 type Assoc = Box<u32>;
 }
 impl<U: ?Sized> Overlap<U> for dyn Trait<u32, Assoc = ()> {
 type Assoc = usize;
 }
 
 // Incomplete impl where `dyn Trait<u32>: Trait<_>` does not hold, but
 // `dyn Trait<u32>: Trait<u64>` does.
 trait EvaluateHack<U: ?Sized> {}
 impl<T: ?Sized, U: ?Sized> EvaluateHack<W<U>> for T
 where
 T: Trait<U, Assoc = ()>, // incompletely constrains `_` to `u32`
 U: IsU64,
 T: Trait<U, Assoc = ()>, // incompletely constrains `_` to `u32`
 {
 }
 
 trait IsU64 {}
 impl IsU64 for u64 {}
 
 fn overlap<T: Overlap<U> + ?Sized, U>() -> T::Assoc {
 Default::default()
 }
 
 fn generic_first<T: ?Sized + EvaluateHack<W<U>>, U>() {
 overlap::<T, U>();
 }
 fn main() {
 generic_first::<dyn Trait<u32, Assoc = ()>, u64>();
 }",,,1,,1,?Sized,,,
107818,"{'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/107818,valid,icemaker,3. Miscompilation-Safe Rust Causes UB,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,UB: matching on const value with mir-opt-level=3,2023-02-08T21:24:03Z,2023-02-11T23:57:01Z,107851,https://github.com/rust-lang/rust/pull/107851,Put deaggregated statements after original constant.,2023/2/9 17:28,2023/2/11 23:57,3,57,"['sroa.rs', 'sroa.constant.ScalarReplacementOfAggregates.diff', 'sroa.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt']",,0,"#[derive(PartialEq, Eq, Clone)]
 struct Foo {
 field: i64
 }
 
 const FOO: Foo = Foo {
 field: 5,
 };
 
 fn main() {
 match FOO {
 FOO => unreachable!(),
 _ => unreachable!(),
 }
 }","#[derive(PartialEq, Eq, Clone)]
 struct Foo {
 field: i64
 }
 
 const FOO: Foo = Foo {
 field: 5,
 };
 
 fn main() {
 match FOO {
 FOO => unreachable!(),
 _ => unreachable!(),
 }
 }",,,,,,,"-Zmir-opt-level=X
-Zmiri-backtrace=full","MIRIFLAGS=""-Zmir-opt-level=3 -Zmiri-backtrace=full"" cargo miri run",
107747,"{'A-trait-system', 'A-resolve', 'C-bug', 'F-trait_alias'}",https://github.com/rust-lang/rust/issues/107747,valid,developer,3. Miscompilation-Inconsistent Output Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,1,Trait aliases should not bring supertraits into scope,2023-02-07T01:30:48Z,2023-02-09T23:57:18Z,107803,https://github.com/rust-lang/rust/pull/107803,Do not bring trait alias supertraits into scope,2023/2/8 15:03,2023/2/9 23:57,2,69,"['probe.rs', 'issue-107747-do-not-assemble-supertraits.rs']","['compiler/rustc_hir_typeck/src/method', 'tests/ui/traits/alias']",,0,"#![feature(trait_alias)]
 
 use std::fmt;
 
 trait Foo: fmt::Debug {}
 
 // uncommenting the following line brings Debug into scope, which
 // in turn causes the (unrelated) Display impl below to become ambiguous
 
 // trait Bar = Foo;
 
 #[derive(Debug)]
 struct Qux(bool);
 
 impl fmt::Display for Qux {
 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 self.0.fmt(f)
 }
 }","#![feature(trait_alias)]
 
 use std::fmt;
 
 trait Foo: fmt::Debug {}
 
 // uncommenting the following line brings Debug into scope, which
 // in turn causes the (unrelated) Display impl below to become ambiguous
 
 // trait Bar = Foo;
 
 #[derive(Debug)]
 struct Qux(bool);
 
 impl fmt::Display for Qux {
 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 self.0.fmt(f)
 }
 }",,,,1,1,,,,#![feature(trait_alias)]
107715,"{'I-ICE', 'T-rustdoc', 'E-needs-test', 'T-compiler', 'A-synthetic-impls', 'C-bug', 'S-has-mcve', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/107715,Not reproducible anymore,developer,1. Crash-Front-end Panic,,,,,rustdoc: ICE: synthetic auto trait impls: `unexpected result when selecting [鈥` involving const in super trait bounds & item bounds,2023-02-06T02:31:51Z,2024-04-02T23:24:54Z,123348,https://github.com/rust-lang/rust/pull/123348,rustdoc: add a couple of regression tests,2024/4/2 1:10,2024/4/2 23:24,421,85,"['const-in-super-trait-and-item-bound.rs', 'projections-in-super-trait-bound-unsatisfied.rs', 'projections-in-super-trait-bound-unsatisfied.stderr', 'unconstrained-param-in-impl-ambiguity.rs', 'unconstrained-param-in-impl-ambiguity.stderr']","['tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls', 'tests/rustdoc-ui/synthetic-auto-trait-impls']",,0,,,,,,,,,,,
107623,"{'C-discussion', 'A-closures'}",https://github.com/rust-lang/rust/issues/107623,exclude,,,,,,,Inner closure move in function call does not move outer values,2023-02-03T03:32:22Z,2024-11-12T11:01:59Z,,,,,,648,,,,,0,,,,,,,,,,,
107564,"{'A-trait-system', 'E-needs-test', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/107564,exclude,,,,,,,higher ranked projections: ICE -> compile change,2023-02-01T14:55:44Z,2024-06-09T11:44:05Z,126137,https://github.com/rust-lang/rust/pull/126137,tests: Add ui/higher-ranked/trait-bounds/normalize-generic-arg.rs,2024/6/7 19:06,2024/6/9 11:44,493,39,"['rigid-equate-projections-in-higher-ranked-fn-signature.next.stderr', 'rigid-equate-projections-in-higher-ranked-fn-signature.rs']","['tests/ui/higher-ranked/trait-bounds', 'tests/ui/higher-ranked/trait-bounds']",,0,,,,,,,,,,,
107516,"{'T-types', 'A-impl-trait', 'P-critical', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/107516,exclude,,,,,,,1.67 regression with `鈥︹€?:{opaque#0}<'_> does not live long enough` error,2023-01-31T13:51:54Z,2023-03-07T06:49:37Z,108691,https://github.com/rust-lang/rust/pull/108691,fix multiple issues when promoting type-test subject,2023/3/3 5:13,2023/3/7 6:49,34,368,"['nll.rs', 'mod.rs', 'constraint_conversion.rs', 'free_region_relations.rs', 'query.rs', 'type-test-subject-non-trivial-region.rs', 'type-test-subject-opaque-1.rs', 'type-test-subject-opaque-2.rs', 'type-test-subject-unnamed-region.rs', 'projection-one-region-closure.stderr', 'projection-one-region-trait-bound-closure.stderr', 'projection-two-region-trait-bound-closure.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/mir', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives']",P-critical,0,,,,,,,,,,,
107511,"{'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/107511,valid,members,3. Miscompilation-Safe Rust Causes UB,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Bad MIR: StorageLive on a local that was already live with opt-level=4,2023-01-31T11:03:17Z,2023-02-02T21:14:40Z,107524,https://github.com/rust-lang/rust/pull/107524,Remove both StorageLive and StorageDead in CopyProp.,2023/1/31 17:22,2023/2/2 21:14,2,224,"['copy_prop.rs', 'const_debuginfo.main.ConstDebugInfo.diff', 'bad_op_mod_by_zero.main.ConstProp.diff', 'scalar_literal_propagation.main.ConstProp.diff', 'cycle.main.CopyProp.diff', 'dead_stores_79191.f.CopyProp.after.mir', 'dead_stores_better.f.CopyProp.after.mir', 'issue_107511.main.CopyProp.diff', 'issue_107511.rs', 'inherit_overflow.main.DataflowConstProp.diff', 'funky_arms.float_to_exponential_common.ConstProp.diff', 'issue_101973.inner.ConstProp.diff', 'issue_76432.test.SimplifyComparisonIntegral.diff', 'simplify_match.main.ConstProp.diff', 'slice_filter.variant_a-{closure#0}.CopyProp.diff', 'slice_filter.variant_a-{closure#0}.DestinationPropagation.diff', 'slice_filter.variant_b-{closure#0}.CopyProp.diff', 'slice_filter.variant_b-{closure#0}.DestinationPropagation.diff', 'try_identity_e2e.new.PreCodegen.after.mir', 'try_identity_e2e.old.PreCodegen.after.mir']","['compiler/rustc_mir_transform/src', 'tests/mir-opt', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/copy-prop', 'tests/mir-opt/dataflow-const-prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"fn main() {
 let mut sum = 0;
 let a = [0, 10, 20, 30];
 for i in 0..a.len() {
 sum += a[i];
 }
 println!(""{sum}"");
 }","fn main() {
 let mut sum = 0;
 let a = [0, 10, 20, 30];
 for i in 0..a.len() {
 sum += a[i];
 }
 println!(""{sum}"");
 }",,,,,,,"-Zmir-opt-level=X
-O",=-Zmir-opt-level=4 -O,
107426,"{'regression-from-stable-to-stable', 'A-impl-trait', 'T-compiler', 'P-medium'}",https://github.com/rust-lang/rust/issues/107426,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,4,"Regression 1.66 ""`some_fn::{opaque#0}<'_>` does not live long enough""",2023-01-28T21:49:27Z,2023-03-07T06:49:36Z,108691,https://github.com/rust-lang/rust/pull/108691,fix multiple issues when promoting type-test subject,2023/3/3 5:13,2023/3/7 6:49,37,368,"['nll.rs', 'mod.rs', 'constraint_conversion.rs', 'free_region_relations.rs', 'query.rs', 'type-test-subject-non-trivial-region.rs', 'type-test-subject-opaque-1.rs', 'type-test-subject-opaque-2.rs', 'type-test-subject-unnamed-region.rs', 'projection-one-region-closure.stderr', 'projection-one-region-trait-bound-closure.stderr', 'projection-two-region-trait-bound-closure.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/mir', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/closure-requirements', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives', 'tests/ui/nll/ty-outlives']",P-medium,0,"/*
 [dependencies]
 sycamore = ""0.8.2""
 web-sys = ""0.3""
 
 */
 
 use sycamore::prelude::{Scope, View, Html, DomNode, ReadSignal, GenericNode};
 
 pub fn create_toggle_bool<'a>(cx: Scope<'a>, initial: bool) -> (&'a ReadSignal<bool>, impl Fn() + Copy + 'a) {
 // let open = sycamore::prelude::create_signal(cx, false);
 // let open_toggle = || open.set(!*open.get());
 // (open, open_toggle)
 (todo!(), || {})
 }
 
 pub fn Foo<G: Html>(cx: Scope) -> View<G> {
 let (open, open_toggle) = create_toggle_bool(cx, false);
 
 // Uncomment these 2 lines to make it compile (moved out of the function)
 // let open = sycamore::prelude::create_signal(cx, false);
 // let open_toggle = || open.set(!*open.get());
 
 let a = move |_: web_sys::Event| open_toggle();
 
 move || {
 let __el = DomNode::text_node(""test"");
 ::sycamore::generic_node::GenericNode::event(&__el, cx, ""click"", a);
 __el;
 };
 
 todo!()
 }
 
 fn main() {
 }","use std::marker::PhantomData;
 #[derive(Clone, Copy)]
 pub struct Scope<'a>(&'a PhantomData<&'a mut &'a ()>);
 fn event<'a, F: FnMut() + 'a>(_: Scope<'a>, _: F) {}
 fn make_fn<'a>(_: Scope<'a>) -> impl Fn() + Copy + 'a {
 || {}
 }
 
 fn foo(cx: Scope) {
 let open_toggle = make_fn(cx);
 
 || event(cx, open_toggle);
 }
 
 fn main() {}",,,,1,1,Fn,,,
107377,"{'A-trait-system', 'A-associated-items', 'I-unsound', 'A-coherence', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/107377,duplicate,,,,,,,Associated types appear to cover or hide generic parameters in orphan rules checking,2023-01-27T16:44:25Z,2023-01-27T17:07:23Z,,,,,,0,,,,,0,,,,,,,,,,,
107315,"{'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/107315,exclude,,,,,,,ConstGoto can produce invalid control flow in cleanup blocks,2023-01-26T05:39:28Z,2023-01-26T19:28:46Z,107323,https://github.com/rust-lang/rust/pull/107323,Disable ConstGoto opt in cleanup blocks,2023/1/26 12:01,2023/1/26 19:28,0,9,['const_goto.rs'],['compiler/rustc_mir_transform/src'],,0,,,,,,,,,,,
106750,"{'A-impl-trait', 'T-compiler', 'A-type-system', 'C-bug'}",https://github.com/rust-lang/rust/issues/106750,duplicate,,,,,,,RPIT with 'static bound captures lifetimes from generic arguments,2023-01-12T01:49:55Z,2024-05-29T21:22:22Z,,,,,,503,,,,,0,,,,,,,,,,,
106688,"{'A-lifetimes', 'WG-async', 'A-async-await', 'T-compiler', 'C-bug', 'A-borrow-checker', 'AsyncAwait-Triaged', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/106688,Not a bug,,2. Correctness Issues-Completeness Issues,,,,,Mut borrow persists after await,2023-01-10T16:53:13Z,2024-02-26T17:22:57Z,,,,,,412,,,,,0,,,,,,,,,,,
106567,"{'T-types', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/106567,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-Type Infer,2. Ownership-Lifetime,6,loss of implied bounds after normalization,2023-01-07T17:34:01Z,2023-03-28T18:00:07Z,109629,https://github.com/rust-lang/rust/pull/109629,remove obsolete `givens` from regionck,2023/3/26 11:47,2023/3/28 18:00,80,266,"['compare_impl_item.rs', 'wfcheck.rs', 'min_specialization.rs', 'pat.rs', 'query_response.rs', 'mod.rs', 'mod.rs', 'env.rs', 'leak_check.rs', 'mod.rs', 'coherence.rs', 'misc.rs', 'outlives_bounds.rs', 'ice-unbound-region-vars.rs', 'normalization.rs']","['compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/impl_wf_check', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_infer/src/infer/canonical', 'compiler/rustc_infer/src/infer/lexical_region_resolve', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/region_constraints', 'compiler/rustc_infer/src/infer/region_constraints', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds']",,1,"trait Identity { type Ty; }
 impl<'a, 'b> Identity for &'a &'b () { type Ty = &'a &'b (); }
 fn test<'a, 'b>(_: <&'a &'b () as Identity>::Ty) {}
 //~^ ERROR lifetime mismatch","trait Identity { type Ty; }
 impl<'a, 'b> Identity for &'a &'b () { type Ty = &'a &'b (); }
 fn test<'a, 'b>(_: <&'a &'b () as Identity>::Ty) {}
 //~^ ERROR lifetime mismatch",,,,,1,,,,
106522,"{'T-types', 'A-trait-objects', 'C-bug'}",https://github.com/rust-lang/rust/issues/106522,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,1. Type-Trait & Bound,4,Trait associated types `where Self: Sized` interact oddly with dyn safety,2023-01-06T02:24:14Z,2024-01-26T11:05:52Z,112319,https://github.com/rust-lang/rust/pull/112319,,,,385,,,,,0,"pub trait Trait {
 type Assoc
 where
 Self: Sized;
 
 fn method(&self);
 }","pub trait Trait {
 type Assoc
 where
 Self: Sized;
 
 fn method(&self);
 }",,,,,,Sized,,,
106459,"{'I-slow', 'T-compiler', 'C-bug', 'A-LLVM', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/106459,valid,developer,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,2,Missed optimization with match on repr(i8) enum,2023-01-04T19:12:55Z,2024-04-08T20:30:03Z,120614,https://github.com/rust-lang/rust/pull/120614, Transforms match into an assignment statement,2024/2/3 14:48,2024/4/8 20:30,460,1250,"['terminator.rs', 'match_branches.rs', 'match-optimized.rs', 'matches_reduce_branches.match_i128_u128.MatchBranchSimplification.diff', 'matches_reduce_branches.match_i16_i8.MatchBranchSimplification.diff', 'matches_reduce_branches.match_i8_i16.MatchBranchSimplification.diff', 'matches_reduce_branches.match_i8_i16_failed.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_i16.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_i16_2.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_i16_failed.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_i16_fallback.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_u16.MatchBranchSimplification.diff', 'matches_reduce_branches.match_u8_u16_2.MatchBranchSimplification.diff', 'matches_reduce_branches.rs', 'matches_u8.exhaustive_match.MatchBranchSimplification.diff', 'matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff']","['compiler/rustc_middle/src/mir', 'compiler/rustc_mir_transform/src', 'tests/codegen', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"use core::cmp::Ordering;
 
 pub fn test1(call: fn() -> Ordering) -> i32 {
 match call() {
 Ordering::Less => -1,
 Ordering::Equal => 0,
 Ordering::Greater => 1,
 }
 }
 
 pub fn test2(call: fn() -> Ordering) -> i32 {
 call() as i32
 }","use core::cmp::Ordering;
 
 pub fn test1(call: fn() -> Ordering) -> i32 {
 match call() {
 Ordering::Less => -1,
 Ordering::Equal => 0,
 Ordering::Greater => 1,
 }
 }
 
 pub fn test2(call: fn() -> Ordering) -> i32 {
 call() as i32
 }",1,,,,,,,,
106444,"{'I-ICE', 'glacier', 'requires-nightly', 'E-needs-test', 'T-compiler', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/106444,Not reproducible anymore,,1. Crash-Front-end Panic,,,,,Normalization ICE from `drop_in_place` in Mir inliner on `-Zopt-level=3`,2023-01-04T07:57:14Z,2024-03-24T04:30:38Z,,,,,,444,16,['norm-ice-106444.rs'],['tests/ui/drop'],,0,,,,,,,,,,,
106141,"{'I-ICE', 'T-compiler', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/106141,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,ICE in MIR inlining with -Zmir-opt-level=3,2022-12-25T20:02:44Z,2023-01-16T15:11:24Z,106850,https://github.com/rust-lang/rust/pull/106850,Make the inlining destination a Local.,2023/1/14 12:03,2023/1/16 15:11,21,149,"['inline.rs', 'inline_into_box_place.main.Inline.diff', 'issue_106141.outer.Inline.diff', 'issue_106141.rs']","['compiler/rustc_mir_transform/src', 'tests/mir-opt/inline', 'tests/mir-opt/inline', 'tests/mir-opt/inline']",,0,"pub fn outer() -> usize {
 inner()
 }
 
 fn index() -> usize {
 loop {}
 }
 
 #[inline]
 fn inner() -> usize {
 let buffer = &[true];
 let index = index();
 if buffer[index] {
 index
 } else {
 0
 }
 }","pub fn outer() -> usize {
 inner()
 }
 
 fn index() -> usize {
 loop {}
 }
 
 #[inline]
 fn inner() -> usize {
 let buffer = &[true];
 let index = index();
 if buffer[index] {
 index
 } else {
 0
 }
 }",,,,,,,-Zmir-opt-level=X,=-Zmir-opt-level=3,
106063,"{'A-lifetimes', 'T-compiler', 'D-invalid-suggestion', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/106063,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,2. Ownership-Lifetime,3,"Wrong suggestion for `explicit_outlives_requirements` in macro, part 2",2022-12-22T21:40:45Z,2022-12-28T00:07:41Z,106064,https://github.com/rust-lang/rust/pull/106064,Partially fix `explicit_outlives_requirements` lint in macros,2022/12/22 21:41,2022/12/28 0:07,5,546,"['item.rs', 'lib.rs', 'builtin.rs', 'lib.rs', 'edition-lint-infer-outlives-macro.fixed', 'edition-lint-infer-outlives-macro.rs', 'edition-lint-infer-outlives-macro.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_lint/src', 'compiler/rustc_span/src', 'src/test/ui/rust-2018', 'src/test/ui/rust-2018', 'src/test/ui/rust-2018']",,0,"#![warn(explicit_outlives_requirements)]
 #![allow(dead_code)]
 
 macro_rules! make_baz {
 ($a:lifetime, $b:lifetime) => {
 struct Baz<$a, $b: $a> where (): Sized, $b: $a {
 baz: &$a &$b (),
 }
 };
 }
 
 make_baz!{ 'a, 'b }","#![warn(explicit_outlives_requirements)]
 #![allow(dead_code)]
 
 macro_rules! make_baz {
 ($a:lifetime, $b:lifetime) => {
 struct Baz<$a, $b: $a> where (): Sized, $b: $a {
 baz: &$a &$b (),
 }
 };
 }
 
 make_baz!{ 'a, 'b }",,,,,1,,,,
105929,"{'T-compiler', 'A-mir-opt', 'requires-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/105929,exclude,,,,,,,`NormalizeArrayLen` MIR opt unsound due to missed writes,2022-12-20T01:21:23Z,2023-01-30T19:42:48Z,107172,https://github.com/rust-lang/rust/pull/107172,Reimplement NormalizeArrayLen based on SsaLocals,2023/1/21 21:48,2023/1/30 19:42,41,627,"['lib.rs', 'normalize_array_len.rs', 'bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff', 'bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff', 'issue_76432.rs', 'lower_array_len.array_bound.NormalizeArrayLen.diff', 'lower_array_len.array_bound_mut.NormalizeArrayLen.diff', 'lower_array_len.array_len.NormalizeArrayLen.diff', 'lower_array_len.array_len_by_value.NormalizeArrayLen.diff', 'lower_array_len.array_len_raw.NormalizeArrayLen.diff', 'lower_array_len.array_len_reborrow.NormalizeArrayLen.diff', 'lower_array_len.rs', 'lower_array_len_e2e.array_bound.PreCodegen.after.mir', 'lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir', 'lower_array_len_e2e.array_len.PreCodegen.after.mir', 'lower_array_len_e2e.array_len_by_value.PreCodegen.after.mir', 'lower_array_len_e2e.rs']","['compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'tests/mir-opt/const_prop', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,,,,,,,,,,,
105787,"{'A-trait-system', 'I-unsound', 'A-impl-trait', 'T-types', 'A-coherence', 'P-medium', 'C-bug'}",https://github.com/rust-lang/rust/issues/105787,valid,developer,2. Correctness Issues-Soundness Issues,,2. HIR-Type Infer,1. Type-Trait & Bound,2,"occurs check with aliases results in error, not ambiguity",2022-12-16T16:16:11Z,2024-12-20T13:16:04Z,117088,https://github.com/rust-lang/rust/pull/117088,,,,734,,,,P-medium,1,"// Using the higher ranked projection hack to prevent us from replacing the projection
 // with an inference variable.
 trait ToUnit<'a> {
 type Unit;
 }
 
 struct LocalTy;
 impl<'a> ToUnit<'a> for *const LocalTy {
 type Unit = ();
 }
 
 impl<'a, T: Copy + ?Sized> ToUnit<'a> for *const T {
 type Unit = ();
 }
 
 trait Overlap<T> {
 type Assoc;
 }
 
 type Assoc<'a, T> = <*const T as ToUnit<'a>>::Unit;
 
 impl<T> Overlap<T> for T {
 type Assoc = usize;
 }
 
 impl<T> Overlap<for<'a> fn(&'a (), Assoc<'a, T>)> for T
 where
 for<'a> *const T: ToUnit<'a>,
 {
 type Assoc = Box<usize>;
 }
 
 fn foo<T: Overlap<U>, U>(x: T::Assoc) -> T::Assoc {
 x
 }
 
 fn main() {
 foo::<for<'a> fn(&'a (), ()), for<'a> fn(&'a (), ())>(3usize);
 }","// Using the higher ranked projection hack to prevent us from replacing the projection
 // with an inference variable.
 trait ToUnit<'a> {
 type Unit;
 }
 
 struct LocalTy;
 impl<'a> ToUnit<'a> for *const LocalTy {
 type Unit = ();
 }
 
 impl<'a, T: Copy + ?Sized> ToUnit<'a> for *const T {
 type Unit = ();
 }
 
 trait Overlap<T> {
 type Assoc;
 }
 
 type Assoc<'a, T> = <*const T as ToUnit<'a>>::Unit;
 
 impl<T> Overlap<T> for T {
 type Assoc = usize;
 }
 
 impl<T> Overlap<for<'a> fn(&'a (), Assoc<'a, T>)> for T
 where
 for<'a> *const T: ToUnit<'a>,
 {
 type Assoc = Box<usize>;
 }
 
 fn foo<T: Overlap<U>, U>(x: T::Assoc) -> T::Assoc {
 x
 }
 
 fn main() {
 foo::<for<'a> fn(&'a (), ()), for<'a> fn(&'a (), ())>(3usize);
 }",,,,,1,,,,
105782,"{'A-trait-system', 'fixed-by-next-solver', 'I-unsound', 'T-types', 'A-coherence', 'requires-nightly', 'S-bug-has-test', 'F-specialization', 'T-compiler', 'C-bug', 'A-specialization'}",https://github.com/rust-lang/rust/issues/105782,valid,developer,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,1. Type-New Solver,5,specialization: default items completely drop candidates instead of ambiguity,2022-12-16T15:11:15Z,2024-10-15T17:21:44Z,130654,https://github.com/rust-lang/rust/pull/130654,stabilize `-Znext-solver=coherence` again,2024/9/21 7:19,2024/10/15 17:21,669,1002,"['feature_gate.rs', 'tests.rs', 'context.rs', 'config.rs', 'options.rs', 'engine.rs', '118987.rs', 'associated-types-coherence-failure.stderr', 'opaque_type_candidate_selection.rs', 'coherence-negative-outlives-lifetimes.stock.stderr', 'coherence-negative-outlives-lifetimes.with_negative_coherence.stderr', 'coherence-overlap-downstream-inherent.old.stderr', 'coherence-overlap-downstream-inherent.rs', 'coherence-overlap-downstream-inherent.stderr', 'coherence-overlap-downstream.next.stderr', 'coherence-overlap-downstream.rs', 'coherence-overlap-downstream.stderr', 'coherence-overlap-issue-23516-inherent.old.stderr', 'coherence-overlap-issue-23516-inherent.rs', 'coherence-overlap-issue-23516-inherent.stderr', 'coherence-overlap-issue-23516.old.stderr', 'coherence-overlap-issue-23516.rs', 'coherence-overlap-issue-23516.stderr', 'coherence-overlap-negate-not-use-feature-gate.stderr', 'coherence-overlap-unnormalizable-projection-0.classic.stderr', 'coherence-overlap-unnormalizable-projection-0.rs', 'coherence-overlap-unnormalizable-projection-0.stderr', 'coherence-overlap-unnormalizable-projection-1.classic.stderr', 'coherence-overlap-unnormalizable-projection-1.rs', 'coherence-overlap-unnormalizable-projection-1.stderr', 'coherent-due-to-fulfill.rs', 'incoherent-even-though-we-fulfill.rs', 'incoherent-even-though-we-fulfill.stderr', 'inter-crate-ambiguity-causes-notes.old.stderr', 'inter-crate-ambiguity-causes-notes.rs', 'inter-crate-ambiguity-causes-notes.stderr', 'negative-coherence-check-placeholder-outlives.stderr', 'negative-coherence-considering-regions.any_lt.stderr', 'negative-coherence-placeholder-region-constraints-on-unification.explicit.stderr', 'normalize-for-errors.current.stderr', 'normalize-for-errors.rs', 'normalize-for-errors.stderr', 'associated-type.next.stderr', 'associated-type.old.stderr', 'associated-type.rs', 'opaques.current.stderr', 'opaques.next.stderr', 'opaques.rs', 'orphan-check-opaque-types-not-covering.next.stderr', 'orphan-check-opaque-types-not-covering.rs', 'orphan-check-opaque-types-not-covering.stderr', 'orphan-check-projections-covering.rs', 'orphan-check-weak-aliases-not-covering.next.stderr', 'orphan-check-weak-aliases-not-covering.rs', 'orphan-check-weak-aliases-not-covering.stderr', 'skip-reporting-if-references-err.current.stderr', 'skip-reporting-if-references-err.rs', 'skip-reporting-if-references-err.stderr', 'super-trait-knowable-1.current.stderr', 'super-trait-knowable-1.rs', 'super-trait-knowable-2.rs', 'super-trait-knowable-3.current.stderr', 'super-trait-knowable-3.rs', 'unevaluated-const-ice-119731.rs', 'unevaluated-const-ice-119731.stderr', 'unknown-alias-defkind-anonconst-ice-116710.rs', 'unknown-alias-defkind-anonconst-ice-116710.stderr', 'issue-23563.stderr', 'feature-gate-with_negative_coherence.stderr', 'leak-check-in-selection-5-ambig.rs', 'structually-relate-aliases.rs', 'structually-relate-aliases.stderr', 'auto-trait-coherence.old.stderr', 'auto-trait-coherence.rs', 'auto-trait-coherence.stderr', 'coherence-treats-tait-ambig.rs', 'coherence-treats-tait-ambig.stderr', 'negative-reasoning.rs', 'negative-reasoning.stderr', 'impl-unused-tps.rs', 'impl-unused-tps.stderr', 'issue-48728.rs', 'default-impl-normalization-ambig-2.rs', 'default-impl-normalization-ambig-2.stderr', 'default-item-normalization-ambig-1.rs', 'default-item-normalization-ambig-1.stderr', 'specialization-no-default.rs', 'specialization-default-items-drop-coherence.current.stderr', 'specialization-default-items-drop-coherence.next.stderr', 'specialization-default-items-drop-coherence.rs', 'specialization-overlap-projection.current.stderr', 'specialization-overlap-projection.next.stderr', 'specialization-overlap-projection.rs', 'specialization-overlap-projection.stderr', 'issue-83613.rs', 'issue-83613.stderr', 'issue-105231.rs', 'issue-105231.stderr', 'issue-102048.rs', 'issue-102048.stderr', 'cycle-via-builtin-auto-trait-impl.rs', 'cycle-via-builtin-auto-trait-impl.stderr', 'coherence-bikeshed-intrinsic-from.rs', 'coherence-bikeshed-intrinsic-from.stderr', 'impl_trait_for_same_tait.stderr', 'implied_lifetime_wf_check.error.stderr', 'issue-104817.rs', 'issue-104817.stock.stderr']","['compiler/rustc_ast_passes/src', 'compiler/rustc_interface/src', 'compiler/rustc_middle/src/ty', 'compiler/rustc_session/src', 'compiler/rustc_session/src', 'compiler/rustc_trait_selection/src/traits', 'tests/crashes', 'tests/ui/associated-types', 'tests/ui/auto-traits', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence/occurs-check', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/coherence/super-traits', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/error-codes/e0119', 'tests/ui/feature-gates', 'tests/ui/higher-ranked/leak-check', 'tests/ui/higher-ranked', 'tests/ui/higher-ranked', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui', 'tests/ui', 'tests/ui/issues', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/coherence', 'tests/ui/specialization/defaultimpl', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/specialization', 'tests/ui/traits/alias', 'tests/ui/traits/alias', 'tests/ui/traits', 'tests/ui/traits', 'tests/ui/traits/next-solver/coherence', 'tests/ui/traits/next-solver/coherence', 'tests/ui/traits/solver-cycles', 'tests/ui/traits/solver-cycles', 'tests/ui/transmutability/malformed-program-gracefulness', 'tests/ui/transmutability/malformed-program-gracefulness', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,1,"#![feature(specialization)]
 
 trait Default {
 type Id;
 }
 
 impl<T> Default for T {
 default type Id = T;
 }
 
 trait Overlap {
 type Assoc;
 }
 
 impl Overlap for u32 {
 type Assoc = usize;
 }
 
 impl Overlap for <u32 as Default>::Id {
 type Assoc = Box<usize>;
 }","#![feature(specialization)]
 
 trait Default {
 type Id;
 }
 
 impl<T> Default for T {
 default type Id = T;
 }
 
 trait Overlap {
 type Assoc;
 }
 
 impl Overlap for u32 {
 type Assoc = usize;
 }
 
 impl Overlap for <u32 as Default>::Id {
 type Assoc = Box<usize>;
 }",,,,,,,,,#![feature(specialization)]
105779,"{'E-medium', 'E-mentor', 'T-types', 'T-compiler', 'A-type-system'}",https://github.com/rust-lang/rust/issues/105779,exclude,,,,,,,switch to `EarlyBinder` as default,2022-12-16T13:41:11Z,2023-05-16T15:51:10Z,,,,,,151,,,,,1,,,,,,,,,,,
105761,"{'A-closures', 'D-newcomer-roadblock', 'D-papercut', 'T-compiler', 'A-borrow-checker', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/105761,duplicate,,,,,,,Provide help on closures capturing `self` causing borrow checker errors,2022-12-15T21:03:14Z,2023-01-14T00:20:35Z,106641,https://github.com/rust-lang/rust/pull/106641,Provide help on closures capturing self causing borrow checker errors,2023/1/9 16:30,2023/1/14 0:20,29,255,"['conflict_errors.rs', 'mutability_errors.rs', 'issue-105761-suggest-self-for-closure.fixed', 'issue-105761-suggest-self-for-closure.rs', 'issue-105761-suggest-self-for-closure.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'tests/ui/suggestions', 'tests/ui/suggestions', 'tests/ui/suggestions']",,0,,,,,,,,,,,
105706,"{'A-testsuite', 'E-medium', 'E-mentor', 'T-bootstrap', 'A-MIR', 'E-help-wanted'}",https://github.com/rust-lang/rust/issues/105706,exclude,,,,,,,Test that the compiler/library builds with -Zmir-opt-level=3 -Zvalidate-mir,2022-12-14T17:29:16Z,2023-02-26T02:04:20Z,105736,https://github.com/rust-lang/rust/pull/105736,Test that the compiler/library builds with validate-mir,2022/12/15 6:53,2023/2/26 2:04,73,17,"['config.toml.example', 'builder.rs', 'config.rs', 'Dockerfile']","['', 'src/bootstrap', 'src/bootstrap', 'src/ci/docker/host-x86_64/mingw-check']",,0,,,,,,,,,,,
105544,"{'A-lifetimes', 'A-impl-trait', 'T-compiler', 'D-invalid-suggestion', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/105544,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,2. Ownership-Lifetime,1,E0311 for `impl Trait` parameter type suggests invalid syntax,2022-12-11T00:25:37Z,2023-01-12T10:46:17Z,106167,https://github.com/rust-lang/rust/pull/106167,Fix invalid syntax and incomplete suggestion in impl Trait parameter type suggestions for E0311,2022/12/27 0:41,2023/1/12 10:46,32,404,"['mod.rs', 'E0311.fixed', 'E0311.rs', 'E0311.stderr', 'suggest-introducing-and-adding-missing-lifetime.fixed', 'suggest-introducing-and-adding-missing-lifetime.rs', 'suggest-introducing-and-adding-missing-lifetime.stderr', 'issue-105544.fixed', 'issue-105544.rs', 'issue-105544.stderr', 'missing-lifetimes-in-signature-2.fixed', 'missing-lifetimes-in-signature-2.rs', 'missing-lifetimes-in-signature-2.stderr', 'missing-lifetimes-in-signature.stderr']","['compiler/rustc_infer/src/infer/error_reporting', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/lifetimes', 'tests/ui/lifetimes', 'tests/ui/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes', 'tests/ui/suggestions/lifetimes']",,0,"fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {
 (d, p)
 }","fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {
 (d, p)
 }",,,,,1,Sized,,,
105538,"{'P-medium', 'T-compiler', 'C-bug', 'A-mir-opt-inlining', 'regression-from-stable-to-stable', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/105538,valid,members,3. Miscompilation-Inconsistent Output Issues,,1. AST,5. Exception Handling & Report,3,MIR inlining breaks Location::caller(),2022-12-10T20:01:47Z,2023-03-20T20:05:46Z,109307,https://github.com/rust-lang/rust/pull/109307,Ignore `Inlined` spans when computing caller location.,2023/3/18 13:49,2023/3/20 20:05,100,42,"['block.rs', 'caller_location.rs', 'hygiene.rs', 'intrinsic-wrapper.rs', 'mir-inlined-macro.rs']","['compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/interpret/intrinsics', 'compiler/rustc_span/src', 'tests/ui/rfc-2091-track-caller', 'tests/ui/rfc-2091-track-caller']",P-medium,1,"use core::panic::Location;
 
 #[inline]
 fn nested() -> &'static Location<'static> {
 Location::caller()
 }
 
 fn main() {
 println!(""{:?}"", nested());
 }","use std::panic::Location;
 
 macro_rules! f {
 () => { Location::caller() }
 }
 
 #[inline(always)]
 fn g() -> &'static Location<'static> {
 f!()
 }
 
 fn main() {
 println!(""{:?}"", g());
 }",,,,1,1,,-O,rustc a.rs -O && ./a,
105498,"{'T-types', 'F-type_alias_impl_trait', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/105498,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,3,defining type-alias-impl-trait inside closures is broken,2022-12-09T16:40:44Z,2024-03-28T11:56:39Z,116891,https://github.com/rust-lang/rust/pull/116891,rework opaque type region inference,2023/10/18 14:37,2024/3/28 11:56,474,1224,"['mod.rs', 'opaque_types.rs', 'free_region_relations.rs', 'mod.rs', 'mod.rs', 'defining-use-captured-non-universal-region.infer.stderr', 'defining-use-captured-non-universal-region.rs', 'defining-use-captured-non-universal-region.statik.stderr', 'defining-use-uncaptured-non-universal-region-2.rs', 'defining-use-uncaptured-non-universal-region-3.rs', 'defining-use-uncaptured-non-universal-region.rs', 'erased-regions-in-hidden-ty.current.stderr', 'erased-regions-in-hidden-ty.next.stderr', 'erased-regions-in-hidden-ty.rs', 'impl-fn-predefined-lifetimes.rs', 'impl-fn-predefined-lifetimes.stderr', 'bad-item-bound-within-rpitit-2.rs', 'bad-item-bound-within-rpitit-2.stderr', 'early_bound.rs', 'early_bound.stderr', 'non-defining-use-lifetimes.rs', 'non-defining-use-lifetimes.stderr', 'bivariant-duplicate-lifetime-unconstrained.rs', 'defined-by-user-annotation.rs', 'defined-in-closure-external-lifetime.rs', 'defined-in-closure-external-lifetime.stderr', 'equal-lifetime-params-not-ok.rs', 'equal-lifetime-params-not-ok.stderr', 'equal-lifetime-params-ok.rs', 'generic-not-strictly-equal.basic.stderr', 'generic-not-strictly-equal.member_constraints.stderr', 'generic-not-strictly-equal.rs', 'hkl_forbidden4.rs', 'hkl_forbidden4.stderr', 'lifetime_mismatch.rs', 'lifetime_mismatch.stderr', 'multiple-def-uses-in-one-fn-lifetimes.rs', 'multiple-def-uses-in-one-fn-lifetimes.stderr', 'param_mismatch4.rs', 'param_mismatch4.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_middle/src/ty', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait/rpit', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 trait Cap<'a> {}
 impl<T> Cap<'_> for T {}
 
 mod case1 {
 type MyStr<'x> = impl Sized + super::Cap<'x>;
 fn case1<'s>(s: &'s str) {
 || { let _: MyStr<'s> = s; };
 //~^ ERROR unconstrained opaque type
 }
 }
 
 mod case2 {
 type MyStr<'x> = impl Sized + super::Cap<'x> + 'x; // note `+ 'x`
 fn case2<'s>() {
 let _: MyStr<'s> = """"; // inferred ty: &'s str
 || -> MyStr<'s> { """" }; // inferred ty: &'static str
 //~^ ERROR concrete type differs from previous defining opaque type use
 }
 }
 
 mod case3 {
 type MyStr<'x> = impl Sized + super::Cap<'x>;
 fn case3<'s>() {
 |s: &'s str| { let _: MyStr<'s> = s; };
 //~^ ERROR captures lifetime that does not appear in bounds
 }
 }","#![feature(type_alias_impl_trait)]
 trait Cap<'a> {}
 impl<T> Cap<'_> for T {}
 
 mod case1 {
 type MyStr<'x> = impl Sized + super::Cap<'x>;
 fn case1<'s>(s: &'s str) {
 || { let _: MyStr<'s> = s; };
 //~^ ERROR unconstrained opaque type
 }
 }
 
 mod case2 {
 type MyStr<'x> = impl Sized + super::Cap<'x> + 'x; // note `+ 'x`
 fn case2<'s>() {
 let _: MyStr<'s> = """"; // inferred ty: &'s str
 || -> MyStr<'s> { """" }; // inferred ty: &'static str
 //~^ ERROR concrete type differs from previous defining opaque type use
 }
 }
 
 mod case3 {
 type MyStr<'x> = impl Sized + super::Cap<'x>;
 fn case3<'s>() {
 |s: &'s str| { let _: MyStr<'s> = s; };
 //~^ ERROR captures lifetime that does not appear in bounds
 }
 }",,,,,1,Sized,,,#![feature(type_alias_impl_trait)]
105466,"{'requires-nightly', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/105466,exclude,,,,,,,MIR inliner doesn't support return place used as an index,2022-12-08T18:03:12Z,2023-01-17T20:31:06Z,,,,,,40,,,,,0,,,,,,,,,,,
105428,"{'A-mir-opt', 'requires-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/105428,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Broken MIR in encoding_rs related to MIR inlining + DestProp,2022-12-07T15:48:55Z,2022-12-18T22:01:36Z,105420,https://github.com/rust-lang/rust/pull/105420,Remove dead code after destination propagation,2022/12/7 12:20,2022/12/18 22:01,11,111,"['dest_prop.rs', 'unreachable.f.DestinationPropagation.diff', 'unreachable.rs']","['compiler/rustc_mir_transform/src', 'src/test/mir-opt/dest-prop', 'src/test/mir-opt/dest-prop']",,0,,,,,,,,,"-Zmir-opt-level=X
-Zvalidate-mir
-Zinline-mir=yes
+nightly","RUSTFLAGS=""-Zmir-opt-level=3 -Zvalidate-mir -Zinline-mir=yes"" cargo +nightly test",
105401,"{'requires-nightly', 'F-type_alias_impl_trait', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/105401,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,2,Misleading/incorrect? `closure/generator type that references itself` error,2022-12-06T23:09:48Z,2023-01-05T06:47:10Z,105409,https://github.com/rust-lang/rust/pull/105409,Don't deduce a signature that makes a closure cyclic,2022/12/7 3:50,2023/1/5 6:47,29,172,"['closure.rs', 'mod.rs', 'supertrait-hint-cycle-2.rs', 'supertrait-hint-cycle-3.rs', 'supertrait-hint-cycle.rs', 'issue-25439.stderr', 'unboxed-closure-no-cyclic-sig.stderr']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'src/test/ui/closures', 'src/test/ui/closures', 'src/test/ui/closures', 'src/test/ui/issues', 'src/test/ui/unboxed-closures']",,0,"#![feature(type_alias_impl_trait)]
 #![feature(closure_lifetime_binder)]
 
 use core::future::Future;
 
 trait AsyncFn<I, R>: FnMut(I) -> Self::Fut {
 type Fut: Future<Output = R>;
 }
 
 impl<F, I, R, Fut> AsyncFn<I, R> for F
 where
 Fut: Future<Output = R>,
 F: FnMut(I) -> Fut,
 {
 type Fut = Fut;
 }
 
 async fn call<C, R, F>(mut ctx: C, mut f: F) -> Result<R, ()>
 where
 F: for<'a> AsyncFn<&'a mut C, Result<R, ()>>
 {
 loop {
 match f(&mut ctx).await {
 Ok(val) => return Ok(val),
 Err(_) => continue,
 }
 }
 }
 
 trait Cap<'a> {}
 impl<T> Cap<'_> for T {}
 
 fn works(ctx: &mut usize) {
 let mut inner = 0;
 
 type Ret<'a, 'b: 'a> = impl Future<Output = Result<usize, ()>> + 'a + Cap<'b>;
 
 let callback = for<'a, 'b> |c: &'a mut &'b mut usize| -> Ret<'a, 'b> {
 inner += 1;
 async move { let _c = c; Ok(1usize) }
 };
 call(ctx, callback);
 }
 
 fn doesnt_work_but_should(ctx: &mut usize) {
 let mut inner = 0;
 
 type Ret<'a, 'b: 'a> = impl Future<Output = Result<usize, ()>> + 'a + Cap<'b>;
 
 call(ctx, for<'a, 'b> |c: &'a mut &'b mut usize| -> Ret<'a, 'b> {
 inner += 1;
 async move { let _c = c; Ok(1usize) }
 });
 }","#![feature(type_alias_impl_trait)]
 #![feature(closure_lifetime_binder)]
 
 use core::future::Future;
 
 trait AsyncFn<I, R>: FnMut(I) -> Self::Fut {
 type Fut: Future<Output = R>;
 }
 
 impl<F, I, R, Fut> AsyncFn<I, R> for F
 where
 Fut: Future<Output = R>,
 F: FnMut(I) -> Fut,
 {
 type Fut = Fut;
 }
 
 async fn call<C, R, F>(mut ctx: C, mut f: F) -> Result<R, ()>
 where
 F: for<'a> AsyncFn<&'a mut C, Result<R, ()>>
 {
 loop {
 match f(&mut ctx).await {
 Ok(val) => return Ok(val),
 Err(_) => continue,
 }
 }
 }
 
 trait Cap<'a> {}
 impl<T> Cap<'_> for T {}
 
 fn works(ctx: &mut usize) {
 let mut inner = 0;
 
 type Ret<'a, 'b: 'a> = impl Future<Output = Result<usize, ()>> + 'a + Cap<'b>;
 
 let callback = for<'a, 'b> |c: &'a mut &'b mut usize| -> Ret<'a, 'b> {
 inner += 1;
 async move { let _c = c; Ok(1usize) }
 };
 call(ctx, callback);
 }
 
 fn doesnt_work_but_should(ctx: &mut usize) {
 let mut inner = 0;
 
 type Ret<'a, 'b: 'a> = impl Future<Output = Result<usize, ()>> + 'a + Cap<'b>;
 
 call(ctx, for<'a, 'b> |c: &'a mut &'b mut usize| -> Ret<'a, 'b> {
 inner += 1;
 async move { let _c = c; Ok(1usize) }
 });
 }",1,1,,,1,FnMut,,,"#![feature(type_alias_impl_trait)]
#![feature(closure_lifetime_binder)]"
105386,"{'A-debuginfo', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/105386,valid,developer,5. Misoptimization,,4. Code Gen,4. Basic syntax&structure,1,Variable debuginfo introduces undefined behaviour,2022-12-06T17:54:32Z,2022-12-10T19:49:49Z,105482,https://github.com/rust-lang/rust/pull/105482,Fix invalid codegen during debuginfo lowering,2022/12/9 1:04,2022/12/10 19:49,4,178,"['debuginfo.rs', 'issue-105386-ub-in-debuginfo.rs', 'issue-105386-debuginfo-ub.rs']","['compiler/rustc_codegen_ssa/src/mir', 'src/test/codegen', 'src/test/ui/debuginfo']",,0,"#![feature(stmt_expr_attributes)]
 pub struct S([usize; 8]);
 
 #[no_mangle]
 pub fn f(x: S, y: S) -> usize {
 (#[inline(always)]|| {
 let _z = x;
 y.0[0]
 })()
 }","#![feature(stmt_expr_attributes)]
 pub struct S([usize; 8]);
 
 #[no_mangle]
 pub fn f(x: S, y: S) -> usize {
 (#[inline(always)]|| {
 let _z = x;
 y.0[0]
 })()
 }",,,,,,,,,#![feature(stmt_expr_attributes)]
105344,"{'I-unsound', 'T-compiler', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/105344,valid,members,3. Miscompilation-Safe Rust Causes UB,,6. LLVM,6. Compatibility Issues,0,Miscompilation(s) due to MIR inlining,2022-12-06T01:46:08Z,2022-12-08T04:29:05Z,,,,,,2,,,,,0,,"fn main() {
 TranslatorI.visit_pre();
 }
 
 impl TranslatorI {
 fn visit_pre(self) {
 Some(())
 .map(|_| self.flags())
 .unwrap_or_else(|| self.flags());
 }
 }
 
 struct TranslatorI;
 
 impl TranslatorI {
 fn flags(&self) {}
 }",,,,,,,"--edition=X
-Copt-level=X
-Cdebuginfo=X
-Zmir-opt-level=X",rustc --edition=2021 file.rs -C opt-level=3 -C debuginfo=2 -Zmir-opt-level=3,
105251,"{'I-unsound', 'A-impl-trait', 'T-types', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/105251,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,1,nested rpit allows capturing illegal lifetimes,2022-12-04T12:22:37Z,2022-12-06T15:35:57Z,105254,https://github.com/rust-lang/rust/pull/105254,Recurse into nested impl-trait when computing variance.,2022/12/4 13:55,2022/12/6 15:36,2,70,"['mod.rs', 'nested-return-type4.rs', 'nested-return-type4.stderr']","['compiler/rustc_hir_analysis/src/variance', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait']",P-high,0,"fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {
 async move { let _s = s; }
 }","fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {
 async move { let _s = s; }
 }",,1,,1,1,Sized,,,
105184,"{'A-trait-system', 'T-compiler', 'A-diagnostics', 'D-papercut'}",https://github.com/rust-lang/rust/issues/105184,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,2,Confusing error when summing iterator of `()`,2022-12-02T18:54:52Z,2023-11-19T21:15:54Z,105332,https://github.com/rust-lang/rust/pull/105332,,,,352,,,,,0,"fn main() {
 vec![(), ()].iter().sum::<i32>();
 }","fn main() {
 vec![(), ()].iter().sum::<i32>();
 }",,,,,,,,,
104843,"{'I-ICE', 'F-let_chains', 'glacier', 'A-MIR', 'T-compiler', '-Zvalidate-mir', 'C-bug'}",https://github.com/rust-lang/rust/issues/104843,valid,members,1. Crash-Front-end Panic,valid,3. MIR-report,5. Exception Handling & Report,4,Broken MIR ICE with let chains,2022-11-24T19:28:41Z,2023-12-23T06:12:17Z,119077,https://github.com/rust-lang/rust/pull/119077,Separate MIR lints from validation,2023/12/18 10:00,2023/12/23 6:12,393,252,"['validate.rs', 'storage_liveness.rs', 'lib.rs', 'lint.rs', 'pass_manager.rs', 'ref_prop.rs', 'options.rs', 'runtest.rs', 'reference_prop.rs', 'no-storage.rs', 'storage-live.rs', 'storage-live.stderr', 'storage-return.rs']","['compiler/rustc_const_eval/src/transform', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_session/src', 'src/tools/compiletest/src', 'tests/mir-opt', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint']",,0,"#![feature(let_chains)]
 
 struct F(Box<()>);
 
 impl F {
 fn s(&self) -> Option<&str> {
 None
 }
 }
 
 fn cex() -> Option<F> {
 None
 }
 
 pub fn main() {
 if false
 && let Some(ce) = cex()
 && let Some(_ce) = ce.s()
 {
 }
 }","#![feature(let_chains)]
 
 struct F(Box<()>);
 
 impl F {
 fn s(&self) -> Option<&str> {
 None
 }
 }
 
 fn cex() -> Option<F> {
 None
 }
 
 pub fn main() {
 if false
 && let Some(ce) = cex()
 && let Some(_ce) = ce.s()
 {
 }
 }",,,,,,,-O,-O,#![feature(let_chains)]
104826,"{'A-coroutines', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/104826,exclude,,,,,,,Remove `identity_future` indirection/hack,2022-11-24T13:24:17Z,2023-03-14T13:45:06Z,104833,https://github.com/rust-lang/rust/pull/104833,Remove `identity_future` indirection,2022/11/24 17:08,2023/3/14 13:45,110,502,"['expr.rs', 'item.rs', 'lang_items.rs', 'callee.rs', '_impl.rs', 'symbol.rs', 'suggestions.rs', 'mod.rs', 'manual_async_fn.rs', 'lib.rs', 'blocks.stdout', 'async_await.b-{closure#0}.generator_resume.0.mir', 'generator-desc.stderr', 'large_moves.attribute.stderr', 'large_moves.option.stderr', 'large_moves.rs', 'no-const-async.rs', 'no-const-async.stderr', 'async-block.rs', 'async-block.stderr', 'panic-track-caller.rs', 'async.rs', 'async.stderr', 'feature-gate-closure_track_caller.rs', 'feature-gate-closure_track_caller.stderr', 'default-body-with-rpit.rs', 'default-body-with-rpit.stderr', 'issue-78722.rs', 'issue-78722.stderr', 'fn-header-semantic-fail.rs', 'fn-header-semantic-fail.stderr', 'expected-boxed-future-isnt-pinned.stderr']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_span/src', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'library/core/src/future', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_utils/src', 'src/tools/clippy/tests/ui/author', 'tests/mir-opt/building', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await', 'tests/ui/async-await/track-caller', 'tests/ui/async-await/track-caller', 'tests/ui/async-await/track-caller', 'tests/ui/chalkify/bugs', 'tests/ui/chalkify/bugs', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/in-trait', 'tests/ui/impl-trait/issues', 'tests/ui/impl-trait/issues', 'tests/ui/parser', 'tests/ui/parser', 'tests/ui/suggestions']",,0,,,,,,,,,,,
104825,"{'T-types', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/104825,exclude,,,,,,,"""fishy"" `skip_binder` actually ignoring bound variables",2022-11-24T13:16:07Z,2022-11-25T15:52:33Z,104841,https://github.com/rust-lang/rust/pull/104841,Assert that we don't capture escaping bound vars in `Fn` trait selection,2022/11/24 18:47,2022/11/25 15:52,1,49,"['confirmation.rs', 'mod.rs', 'util.rs']","['compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits']",,0,,,,,,,,,,,
104779,"{'I-ICE', 'glacier', 'T-types', 'A-impl-trait', 'E-needs-test', 'A-variance', 'C-bug'}",https://github.com/rust-lang/rust/issues/104779,Not reproducible anymore,developer,1. Crash-Front-end Panic,,,,,"opaque types, patterns and subtyping ICE: `IndexMap: key not found`",2022-11-23T15:46:01Z,2024-03-24T04:30:37Z,,,,,,486,68,"['opaque-types-patterns-subtyping-ice-104779.rs', 'opaque-types-patterns-subtyping-ice-104779.stderr']","['tests/ui/borrowck', 'tests/ui/borrowck']",,0,,,,,,,,,,,
104764,"{'A-NLL', 'T-types', 'C-bug', 'A-borrow-checker', 'NLL-sound'}",https://github.com/rust-lang/rust/issues/104764,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,1. Type-WF,2,unnormalized user annotations can be ill-formed,2022-11-23T06:35:22Z,2024-01-17T04:40:18Z,120019,https://github.com/rust-lang/rust/pull/120019,fix fn/const items implied bounds and wf check (rebase),2024/1/16 8:28,2024/1/17 4:40,419,548,"['free_region_relations.rs', 'mod.rs', 'ascribe_user_type.rs', 'prove_predicate.rs', 'fn-item-check-trait-ref.rs', 'fn-item-check-trait-ref.stderr', 'fn-item-check-type-params.rs', 'fn-item-check-type-params.stderr', 'issue-59311.rs', 'issue-59311.stderr', 'implied-bounds-on-trait-hierarchy-1.rs', 'implied-bounds-on-trait-hierarchy-1.stderr', 'implied-bounds-on-trait-hierarchy-2.rs', 'issue_74400.rs', 'issue_74400.stderr', 'wf-nested.fail.stderr', 'wf-nested.pass_sound.stderr', 'wf-nested.rs', 'wf-associated-const.rs', 'wf-associated-const.stderr', 'wf-in-fn-type-implicit.rs', 'wf-static-method.rs', 'wf-static-method.stderr']","['compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",,0,"trait Trait { type Ty; }
 impl<T> Trait for T { type Ty = (); }
 fn test<T>() {
 let _: <&'static T as Trait>::Ty = ();
 }","trait Trait { type Ty; }
 impl<T> Trait for T { type Ty = (); }
 fn test<T>() {
 let _: <&'static T as Trait>::Ty = ();
 }",,,,,1,,,,
104763,"{'A-NLL', 'T-types', 'C-bug', 'A-borrow-checker', 'NLL-sound'}",https://github.com/rust-lang/rust/issues/104763,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,1. Type-WF,2,user annotations on associated consts can be ill-formed,2022-11-23T06:22:49Z,2024-01-17T04:40:18Z,120019,https://github.com/rust-lang/rust/pull/120019,fix fn/const items implied bounds and wf check (rebase),2024/1/16 8:28,2024/1/17 4:40,419,548,"['free_region_relations.rs', 'mod.rs', 'ascribe_user_type.rs', 'prove_predicate.rs', 'fn-item-check-trait-ref.rs', 'fn-item-check-trait-ref.stderr', 'fn-item-check-type-params.rs', 'fn-item-check-type-params.stderr', 'issue-59311.rs', 'issue-59311.stderr', 'implied-bounds-on-trait-hierarchy-1.rs', 'implied-bounds-on-trait-hierarchy-1.stderr', 'implied-bounds-on-trait-hierarchy-2.rs', 'issue_74400.rs', 'issue_74400.stderr', 'wf-nested.fail.stderr', 'wf-nested.pass_sound.stderr', 'wf-nested.rs', 'wf-associated-const.rs', 'wf-associated-const.stderr', 'wf-in-fn-type-implicit.rs', 'wf-static-method.rs', 'wf-static-method.stderr']","['compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",,0,"trait Trait {
 const TRAIT: bool;
 }
 
 impl<T> Trait for &'static T {
 const TRAIT: bool = true;
 }
 
 fn test<T>() {
 <&'static T>::TRAIT;
 }","trait Trait {
 const TRAIT: bool;
 }
 
 impl<T> Trait for &'static T {
 const TRAIT: bool = true;
 }
 
 fn test<T>() {
 <&'static T>::TRAIT;
 }",,,,,1,,,,
104736,"{'I-ICE', 'glacier', 'E-mentor', 'E-hard', 'A-MIR', 'T-compiler', '-Zvalidate-mir', 'C-bug'}",https://github.com/rust-lang/rust/issues/104736,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-report,5. Exception Handling & Report,4,Out of storage use of local for temporary caused by label break,2022-11-22T20:03:38Z,2023-12-23T06:12:17Z,119077,https://github.com/rust-lang/rust/pull/119077,Separate MIR lints from validation,2023/12/18 10:00,2023/12/23 6:12,395,252,"['validate.rs', 'storage_liveness.rs', 'lib.rs', 'lint.rs', 'pass_manager.rs', 'ref_prop.rs', 'options.rs', 'runtest.rs', 'reference_prop.rs', 'no-storage.rs', 'storage-live.rs', 'storage-live.stderr', 'storage-return.rs']","['compiler/rustc_const_eval/src/transform', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_session/src', 'src/tools/compiletest/src', 'tests/mir-opt', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint', 'tests/ui/mir/lint']",,0,"struct A;
 struct B;
 
 impl Drop for A {
 fn drop(&mut self) {}
 }
 impl Drop for B {
 fn drop(&mut self) {}
 }
 
 #[inline(always)]
 fn no_unwind() {}
 
 fn weird_temporary(a: A, b: B, nothing: ((), (), ()), x: bool) -> ((), (), ()) {
 'scope: {
 (
 {
 let _z = b;
 if x {
 break 'scope nothing;
 }
 },
 match { a } {
 _ => (),
 },
 no_unwind(),
 )
 }
 }","struct A;
 struct B;
 
 impl Drop for A {
 fn drop(&mut self) {}
 }
 impl Drop for B {
 fn drop(&mut self) {}
 }
 
 #[inline(always)]
 fn no_unwind() {}
 
 fn weird_temporary(a: A, b: B, nothing: ((), (), ()), x: bool) -> ((), (), ()) {
 'scope: {
 (
 {
 let _z = b;
 if x {
 break 'scope nothing;
 }
 },
 match { a } {
 _ => (),
 },
 no_unwind(),
 )
 }
 }",,,,,1,,,,
104639,"{'E-mentor', 'T-compiler', 'E-help-wanted', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/104639,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,2. Ownership-Lifetime,1,lifetime order breaks member constraints,2022-11-20T12:55:24Z,2022-12-15T04:21:22Z,104765,https://github.com/rust-lang/rust/pull/104765,,,,24,37,"['mod.rs', 'issue-104639-lifetime-order.rs']","['compiler/rustc_borrowck/src/region_infer', 'src/test/ui/borrowck']",,0,"async fn fail<'a, 'b, 'c>(_: &'static str) where 'a: 'c, 'b: 'c, {}
 async fn pass<'a, 'c, 'b>(_: &'static str) where 'a: 'c, 'b: 'c, {}","async fn fail<'a, 'b, 'c>(_: &'static str) where 'a: 'c, 'b: 'c, {}
 async fn pass<'a, 'c, 'b>(_: &'static str) where 'a: 'c, 'b: 'c, {}",,1,,,1,,,,
104601,"{'T-types', 'A-impl-trait', 'F-type_alias_impl_trait'}",https://github.com/rust-lang/rust/issues/104601,exclude,,,,,,,Rust does not normalize opaque types with escaping bound vars,2022-11-19T06:37:29Z,2023-06-29T18:18:49Z,113108,https://github.com/rust-lang/rust/pull/113108,Normalize opaques with late-bound vars again,2023/6/27 21:39,2023/6/29 18:18,222,119,"['project.rs', 'normalize.rs', 'codegen.rs', 'normalize-opaque-with-bound-vars.rs', 'normalize-opaque-with-bound-vars.rs']","['compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/query', 'compiler/rustc_traits/src', 'tests/ui/async-await/in-trait', 'tests/ui/impl-trait']",,0,,,,,,,,,,,
104044,"{'A-trait-system', 'A-const-generics', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/104044,duplicate,,,,,,,min_const_generics infers the wrong type depending on trait bounds in scope,2022-11-06T09:38:57Z,2024-01-26T01:14:28Z,,,,,,445,,,,,0,,,,,,,,,,,
104025,"{'regression-from-stable-to-nightly', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/104025,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,1,False E0644 closure/generator type that references itself; new in nightly-2022-11-05,2022-11-05T21:08:43Z,2022-11-07T16:33:12Z,104038,https://github.com/rust-lang/rust/pull/104038,Normalize types when deducing closure signature from supertraits,2022/11/6 2:01,2022/11/7 16:33,1,27,"['closure.rs', 'supertrait-hint-references-assoc-ty.rs']","['compiler/rustc_hir_typeck/src', 'src/test/ui/closures']",,0,"pub trait Fn0: Fn() -> Self::Out {
 type Out;
 }
 
 impl<F: Fn() -> ()> Fn0 for F {
 type Out = ();
 }
 
 pub fn closure_typer(_: impl Fn0) {}
 
 fn main() {
 closure_typer(move || {});
 }","pub trait Fn0: Fn() -> Self::Out {
 type Out;
 }
 
 impl<F: Fn() -> ()> Fn0 for F {
 type Out = ();
 }
 
 pub fn closure_typer(_: impl Fn0) {}
 
 fn main() {
 closure_typer(move || {});
 }",,,,,,,,,
104005,"{'A-lifetimes', 'I-unsound', 'T-types', 'S-bug-has-test', 'P-high', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/104005,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,1. Type-Trait & Bound,2,function type params are not checked for well-formedness,2022-11-05T13:32:41Z,2024-01-17T04:40:16Z,120019,https://github.com/rust-lang/rust/pull/120019,fix fn/const items implied bounds and wf check (rebase),2024/1/16 8:28,2024/1/17 4:40,437,548,"['free_region_relations.rs', 'mod.rs', 'ascribe_user_type.rs', 'prove_predicate.rs', 'fn-item-check-trait-ref.rs', 'fn-item-check-trait-ref.stderr', 'fn-item-check-type-params.rs', 'fn-item-check-type-params.stderr', 'issue-59311.rs', 'issue-59311.stderr', 'implied-bounds-on-trait-hierarchy-1.rs', 'implied-bounds-on-trait-hierarchy-1.stderr', 'implied-bounds-on-trait-hierarchy-2.rs', 'issue_74400.rs', 'issue_74400.stderr', 'wf-nested.fail.stderr', 'wf-nested.pass_sound.stderr', 'wf-nested.rs', 'wf-associated-const.rs', 'wf-associated-const.stderr', 'wf-in-fn-type-implicit.rs', 'wf-static-method.rs', 'wf-static-method.stderr']","['compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",P-high,0,"use std::fmt::Display;
 
 trait Displayable {
 fn display(self) -> Box<dyn Display>;
 }
 
 impl<T: Display> Displayable for (T, Option<&'static T>) {
 fn display(self) -> Box<dyn Display> {
 Box::new(self.0)
 }
 }
 
 fn extend_lt<T, U>(val: T) -> Box<dyn Display>
 where
 (T, Option<U>): Displayable,
 {
 Displayable::display((val, None))
 }
 
 fn main() {
 // The type parameter `U = &'static &'temporary str` is ill-formed
 // because it does not enforce `'temporary: 'static` ...
 let val = extend_lt(&String::from(""blah blah blah""));
 println!(""{}"", val);
 }","use std::fmt::Display;
 
 trait Displayable {
 fn display(self) -> Box<dyn Display>;
 }
 
 impl<T: Display> Displayable for (T, Option<&'static T>) {
 fn display(self) -> Box<dyn Display> {
 Box::new(self.0)
 }
 }
 
 fn extend_lt<T, U>(val: T) -> Box<dyn Display>
 where
 (T, Option<U>): Displayable,
 {
 Displayable::display((val, None))
 }
 
 fn main() {
 // The type parameter `U = &'static &'temporary str` is ill-formed
 // because it does not enforce `'temporary: 'static` ...
 let val = extend_lt(&String::from(""blah blah blah""));
 println!(""{}"", val);
 }",,,1,1,1,,,,
103840,"{'I-slow', 'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', 'A-mir-opt-inlining', 'A-LLVM'}",https://github.com/rust-lang/rust/issues/103840,valid,developer,5. Misoptimization,,6. LLVM,6. Compatibility Issues,0,Worse codegen with `mem::take(vec)` than on stable,2022-11-01T16:12:32Z,2023-04-29T19:49:50Z,,,,,,179,,,,P-medium,1,"pub fn foo(t: &mut Vec<usize>) {
 let mut taken = std::mem::take(t);
 taken.pop();
 *t = taken;
 }","pub fn foo(t: &mut Vec<usize>) {
 let mut taken = std::mem::take(t);
 taken.pop();
 *t = taken;
 }",,,,1,,,,,
103771,"{'I-ICE', 'A-closures', 'F-closure_lifetime_binder', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/103771,valid,fuzz-rustc,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,2. Ownership-Lifetime,2,ICE normalizing binder for closure,2022-10-30T19:02:59Z,2022-11-04T16:59:51Z,103780,https://github.com/rust-lang/rust/pull/103780,Fix late-bound lifetime closure ICEs in HIR typeck and MIR borrowck,2022/10/30 20:55,2022/11/4 16:59,4,199,"['mod.rs', 'universal_regions.rs', 'lifetimes.rs', 'late-bound-in-body.rs', 'nested-closures-regions.rs', 'nested-closures-regions.stderr', 'nested-closures.rs']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src', 'compiler/rustc_hir_analysis/src/collect', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder']",,0,"#![feature(closure_lifetime_binder)]
 fn main() {
 for<'a> || -> () {
 for<'c> |_: &'a ()| -> () {
 }
 };
 }","#![feature(closure_lifetime_binder)]
 fn main() {
 for<'a> || -> () {
 for<'c> |_: &'a ()| -> () {
 }
 };
 }",,,,,1,,,,#![feature(closure_lifetime_binder)]
103741,"{'A-trait-system', 'A-const-generics', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/103741,duplicate,,2. Correctness Issues-Completeness Issues,,,,,Unrelated const generic selected during type inference,2022-10-29T18:08:44Z,2024-01-26T01:14:16Z,,,,,,453,,,,,0,,,,,,,,,,,
103655,"{'T-compiler', 'A-mir-opt', 'A-debuginfo', 'C-bug'}",https://github.com/rust-lang/rust/issues/103655,valid,members,5. Misoptimization,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,3,MIR optimizations at `mir-opt-level=2` remove some debuginfo,2022-10-27T20:59:30Z,2023-10-08T12:37:11Z,116183,https://github.com/rust-lang/rust/pull/116183,Always preserve DebugInfo in DeadStoreElimination.,2023/9/26 20:45,2023/10/8 12:37,345,1582,"['bit_set.rs', 'debuginfo.rs', 'lib.rs', 'dead_store_elimination.rs', 'for_loops.rs', 'loop_expressions.rs', 'while_loops.rs', 'cycle.cycle.DeadStoreElimination.diff', 'cycle.cycle.DeadStoreElimination.panic-abort.diff', 'cycle.cycle.DeadStoreElimination.panic-unwind.diff', 'cycle.rs', 'dead_stores_better.f.DestinationPropagation.after.panic-abort.mir', 'dead_stores_better.f.DestinationPropagation.after.panic-unwind.mir', 'union.main.DestinationPropagation.panic-abort.diff', 'union.main.DestinationPropagation.panic-unwind.diff', 'issue_101973.inner.ConstProp.panic-abort.diff', 'issue_101973.inner.ConstProp.panic-unwind.diff', 'issue_59352.num_to_digit.PreCodegen.after.panic-abort.mir', 'issue_59352.num_to_digit.PreCodegen.after.panic-unwind.mir', 'checked_ops.step_forward.PreCodegen.after.mir', 'loops.filter_mapped.PreCodegen.after.mir', 'loops.int_range.PreCodegen.after.mir', 'range_iter.forward_loop.PreCodegen.after.panic-abort.mir', 'range_iter.forward_loop.PreCodegen.after.panic-unwind.mir', 'range_iter.range_iter_next.PreCodegen.after.panic-abort.mir', 'range_iter.range_iter_next.PreCodegen.after.panic-unwind.mir', 'slice_filter.variant_a-{closure#0}.PreCodegen.after.mir', 'slice_index.slice_get_unchecked_mut_range.PreCodegen.after.panic-abort.mir', 'slice_index.slice_get_unchecked_mut_range.PreCodegen.after.panic-unwind.mir', 'slice_iter.range_loop.PreCodegen.after.panic-abort.mir', 'slice_iter.range_loop.PreCodegen.after.panic-unwind.mir', 'slice_iter.reverse_loop.PreCodegen.after.panic-abort.mir', 'slice_iter.reverse_loop.PreCodegen.after.panic-unwind.mir']","['compiler/rustc_index/src', 'compiler/rustc_mir_dataflow/src', 'compiler/rustc_mir_dataflow/src', 'compiler/rustc_mir_transform/src', 'tests/incremental/hashes', 'tests/incremental/hashes', 'tests/incremental/hashes', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dead-store-elimination', 'tests/mir-opt/dest-prop', 'tests/mir-opt/dest-prop', 'tests/mir-opt/dest-prop', 'tests/mir-opt/dest-prop', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt/issues', 'tests/mir-opt/issues', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen', 'tests/mir-opt/pre-codegen']",,0,"pub fn example() {
 let a = 1;
 let b = 16;
 
 foo(a + b); // break here
 }
 
 #[inline(never)]
 fn foo(x: i32) {
 std::process::exit(x);
 }","pub fn example() {
 let a = 1;
 let b = 16;
 
 foo(a + b); // break here
 }
 
 #[inline(never)]
 fn foo(x: i32) {
 std::process::exit(x);
 }",,,,1,,,,,
103599,"{'I-ICE', 'A-impl-trait', 'T-compiler', 'regression-from-stable-to-beta', 'C-bug'}",https://github.com/rust-lang/rust/issues/103599,valid,fuzz-rustc,1. Crash-Front-end Panic,valid,2. HIR-Type Infer,1. Type-Opaque Types,1,ICE on recursive fn which returns impl T,2022-10-26T21:42:15Z,2022-10-27T10:05:13Z,103601,https://github.com/rust-lang/rust/pull/103601,Remove `commit_if_ok` probe from NLL type relation,2022/10/26 22:16,2022/10/27 10:05,0,26,"['mod.rs', 'issue-103599.rs', 'issue-103599.stderr']","['compiler/rustc_infer/src/infer/nll_relate', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait']",,0,"trait T {}
 
 fn wrap(x: impl T) -> impl T {
 wrap(wrap(x))
 }
 
 fn main() {}","trait T {}
 
 fn wrap(x: impl T) -> impl T {
 wrap(wrap(x))
 }
 
 fn main() {}",,,,,,,,,
103532,"{'A-impl-trait', 'C-tracking-issue'}",https://github.com/rust-lang/rust/issues/103532,exclude,,,,,,,Tracking Issue for `impl_trait_projections`,2022-10-25T16:22:12Z,2023-09-29T15:19:55Z,,,,,,338,,,,,0,,,,,,,,,,,
103330,"{'A-lifetimes', 'P-critical', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable', 'T-lang'}",https://github.com/rust-lang/rust/issues/103330,valid,developer,2. Correctness Issues-Completeness Issues,,1. AST,2. Ownership-Lifetime,1,function lifetime elision changed in 1.64,2022-10-21T01:33:25Z,2022-10-29T20:43:31Z,103450,https://github.com/rust-lang/rust/pull/103450,Do not consider repeated lifetime params for elision.,2022/10/23 19:37,2022/10/29 20:43,8,123,"['late.rs', 'lifetime-elision-return-type-requires-explicit-lifetime.rs', 'lifetime-elision-return-type-requires-explicit-lifetime.stderr']","['compiler/rustc_resolve/src', 'src/test/ui/lifetimes', 'src/test/ui/lifetimes']",P-critical,0,"fn foo<'a>(_: &'a str, _: &'a str) -> &str { """" }","fn foo<'a>(_: &'a str, _: &'a str) -> &str { """" }",,,,,1,,,,
103068,"{'A-debuginfo', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/103068,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,2,MIR inlining causes incorrect line numbers for inlined code,2022-10-14T21:30:27Z,2022-10-28T19:28:39Z,103071,https://github.com/rust-lang/rust/pull/103071,Fix line numbers for MIR inlined code,2022/10/14 23:28,2022/10/28 19:28,13,37,"['mod.rs', 'lib.rs', 'mir-inlined-line-numbers.rs']","['compiler/rustc_middle/src/ty', 'compiler/rustc_span/src', 'src/test/codegen']",,0,"#[inline(always)]
 fn foo() {
 bar(); // line 3
 }
 
 #[inline(never)]
 fn bar() {
 panic!(); // line 8
 }
 
 fn main() {
 foo(); // line 12
 }","#[inline(always)]
 fn foo() {
 bar(); // line 3
 }
 
 #[inline(never)]
 fn bar() {
 panic!(); // line 8
 }
 
 fn main() {
 foo(); // line 12
 }",,,,,,,"+nightly
-O",rustc +nightly -g --crate-name mir_inlining -O mir_inlining.rs,
102522,"{'E-mentor', 'A-HIR', 'T-compiler', 'E-help-wanted', 'E-easy'}",https://github.com/rust-lang/rust/issues/102522,exclude,,,,,,,Assign HirIds in HIR traversal order,2022-09-30T17:27:08Z,2024-01-06T13:43:09Z,,,,,,462,,,,,0,,,,,,,,,,,
102403,"{'A-const-eval', 'A-mir-opt', 'A-floating-point', 'C-bug'}",https://github.com/rust-lang/rust/issues/102403,valid,developer,3. Miscompilation-Inconsistent Output Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,6. Compatibility Issues,6,Sign of zero from differs between CTFE and normal execution (float % float),2022-09-28T11:46:40Z,2023-07-26T23:09:35Z,113843,https://github.com/rust-lang/rust/pull/113843,Replace in-tree `rustc_apfloat` with the new version of the crate,2023/7/18 19:58,2023/7/26 23:09,301,7823,"['dep5', 'Cargo.lock', 'NCSA.txt', 'Cargo.toml', 'ieee.rs', 'lib.rs', 'ppc.rs', 'ieee.rs', 'ppc.rs', 'Cargo.toml', 'Cargo.toml', 'Cargo.toml', 'foreign_items.rs', 'deps.rs', 'style.rs', 'apfloat-f64-roundtrip.rs', 'apfloat-remainder-regression.rs', 'apfloat-modulo-wrong.rs', 'triagebot.toml']","['.reuse', '', 'LICENSES', 'compiler/rustc_apfloat', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/src', 'compiler/rustc_apfloat/tests', 'compiler/rustc_apfloat/tests', 'compiler/rustc_const_eval', 'compiler/rustc_middle', 'compiler/rustc_mir_build', 'src/tools/miri/src/shims', 'src/tools/tidy/src', 'src/tools/tidy/src', 'tests/ui/const_prop', 'tests/ui/const_prop', 'tests/ui/numbers-arithmetic', '']",,1,"#![feature(const_fn_floating_point_arithmetic)]
 
 const fn f(one: f64) -> f64 {
 (-1.0) % one
 }
 
 const RESULT_CT : f64 = f(1.0);
 
 fn main() {
 let black_box_one = (std::env::args().len()) as f64;
 let result_rt = f(black_box_one);
 assert_eq!(RESULT_CT.is_sign_negative(), result_rt.is_sign_negative());
 }","#![feature(const_fn_floating_point_arithmetic)]
 
 const fn f(one: f64) -> f64 {
 (-1.0) % one
 }
 
 const RESULT_CT : f64 = f(1.0);
 
 fn main() {
 let black_box_one = (std::env::args().len()) as f64;
 let result_rt = f(black_box_one);
 assert_eq!(RESULT_CT.is_sign_negative(), result_rt.is_sign_negative());
 }",,,,1,,,,,#![feature(const_fn_floating_point_arithmetic)]
102400,"{'A-lifetimes', 'T-compiler', 'D-terse', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/102400,duplicate,,,,,,,Unhelpful diagnostic when infered lifetime of return value doesn't match parameter in closure,2022-09-28T10:41:12Z,2024-09-03T15:05:37Z,,,,,,706,,,,,0,,,,,,,,,,,
102360,"{'A-trait-system', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/102360,duplicate,,,,,,,"broken interaction between marker traits, lifetimes, and caching",2022-09-27T11:56:50Z,2023-03-28T18:00:05Z,102472,https://github.com/rust-lang/rust/pull/102472,stop special-casing `'static` in evaluation,2022/9/29 12:46,2023/3/28 18:00,182,253,"['freshen.rs', 'mod.rs', 'mod.rs', 'overlap-marker-trait-with-static-lifetime.rs', 'overlap-marker-trait-with-static-lifetime.stderr', 'overlapping-impl-1-modulo-regions.rs', 'overlapping-impl-1-modulo-regions.stderr']","['compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_trait_selection/src/traits/select', 'tests/ui/marker_trait_attr', 'tests/ui/marker_trait_attr', 'tests/ui/marker_trait_attr', 'tests/ui/marker_trait_attr']",,0,,,,,,,,,,,
102029,"{'C-bug', 'regression-from-stable-to-beta', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/102029,duplicate,,,,,,,lifetime rules are overly restricted in 1.65 nightly / beta,2022-09-19T19:17:06Z,2022-09-19T22:28:06Z,,,,,,0,,,,,0,,,,,,,,,,,
101973,"{'I-unsound', 'P-critical', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/101973,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Incorrect code generated by MIR optimization on nightly,2022-09-18T09:49:40Z,2022-09-21T19:58:53Z,102045,https://github.com/rust-lang/rust/pull/102045,fix ConstProp handling of written_only_inside_own_block_locals,2022/9/20 10:50,2022/9/21 19:58,3,160,"['const_prop.rs', 'issue-101973.rs', 'issue_101973.inner.ConstProp.diff']","['compiler/rustc_mir_transform/src', 'src/test/mir-opt', 'src/test/mir-opt']",P-critical,0,"#[inline]
 pub fn imm8(x: u32) -> u32 {
 let mut out = 0u32;
 out |= (x >> 0) & 0xff;
 out
 }
 
 #[inline(never)]
 pub fn inner(fields: u32) -> i64 {
 imm8(fields).rotate_right(((fields >> 8) & 0xf) << 1) as i32 as i64
 }
 
 fn main() {
 let val = inner(0xe32cf20f);
 println!(""{val:#x}"");
 }","#[inline]
 pub fn imm8(x: u32) -> u32 {
 let mut out = 0u32;
 out |= (x >> 0) & 0xff;
 out
 }
 
 #[inline(never)]
 pub fn inner(fields: u32) -> i64 {
 imm8(fields).rotate_right(((fields >> 8) & 0xf) << 1) as i32 as i64
 }
 
 fn main() {
 let val = inner(0xe32cf20f);
 println!(""{val:#x}"");
 }",,,,,,,"-O
-Cdebug-assertions=on
-Zmir-opt-level=X",O -C debug-assertions=on -Zmir-opt-level=2,
101951,"{'A-trait-system', 'A-lifetimes', 'P-critical', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/101951,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,2. Ownership-Lifetime,4,E0477 triggered with current nightly,2022-09-17T21:39:48Z,2022-09-25T12:00:43Z,102016,https://github.com/rust-lang/rust/pull/102016,implied_bounds: deal with inference vars,2022/9/19 13:12,2022/9/25 12:00,7,125,"['env.rs', 'outlives_bounds.rs', 'implied_outlives_bounds.rs', 'compare_method.rs', 'issue-101951.rs']","['compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_traits/src', 'compiler/rustc_typeck/src/check', 'src/test/ui/implied-bounds']",P-critical,0,"#![deny(elided_lifetimes_in_paths)]
 
 pub trait BuilderFn<'a> {
 type Output;
 }
 
 impl<'a, F, Out> BuilderFn<'a> for F
 where
 F: FnOnce(&'a mut ()) -> Out,
 {
 type Output = Out;
 }
 
 pub trait ConstructionFirm {
 type Builder: for<'a> BuilderFn<'a>;
 }
 
 pub trait Campus<T>
 where
 T: ConstructionFirm,
 {
 fn add_building(
 &mut self,
 building: &mut <<T as ConstructionFirm>::Builder as BuilderFn<'_>>::Output,
 );
 }
 
 struct ArchitectsInc {}
 
 impl ConstructionFirm for ArchitectsInc {
 type Builder = fn(&mut ()) -> PrettyCondo<'_>;
 }
 
 struct PrettyCondo<'a> {
 _marker: &'a mut (),
 }
 
 struct CondoEstate {}
 
 impl Campus<ArchitectsInc> for CondoEstate {
 fn add_building(&mut self, _building: &mut PrettyCondo<'_>) {
 todo!()
 }
 }","#![deny(elided_lifetimes_in_paths)]
 
 pub trait BuilderFn<'a> {
 type Output;
 }
 
 impl<'a, F, Out> BuilderFn<'a> for F
 where
 F: FnOnce(&'a mut ()) -> Out,
 {
 type Output = Out;
 }
 
 pub trait ConstructionFirm {
 type Builder: for<'a> BuilderFn<'a>;
 }
 
 pub trait Campus<T>
 where
 T: ConstructionFirm,
 {
 fn add_building(
 &mut self,
 building: &mut <<T as ConstructionFirm>::Builder as BuilderFn<'_>>::Output,
 );
 }
 
 struct ArchitectsInc {}
 
 impl ConstructionFirm for ArchitectsInc {
 type Builder = fn(&mut ()) -> PrettyCondo<'_>;
 }
 
 struct PrettyCondo<'a> {
 _marker: &'a mut (),
 }
 
 struct CondoEstate {}
 
 impl Campus<ArchitectsInc> for CondoEstate {
 fn add_building(&mut self, _building: &mut PrettyCondo<'_>) {
 todo!()
 }
 }",,,,,1,FnOnce,,,
101601,"{'A-trait-system', 'A-associated-items', 'A-lifetimes', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/101601,duplicate,,,,,,,rustc thinks a lifetime bound is necessary when passing an associated type into a nested call,2022-09-09T01:47:46Z,2022-09-11T03:31:13Z,,,,,,2,,,,,0,,,,,,,,,,,
101510,"{'C-enhancement', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/101510,question,,,,,,,match ergonomics on `&&str` is weird,2022-09-07T01:25:38Z,2023-05-24T01:37:14Z,,,,,,259,,,,,0,,,,,,,,,,,
101470,"{'A-lints', 'P-high', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable', 'A-mir-opt', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/101470,duplicate,,,,,,,const prop missing diagnostic with unrelated changes,2022-09-06T07:08:17Z,2022-09-14T07:43:48Z,,,,,,8,,,,P-high,0,,,,,,,,,,,
101453,"{'C-enhancement', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/101453,Not a bug,,,,,,,`'static` lifetime requirement on generic in order for container type to implement `'static` when using `PhantomData` ,2022-09-05T15:23:36Z,2022-09-05T19:12:37Z,,,,,,0,,,,,0,,,,,,,,,,,
101380,"{'T-compiler', 'A-trait-objects', 'A-lifetimes', 'C-discussion'}",https://github.com/rust-lang/rust/issues/101380,Not a bug,,,,,,,Different behavior of lifetimes with aliases,2022-09-03T12:55:23Z,2024-01-26T01:09:54Z,,,,,,509,,,,,0,,,,,,,,,,,
101284,"{'A-closures', 'A-lints', 'D-edition', 'T-compiler', 'A-edition-2021', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/101284,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-type & wf check,6. Compatibility Issues,1,`rust-2021-incompatible-closure-captures` fires in 2021 edition code,2022-09-01T14:20:18Z,2022-09-05T12:49:53Z,101409,https://github.com/rust-lang/rust/pull/101409,Don't fire `rust_2021_incompatible_closure_captures` in `edition = 2021` crates,2022/9/4 15:03,2022/9/5 12:49,3,23,"['builtin.rs', 'upvar.rs', 'issue-101284.rs']","['compiler/rustc_lint_defs/src', 'compiler/rustc_typeck/src/check', 'src/test/ui/lint']",,0,"#![warn(rust_2021_compatibility)]
 use std::sync::Arc;
 
 pub struct Warns {
 _test: Arc<String>, // Removing this Arc results in no warning
 foo: String,
 }
 
 impl Warns {
 pub fn test(self) -> std::io::Result<()> {
 let closure = move || {
 let _ = self.foo;
 Ok(())
 };
 closure()
 }
 }","#![warn(rust_2021_compatibility)]
 use std::sync::Arc;
 
 pub struct Warns {
 _test: Arc<String>, // Removing this Arc results in no warning
 foo: String,
 }
 
 impl Warns {
 pub fn test(self) -> std::io::Result<()> {
 let closure = move || {
 let _ = self.foo;
 Ok(())
 };
 closure()
 }
 }",,,,1,,,,,
101227,"{'A-closures', 'T-compiler', 'D-invalid-suggestion', 'C-bug', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/101227,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,5. Exception Handling & Report,1,Bad help in case of nested closures: consider adding 'move' even if closure is already marked as 'move',2022-08-31T08:41:31Z,2022-09-02T00:54:01Z,101285,https://github.com/rust-lang/rust/pull/101285,,,,1,,,,,0,"fn main() {
 let mut vec: Vec<i32> = Vec::new();
 let closure = move || {
 vec.clear();
 let mut iter = vec.iter();
 move || { iter.next() }
 };
 }","fn main() {
 let mut vec: Vec<i32> = Vec::new();
 let closure = move || {
 vec.clear();
 let mut iter = vec.iter();
 move || { iter.next() }
 };
 }",,,,,,,,,
101186,{'A-impl-trait'},https://github.com/rust-lang/rust/issues/101186,exclude,,,,,,,handle_opaque_type likely mis-uses `eq` relation,2022-08-30T07:19:45Z,2022-10-30T12:10:11Z,,,,,,61,,,,,0,,,,,,,,,,,
100905,"{'A-impl-trait', 'AsyncAwait-Triaged', 'WG-async', 'C-bug'}",https://github.com/rust-lang/rust/issues/100905,exclude,,,,,,,Closure returned as `impl FnOnce` incorrectly borrows captured used-by-value iff it is `Copy`,2022-08-23T05:11:41Z,2024-02-26T17:13:38Z,,,,,,552,,,,,0,,,,,,,,,,,
100882,"{'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/100882,duplicate,,,,,,,Type inference breaks from a seemingly unrelated change,2022-08-22T15:29:35Z,2023-03-14T11:26:15Z,,,,,,203,,,,,0,,,,,,,,,,,
100800,"{'requires-nightly', 'F-type_alias_impl_trait', 'C-bug', 'A-closures'}",https://github.com/rust-lang/rust/issues/100800,valid,members,3. Miscompilation-Inconsistent Output Issues,,2. HIR-type & wf check,5. Exception Handling & Report,1,Explicitly stated argument-type of a closure gets overwritten by its type alias,2022-08-20T11:10:11Z,2022-09-16T09:57:55Z,101753,https://github.com/rust-lang/rust/pull/101753,Prefer explict closure sig types over expected ones,2022/9/13 10:10,2022/9/16 9:57,26,117,"['closure.rs', 'retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir', 'expect-fn-supply-fn.stderr', 'expect-two-infer-vars-supply-ty-with-bound-region.stderr', 'closure_args.rs', 'closure_args2.rs', 'issue-60371.stderr']","['compiler/rustc_typeck/src/check', 'src/test/mir-opt', 'src/test/ui/closure-expected-type', 'src/test/ui/closure-expected-type', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait,)]
 
 trait Anything {}
 impl<T> Anything for T {}
 type Input = impl Anything;
 fn run<F: FnOnce(Input) -> ()>(f: F, i: Input) {
 f(i);
 }
 
 fn main() {
 run(|x: u32| {println!(""{x}"");}, 0);
 }","#![feature(type_alias_impl_trait,)]
 
 trait Anything {}
 impl<T> Anything for T {}
 type Input = impl Anything;
 fn run<F: FnOnce(Input) -> ()>(f: F, i: Input) {
 f(i);
 }
 
 fn main() {
 run(|x: u32| {println!(""{x}"");}, 0);
 }",,,,,,FnOnce,,,"#![feature(type_alias_impl_trait,)]"
100615,"{'A-lifetimes', 'E-mentor', 'P-high', 'T-compiler', 'E-help-wanted', 'D-terse', 'E-easy', 'regression-from-stable-to-stable', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/100615,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,2. Ownership-Lifetime,1,Anon lifetime in `impl Trait` no longer suggests adding a lifetime parameter,2022-08-16T08:24:04Z,2022-11-07T21:02:58Z,102323,https://github.com/rust-lang/rust/pull/102323,,,,83,,,,P-high,0,fn foo(_: impl Iterator<Item = &u32>) {},fn foo(_: impl Iterator<Item = &u32>) {},,,,,,,,,
100476,"{'I-hang', 'P-medium', 'T-compiler', 'regression-from-stable-to-beta', 'C-bug', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/100476,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,`rustc` hangs on a recursive function marked with `#[inline]`,2022-08-13T03:32:39Z,2022-08-19T22:23:01Z,100522,https://github.com/rust-lang/rust/pull/100522,Only check the `DefId` for the recursion check in MIR inliner.,2022/8/14 9:38,2022/8/19 22:23,6,38,"['inline.rs', 'polymorphic-recursion.rs']","['compiler/rustc_mir_transform/src', 'src/test/mir-opt/inline']",P-medium,0,"#![feature(decl_macro)]
 
 macro emit($($m:ident)*) {$(
 // Randomize `def_path_hash` by defining them under a module with
 // different names
 pub mod $m {
 pub trait Tr {
 type Next: Tr;
 }
 
 pub fn hoge<const N: usize, T: Tr>() {
 inner::<N, T>();
 }
 
 #[inline(always)]
 fn inner<const N: usize, T: Tr>() {
 inner::<N, T::Next>();
 }
 }
 )*}
 
 // Increase the chance of triggering the bug
 emit!(
 m00 m01 m02 m03 m04 m05 m06 m07 m08 m09
 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19
 );","#![feature(decl_macro)]
 
 macro emit($($m:ident)*) {$(
 // Randomize `def_path_hash` by defining them under a module with
 // different names
 pub mod $m {
 pub trait Tr {
 type Next: Tr;
 }
 
 pub fn hoge<const N: usize, T: Tr>() {
 inner::<N, T>();
 }
 
 #[inline(always)]
 fn inner<const N: usize, T: Tr>() {
 inner::<N, T::Next>();
 }
 }
 )*}
 
 // Increase the chance of triggering the bug
 emit!(
 m00 m01 m02 m03 m04 m05 m06 m07 m08 m09
 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19
 );",,,,,,,,,
100427,"{'E-mentor', 'A-HIR', 'E-help-wanted', 'E-easy'}",https://github.com/rust-lang/rust/issues/100427,exclude,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100027,"{'A-lifetimes', 'T-compiler', 'D-invalid-suggestion', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/100027,duplicate,,4. Diagnostic Issues-Incorrect Warning/Error,,,,,Stable Rust erroneously suggests GAT to fix missing lifetime in associated type,2022-08-01T15:31:20Z,2024-11-21T10:44:14Z,,,,,,842,,,,,0,,,,,,,,,,,
99914,"{'I-ICE', 'glacier', 'A-impl-trait', 'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/99914,valid,members,1. Crash-Front-end Panic,invalid,2. HIR-Type Infer,2. Ownership-Lifetime,1,"ICE: index out of bounds: the len is 323 but the index is 324, ena-0.14.0/src/snapshot_vec.rs:199:10",2022-07-29T17:48:38Z,2022-08-30T17:33:36Z,99928,https://github.com/rust-lang/rust/pull/99928,Do not leak type variables from opaque type relation,2022/7/30 0:46,2022/8/30 17:33,31,51,"['sub.rs', 'issue-99914.rs', 'issue-99914.stderr']","['compiler/rustc_infer/src/infer', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait']",P-medium,0,,"struct Error;
 
 fn foo() {
 let initial_exchange: Result<usize, Error> = todo!();
 initial_exchange.and_then(|_|
 serve_udp_tunnel()
 ).await;
 }
 
 async fn serve_udp_tunnel() {}",,1,,,,,,,
99838,"{'E-needs-bisection', 'I-unsound', 'regression-untriaged', 'A-MIR', 'P-high', 'C-bug'}",https://github.com/rust-lang/rust/issues/99838,valid,developer,3. Miscompilation-Safe Rust Causes UB,,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,1,Misaligned reference from drop field in packed struct,2022-07-28T03:56:08Z,2022-08-03T19:02:42Z,100064,https://github.com/rust-lang/rust/pull/100064,fix is_disaligned logic for nested packed structs,2022/8/2 16:23,2022/8/3 19:02,6,179,"['alignment.rs', 'issue-99838.rs', 'unaligned_references.rs', 'unaligned_references.stderr']","['compiler/rustc_const_eval/src/util', 'src/test/ui/issues', 'src/test/ui/lint', 'src/test/ui/lint']",P-high,0,"struct U16(u16);
 
 impl Drop for U16 {
 fn drop(&mut self) {
 println!(""{:p}"", self);
 }
 }
 
 struct HasDrop;
 
 impl Drop for HasDrop {
 fn drop(&mut self) {}
 }
 
 #[repr(packed)]
 struct Misalign(u8, Wrapper);
 
 struct Wrapper {
 _a: U16,
 b: HasDrop,
 }
 
 fn main() {
 let m = Misalign(
 0,
 Wrapper {
 _a: U16(10),
 b: HasDrop,
 },
 );
 let _x = m.1.b;
 }","struct U16(u16);
 
 impl Drop for U16 {
 fn drop(&mut self) {
 println!(""{:p}"", self);
 }
 }
 
 struct HasDrop;
 
 impl Drop for HasDrop {
 fn drop(&mut self) {}
 }
 
 #[repr(packed)]
 struct Misalign(u8, Wrapper);
 
 struct Wrapper {
 _a: U16,
 b: HasDrop,
 }
 
 fn main() {
 let m = Misalign(
 0,
 Wrapper {
 _a: U16(10),
 b: HasDrop,
 },
 );
 let _x = m.1.b;
 }",,,,,,,"+nightly
-Copt-level=X",rustc +nightly -Copt-level=3 test.rs,
99793,"{'I-cycle', 'A-impl-trait', 'T-compiler', 'A-const-eval', 'C-bug'}",https://github.com/rust-lang/rust/issues/99793,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,1. Type-Opaque Types,3,"False-positive ""cycle detected"" in `const fn` with RPIT",2022-07-27T03:37:31Z,2024-07-25T00:59:52Z,122192,https://github.com/rust-lang/rust/pull/122192,Do not try to reveal hidden types when trying to prove auto-traits in the defining scope,2024/3/8 12:41,2024/7/25 0:59,728,508,"['qualifs.rs', 'util.rs', 'candidate_assembly.rs', 'mod.rs', 'opaque_types.stderr', 'const-fn-cycle.rs', 'const-fn-cycle.stderr', 'const-promoted-opaque.atomic.stderr', 'const-promoted-opaque.rs', 'const-promoted-opaque.string.stderr', 'auto-trait-selection-freeze.next.stderr', 'auto-trait-selection-freeze.old.stderr', 'auto-trait-selection-freeze.rs', 'auto-trait-selection.next.stderr', 'auto-trait-selection.old.stderr', 'auto-trait-selection.rs', 'call_method_on_inherent_impl_ref.current.stderr', 'call_method_on_inherent_impl_ref.next.stderr', 'call_method_on_inherent_impl_ref.rs', 'const_check_false_cycle.rs', 'unsized_coercion3.next.stderr', 'unsized_coercion3.old.stderr', 'unsized_coercion3.rs', 'unsized_coercion5.old.stderr', 'unsized_coercion5.rs', 'ice-120503-async-const-method.rs', 'ice-120503-async-const-method.stderr', 'in-where-clause.rs', 'in-where-clause.stderr', 'reveal_local.rs', 'reveal_local.stderr']","['compiler/rustc_const_eval/src/check_consts', 'compiler/rustc_middle/src/ty', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'tests/ui/const-generics', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait/rpit', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/rfcs/rfc-2632-const-trait-impl', 'tests/ui/rfcs/rfc-2632-const-trait-impl', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",,0,"const fn f() -> impl Eq { g() }
 const fn g() {}
 // OK: const fn f() -> impl Eq { g(); }
 // OK: const fn f() -> impl Eq {}
 // OK: const fn f() -> impl Eq { (g(),).0 }","const fn f() -> impl Eq { g() }
 const fn g() {}
 // OK: const fn f() -> impl Eq { g(); }
 // OK: const fn f() -> impl Eq {}
 // OK: const fn f() -> impl Eq { (g(),).0 }",,,,,,,,,
99727,"{'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/99727,duplicate,,,,,,,Default type parameters are not used in type inference,2022-07-25T17:30:00Z,2024-01-25T15:05:30Z,,,,,,548,,,,,0,,,,,,,,,,,
99642,"{'I-ICE', 'glacier', 'A-impl-trait', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/99642,duplicate,,,,,,,ICE on nested RPIT: cannot prove CoerceUnsized predicate,2022-07-23T14:15:21Z,2022-07-28T16:22:17Z,99714,https://github.com/rust-lang/rust/pull/99714,Fix regression introduced with #99383,2022/7/25 12:51,2022/7/28 16:22,5,40,"['evaluate_obligation.rs', 'type_op.rs', 'issue-99642-2.rs', 'issue-99642.rs', 'issue-53398-cyclic-types.stderr']","['compiler/rustc_traits/src', 'compiler/rustc_traits/src', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/type-alias-impl-trait']",,1,,,,,,,,,,,
99597,"{'A-trait-system', 'T-compiler', 'D-invalid-suggestion', 'C-bug', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/99597,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,1,Incorrect compiler hint on missing stricter trait bound,2022-07-22T10:58:32Z,2023-05-16T21:39:51Z,111610,https://github.com/rust-lang/rust/pull/111610,fix(diagnostic): wrap parens for ref impl trait param,2023/5/15 17:46,2023/5/16 21:39,298,107,"['suggest.rs', 'issue-99597.rs', 'issue-99597.stderr']","['compiler/rustc_hir_typeck/src/method', 'tests/ui/suggestions', 'tests/ui/suggestions']",,0,"trait T1 { }
 
 trait T2 {
 fn test(&self) { }
 }
 
 fn go(s: &impl T1) {
 s.test();
 }","trait T1 { }
 
 trait T2 {
 fn test(&self) { }
 }
 
 fn go(s: &impl T1) {
 s.test();
 }",,,,,,,,,
99522,"{'D-newcomer-roadblock', 'D-papercut', 'A-inference', 'T-compiler', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/99522,Not a bug,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Add hints of semicolon to curly brace(d) statements,2022-07-20T18:32:03Z,2023-01-07T22:26:04Z,,,,,,171,,,,,0,,,,,,,,,,,
99490,"{'A-impl-trait', 'T-compiler', 'F-type_alias_impl_trait', 'C-bug'}",https://github.com/rust-lang/rust/issues/99490,valid,members,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,4,MIR dead code analysis affects TAIT inference,2022-07-20T03:27:55Z,2022-10-14T01:28:12Z,102700,https://github.com/rust-lang/rust/pull/102700,Check hidden types in dead code,2022/10/5 9:32,2022/10/14 1:28,85,706,"['opaque_types.rs', 'session_diagnostics.rs', 'writeback.rs', 'type_of.rs', 'context.rs', 'diagnostics.rs', 'mod.rs', 'opaque_types.rs', 'function_interfaces.rs', 'issue-86800.stderr', 'different_defining_uses_never_type.rs', 'different_defining_uses_never_type.stderr', 'different_defining_uses_never_type3.rs', 'different_defining_uses_never_type3.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'src/test/incremental/hashes', 'src/test/ui/impl-trait/issues', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 
 type Tait = impl Sized;
 
 struct One;
 fn one() -> Tait { One }
 
 struct Two<T>(T);
 fn two() -> Tait { Two::<()>(todo!()) }","#![feature(type_alias_impl_trait)]
 
 type Tait = impl Sized;
 
 struct One;
 fn one() -> Tait { One }
 
 struct Two<T>(T);
 fn two() -> Tait { Two::<()>(todo!()) }",,,,,,Sized,,,#![feature(type_alias_impl_trait)]
99190,"{'A-async-await', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/99190,Not reproducible anymore,,,,,,,`async fn` doesn't compile if it includes at least two generic lifetimes and at least one `'static` lifetime,2022-07-12T19:04:12Z,2024-01-25T21:43:55Z,,,,,,562,,,,,0,,,,,,,,,,,
99180,"{'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/99180,exclude,,,,,,,"MIR building optimizes away some place expressions around ""_"" patterns even with -Zmir-opt-level=0",2022-07-12T13:13:04Z,2023-04-24T09:51:12Z,,,,,,285,,,,,0,,,,,,,,,,,
99160,"{'T-opsem', 'C-discussion', 'finished-final-comment-period', 'A-MIR', 'disposition-close'}",https://github.com/rust-lang/rust/issues/99160,exclude,,,,,,,Should we allow StorageLive on a live local?,2022-07-11T16:39:04Z,2024-06-19T13:33:44Z,126154,https://github.com/rust-lang/rust/pull/126154,StorageLive: refresh storage (instead of UB) when local is already live,2024/6/8 10:08,2024/6/19 13:33,708,82,"['messages.ftl', 'eval_context.rs', 'syntax.rs', 'storage-live-dead-var.rs', 'storage-live-dead-var.stderr', 'storage-live-resets-var.rs', 'storage-live-resets-var.stderr']","['compiler/rustc_const_eval', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_middle/src/mir', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail']",,0,,,,,,,,,,,
99158,"{'A-lifetimes', 'I-unsound', 'T-compiler', 'A-variance', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/99158,duplicate,,3. Miscompilation-Safe Rust Causes UB,,,,,"Implied bounds of function are not enforced if you don't call it directly. (But you can call it indirectly...) (Somehow, variance is involved even though it didn鈥檛 look like it initially鈥?",2022-07-11T15:53:19Z,2022-07-11T16:24:44Z,,,,,,0,,,,,0,,,,,,,,,,,
99021,"{'T-compiler', 'A-MIR'}",https://github.com/rust-lang/rust/issues/99021,exclude,,,,,,,MIR: Compute always live locals more efficiently,2022-07-07T17:03:48Z,2022-07-13T15:10:46Z,,,,,,5,,,,,0,,,,,,,,,,,
98997,"{'A-async-await', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/98997,Not reproducible anymore,,,,,,,"False-positive ""temporary dropped while borrowed"" involving return-position impl Trait",2022-07-07T03:23:28Z,2024-01-26T01:05:49Z,,,,,,567,,,,,0,,,,,,,,,,,
98958,{'A-mir-opt'},https://github.com/rust-lang/rust/issues/98958,exclude,,,,,,,enable ConstProp pass based on MIR opt level,2022-07-05T19:53:01Z,2022-07-09T06:06:08Z,,,,,,3,,,,,0,,,,,,,,,,,
98896,"{'T-compiler', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/98896,valid,developer,5. Misoptimization,,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,3,StorageDead is not dominated by StorageLive,2022-07-04T15:31:29Z,2024-06-19T13:33:45Z,126154,https://github.com/rust-lang/rust/pull/126154,StorageLive: refresh storage (instead of UB) when local is already live,2024/6/8 10:08,2024/6/19 13:33,715,82,"['messages.ftl', 'eval_context.rs', 'syntax.rs', 'storage-live-dead-var.rs', 'storage-live-dead-var.stderr', 'storage-live-resets-var.rs', 'storage-live-resets-var.stderr']","['compiler/rustc_const_eval', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_middle/src/mir', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail', 'src/tools/miri/tests/fail']",,0,"struct E {
 g: i32,
 f: i32,
 }
 
 fn test(a: &E, b: &E) -> bool {
 a.g == b.g && a.f == b.f
 }","struct E {
 g: i32,
 f: i32,
 }
 
 fn test(a: &E, b: &E) -> bool {
 a.g == b.g && a.f == b.f
 }",,,,,,,"+nightly
-Zdump-mir=all
-Zdump-mir-dataflow=yes
-Zdump-mir-graphviz=yes",rustc +nightly -Zdump-mir=all -Zdump-mir-dataflow=y -Zdump-mir-graphviz=y --crate-type lib test.rs,
98852,"{'A-associated-items', 'T-types', 'P-medium', 'C-bug', 'A-implied-bounds', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/98852,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Trait & Bound,3,implied bounds from impl header are not used in associated functions/consts,2022-07-03T16:41:59Z,2024-01-17T04:40:17Z,120019,https://github.com/rust-lang/rust/pull/120019,fix fn/const items implied bounds and wf check (rebase),2024/1/16 8:28,2024/1/17 4:40,562,548,"['free_region_relations.rs', 'mod.rs', 'ascribe_user_type.rs', 'prove_predicate.rs', 'fn-item-check-trait-ref.rs', 'fn-item-check-trait-ref.stderr', 'fn-item-check-type-params.rs', 'fn-item-check-type-params.stderr', 'issue-59311.rs', 'issue-59311.stderr', 'implied-bounds-on-trait-hierarchy-1.rs', 'implied-bounds-on-trait-hierarchy-1.stderr', 'implied-bounds-on-trait-hierarchy-2.rs', 'issue_74400.rs', 'issue_74400.stderr', 'wf-nested.fail.stderr', 'wf-nested.pass_sound.stderr', 'wf-nested.rs', 'wf-associated-const.rs', 'wf-associated-const.stderr', 'wf-in-fn-type-implicit.rs', 'wf-static-method.rs', 'wf-static-method.stderr']","['compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/borrowck', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/higher-ranked/trait-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/implied-bounds', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/lifetimes/lifetime-errors', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",P-medium,0,"/// A type with an implied bound `'b: 'a`
 struct Ty<'a, 'b>(&'a &'b ());
 
 impl<'a, 'b> Ty<'a, 'b> // <- tait or inherent impl
 where
 //'b: 'a, // <- fixed by an explicit bound
 {
 fn f() { // <- no `Self` in signature
 Self;
 //~^ ERROR lifetime bound not satisfied
 // Cannot prove WF of `Self` because `'b: 'a` is not known to hold
 }
 }","/// A type with an implied bound `'b: 'a`
 struct Ty<'a, 'b>(&'a &'b ());
 
 impl<'a, 'b> Ty<'a, 'b> // <- tait or inherent impl
 where
 //'b: 'a, // <- fixed by an explicit bound
 {
 fn f() { // <- no `Self` in signature
 Self;
 //~^ ERROR lifetime bound not satisfied
 // Cannot prove WF of `Self` because `'b: 'a` is not known to hold
 }
 }",,,,,1,,,,
98833,"{'A-code-coverage', 'regression-untriaged', 'P-critical', 'T-compiler', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/98833,valid,members,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,"Recent nightly started ICEing with ""No counters provided the source_hash for used function""",2022-07-03T02:05:25Z,2022-07-26T07:09:29Z,99711,https://github.com/rust-lang/rust/pull/99711,Remove reachable coverage without counters,2022/7/25 12:17,2022/7/26 7:09,23,60,"['simplify.rs', 'expected_show_coverage.inline-dead.txt', 'inline-dead.rs']","['compiler/rustc_mir_transform/src', 'src/test/run-make-fulldeps/coverage-reports', 'src/test/run-make-fulldeps/coverage']",P-critical,1,,"use once_cell::sync::Lazy;
 
 pub static NULL_TLV: Lazy<asn1::Tlv<'static>> =
 Lazy::new(|| asn1::parse_single(""\x05\x00"").unwrap());",,,,,,,,crate,
98821,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'A-mir-opt-inlining'}",https://github.com/rust-lang/rust/issues/98821,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,ICE during mir inlining: None in compiler/rustc_mir_transform/src/inline.rs:185:32,2022-07-02T20:39:03Z,2022-07-04T09:23:02Z,98823,https://github.com/rust-lang/rust/pull/98823,Fix rust-call ICE in mir-inliner,2022/7/2 21:42,2022/7/4 9:23,1,17,"['inline.rs', 'rustcall-generic.rs']","['compiler/rustc_mir_transform/src', 'src/test/ui/abi']",,0,"// check-pass
 #![feature(unboxed_closures)]
 
 extern ""rust-call"" fn foo<T>(_: T) {}
 
 fn main() {
 foo(());
 foo((1, 2));
 }","// check-pass
 #![feature(unboxed_closures)]
 
 extern ""rust-call"" fn foo<T>(_: T) {}
 
 fn main() {
 foo(());
 foo((1, 2));
 }",,,,,,,-Zmir-opt-level=X,rustc ./src/test/ui/abi/rustcall-generic.rs -Zmir-opt-level=3,
98719,"{'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/98719,duplicate,,,,,,,lifetime bound when returning impl Trait is not considered,2022-06-30T15:00:07Z,2023-09-16T11:11:00Z,,,,,,442,,,,,0,,,,,,,,,,,
98543,"{'A-associated-items', 'T-types', 'I-unsound', 'P-high', 'C-bug', 'A-implied-bounds'}",https://github.com/rust-lang/rust/issues/98543,valid,developer,2. Correctness Issues-Soundness Issues,,3. MIR-Borrow Check,1. Type-Trait & Bound,6,implied bounds from associated types may not actually get implied pt 2.,2022-06-26T15:29:15Z,2022-08-19T10:03:14Z,99217,https://github.com/rust-lang/rust/pull/99217,,,,53,,,,P-high,0,"trait Trait {
 type Type;
 }
 
 impl<T> Trait for T {
 type Type = ();
 }
 
 fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str
 where
 for<'what, 'ever> &'what &'ever (): Trait,
 {
 s
 }
 
 fn main() {
 let x = String::from(""Hello World!"");
 let y = f(&x, ());
 drop(x);
 println!(""{}"", y);
 }","trait Trait {
 type Type;
 }
 
 impl<T> Trait for T {
 type Type = ();
 }
 
 fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str
 where
 for<'what, 'ever> &'what &'ever (): Trait,
 {
 s
 }
 
 fn main() {
 let x = String::from(""Hello World!"");
 let y = f(&x, ());
 drop(x);
 println!(""{}"", y);
 }",,,,,1,,,,
98444,"{'A-lints', 'P-medium', 'E-needs-test', 'T-compiler', 'L-unconditional_panic', 'C-bug', 'regression-from-stable-to-stable', 'A-mir-opt', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/98444,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,3. MIR-MIR Transform,3. Opt-Missing Cases,1,Taking a shared reference of an array suppresses the unconditional_panic lint,2022-06-24T07:00:06Z,2024-10-05T06:18:29Z,129517,https://github.com/rust-lang/rust/pull/129517,Compute array length from type for unconditional panic lint. ,2024/8/24 18:37,2024/10/5 6:18,833,48,"['known_panics_lint.rs', 'unwrap_used.fixed', 'unwrap_used.rs', 'unwrap_used.stderr', 'get_unwrap.fixed', 'get_unwrap.rs', 'get_unwrap.stderr', 'unconditional_panic_promoted.rs', 'unconditional_panic_promoted.stderr']","['compiler/rustc_mir_transform/src', 'src/tools/clippy/tests/ui-toml/unwrap_used', 'src/tools/clippy/tests/ui-toml/unwrap_used', 'src/tools/clippy/tests/ui-toml/unwrap_used', 'src/tools/clippy/tests/ui', 'src/tools/clippy/tests/ui', 'src/tools/clippy/tests/ui', 'tests/ui/lint', 'tests/ui/lint']",P-medium,1,"fn main() {
 let xs: [i32; 5] = [1, 2, 3, 4, 5];
 let _ = &xs; // this line suppresses the `unconditional_panic` lint
 let _ = xs[7];
 }","fn main() {
 let xs: [i32; 5] = [1, 2, 3, 4, 5];
 let _ = &xs; // this line suppresses the `unconditional_panic` lint
 let _ = xs[7];
 }",,,,,,,,,
98117,"{'A-lifetimes', 'I-unsound', 'T-types', 'S-bug-has-test', 'P-high', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/98117,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-trait solving,2. Ownership-Lifetime,3,Unsoundness due to where clauses not checked for well-formedness,2022-06-15T00:14:39Z,2024-08-05T17:03:04Z,124336,https://github.com/rust-lang/rust/pull/124336,Enforce supertrait outlives obligations hold when confirming impl,2024/4/24 14:27,2024/8/5 17:03,782,147,"['structural_traits.rs', 'trait_goals.rs', 'mod.rs', 'inherent.rs', 'implied-bounds-unnorm-associated-type-5.rs', 'implied-bounds-unnorm-associated-type-5.stderr', 'static-lifetime.rs', 'static-lifetime.stderr', 'wf-in-where-clause-static.current.stderr', 'wf-in-where-clause-static.next.stderr', 'wf-in-where-clause-static.rs']","['compiler/rustc_next_trait_solver/src/solve/assembly', 'compiler/rustc_next_trait_solver/src/solve', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_type_ir/src', 'tests/ui/fn', 'tests/ui/fn', 'tests/ui/static', 'tests/ui/static', 'tests/ui/wf', 'tests/ui/wf', 'tests/ui/wf']",P-high,0,"trait Outlives<'a>: 'a {}
 impl<'a, T> Outlives<'a> for &'a T {}
 
 fn step2<T>(t: T) -> &'static str
 where
 &'static T: Outlives<'static>,
 T: AsRef<str>,
 {
 AsRef::as_ref(Box::leak(Box::new(t) as Box<dyn AsRef<str> + 'static>))
 }
 
 fn step1<T>(t: T) -> &'static str
 where
 for<'a> &'a T: Outlives<'a>,
 T: AsRef<str>,
 {
 step2(t)
 }
 
 fn main() {
 let s: &'static str = step1(&String::from(""blah blah blah""));
 println!(""{s}"");
 }","trait Outlives<'a>: 'a {}
 impl<'a, T> Outlives<'a> for &'a T {}
 
 fn step2<T>(t: T) -> &'static str
 where
 &'static T: Outlives<'static>,
 T: AsRef<str>,
 {
 AsRef::as_ref(Box::leak(Box::new(t) as Box<dyn AsRef<str> + 'static>))
 }
 
 fn step1<T>(t: T) -> &'static str
 where
 for<'a> &'a T: Outlives<'a>,
 T: AsRef<str>,
 {
 step2(t)
 }
 
 fn main() {
 let s: &'static str = step1(&String::from(""blah blah blah""));
 println!(""{s}"");
 }",,,1,,1,,,,
98016,"{'glacier', 'E-needs-test', 'T-compiler', 'PG-portable-simd', 'C-bug', 'I-crash', 'A-LLVM', 'A-SIMD', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/98016,valid,icemaker,1. Crash-Back-end Crash,,6. LLVM,6. Compatibility Issues,0,portable simd: -Zmir-opt-level=3 causes LLVM ERROR,2022-06-12T06:18:01Z,2023-07-13T18:15:12Z,113603,https://github.com/rust-lang/rust/pull/113603,Test simd-wide-sum for codegen error,2023/7/12 2:41,2023/7/13 18:15,396,37,"['header.rs', 'runtest.rs', 'simd-wide-sum.rs']","['src/tools/compiletest/src', 'src/tools/compiletest/src', 'tests/codegen']",,0,"#![crate_type = ""lib""]
 #![feature(portable_simd)]
 
 use std::simd::Simd;
 const N: usize = 8;
 
 #[no_mangle]
 // CHECK-LABEL: @wider_reduce_into_iter
 pub fn wider_reduce_into_iter(x: Simd<u8, N>) -> u16 {
 // CHECK: zext <8 x i8>
 // CHECK-SAME: to <8 x i16>
 // CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>
 x.to_array().into_iter().map(u16::from).sum()
 }","#![crate_type = ""lib""]
 #![feature(portable_simd)]
 
 use std::simd::Simd;
 const N: usize = 8;
 
 #[no_mangle]
 // CHECK-LABEL: @wider_reduce_into_iter
 pub fn wider_reduce_into_iter(x: Simd<u8, N>) -> u16 {
 // CHECK: zext <8 x i8>
 // CHECK-SAME: to <8 x i16>
 // CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>
 x.to_array().into_iter().map(u16::from).sum()
 }",,,,1,,,,,
97951,"{'I-ICE', 'requires-nightly', 'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/97951,duplicate,,,,,,,Bug connected with probably ambiguous data type when parsing string into i32 from &str from clap,2022-06-10T15:28:41Z,2022-09-05T15:47:16Z,,,,,,87,,,,,0,,,,,,,,,,,
97899,"{'A-inference', 'T-compiler', 'D-invalid-suggestion', 'D-verbose', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/97899,duplicate,,,,,,,Redundant suggestion on E0283,2022-06-08T22:13:49Z,2022-06-15T18:53:56Z,,,,,,6,,,,,0,,,,,,,,,,,
97564,"{'C-enhancement', 'A-testsuite', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/97564,exclude,,,,,,,Check for stale files in `src/test/mir-opt`,2022-05-30T22:41:57Z,2022-11-02T07:15:03Z,103781,https://github.com/rust-lang/rust/pull/103781,Detect unused files in `src/test/mir-opt` and error on them in tidy.,2022/10/31 0:22,2022/11/2 7:15,155,664,"['Cargo.lock', 'Cargo.toml', 'builder.rs', 'check.rs', 'rustc.try_identity.DestinationPropagation.diff', 'simplify_try.try_identity.DestinationPropagation.diff', 'simplify_try.try_identity.SimplifyArmIdentity.diff', 'simplify_try.try_identity.SimplifyBranchSame.after.mir', 'simplify_try.try_identity.SimplifyLocals.after.mir', 'Cargo.toml', 'runtest.rs', 'Cargo.toml', 'lib.rs', 'Cargo.toml', 'lib.rs', 'main.rs', 'mir_opt_tests.rs']","['', '', 'src/bootstrap', 'src/bootstrap', 'src/test/mir-opt', 'src/test/mir-opt', 'src/test/mir-opt', 'src/test/mir-opt', 'src/test/mir-opt', 'src/tools/compiletest', 'src/tools/compiletest/src', 'src/tools/miropt-test-tools', 'src/tools/miropt-test-tools/src', 'src/tools/tidy', 'src/tools/tidy/src', 'src/tools/tidy/src', 'src/tools/tidy/src']",,0,,,,,,,,,,,
97554,"{'A-trait-system', 'C-bug'}",https://github.com/rust-lang/rust/issues/97554,duplicate,,,,,,,Higher-order bound on associated type does not support type inference,2022-05-30T14:53:34Z,2022-05-31T02:21:34Z,,,,,,0,,,,,0,,,,,,,,,,,
97421,"{'A-strict-provenance', 'A-mir-opt', 'C-bug'}",https://github.com/rust-lang/rust/issues/97421,valid,developer,5. Misoptimization,,3. MIR-MIR Transform,2. Ownership-Borrow&Move,3,Pointer to integer casts that expose provenance are incorrectly removed,2022-05-26T09:46:58Z,2022-06-08T10:24:12Z,97597,https://github.com/rust-lang/rust/pull/97597,Preserve unused pointer to address casts,2022/5/31 19:38,2022/6/8 10:24,13,76,"['mod.rs', 'liveness.rs', 'dead_store_elimination.rs', 'simplify.rs', 'simplify-locals.rs', 'simplify_locals.expose_addr.SimplifyLocals.diff']","['compiler/rustc_middle/src/mir', 'compiler/rustc_mir_dataflow/src/impls', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'src/test/mir-opt', 'src/test/mir-opt']",,0,"pub fn expose_addr<T>(a: &T) {
 a as *const T as usize;
 }","pub fn expose_addr<T>(a: &T) {
 a as *const T as usize;
 }",,,,,,,,,
97405,"{'A-lifetimes', 'A-closures', 'T-compiler', 'C-bug', 'A-coroutines'}",https://github.com/rust-lang/rust/issues/97405,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-Type Infer,2. Ownership-Lifetime,1,Outlives bounds for projections are broken when used with generators/closures,2022-05-25T18:17:34Z,2022-07-15T06:14:59Z,97406,https://github.com/rust-lang/rust/pull/97406,"Make outlives::{components,verify} agree",2022/5/25 18:39,2022/7/15 6:15,50,161,"['components.rs', 'verify.rs', 'closure-in-projection-issue-97405.rs', 'closure-in-projection-issue-97405.stderr']","['compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'src/test/ui/regions', 'src/test/ui/regions']",,0,"fn opaque<F>(_: F) -> impl Iterator { b"""".iter() }
 fn assert_static<T: 'static>(_: T) {}
 
 fn generic_fn<T>() {
 // proving `<OpaqueTy<type_of(async {})> as Iterator>::Item: 'static`
 // somehow requires `T: 'static`.
 assert_static(opaque(async {}).next());
 //~^ the associated type `<impl Iterator as Iterator>::Item` may not live long enough
 assert_static(opaque(|| {}).next());
 //~^ the associated type `<impl Iterator as Iterator>::Item` may not live long enough
 }","fn opaque<F>(_: F) -> impl Iterator { b"""".iter() }
 fn assert_static<T: 'static>(_: T) {}
 
 fn generic_fn<T>() {
 // proving `<OpaqueTy<type_of(async {})> as Iterator>::Item: 'static`
 // somehow requires `T: 'static`.
 assert_static(opaque(async {}).next());
 //~^ the associated type `<impl Iterator as Iterator>::Item` may not live long enough
 assert_static(opaque(|| {}).next());
 //~^ the associated type `<impl Iterator as Iterator>::Item` may not live long enough
 }",,1,,,1,,,,
97378,"{'I-ICE', 'glacier', 'A-closures', 'T-compiler', 'A-edition-2021', 'C-bug'}",https://github.com/rust-lang/rust/issues/97378,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,4,2021 edition ICE when destructuring enum in async block,2022-05-25T00:58:51Z,2022-06-07T21:44:36Z,97325,https://github.com/rust-lang/rust/pull/97325,Fix precise field capture of univariant enums,2022/5/23 17:13,2022/6/7 21:44,13,106,"['thir.rs', 'visit.rs', 'as_place.rs', 'expr.rs', 'capture-enum-field.rs']","['compiler/rustc_middle/src', 'compiler/rustc_middle/src/thir', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/thir/cx', 'src/test/ui/closures/2229_closure_analysis']",,0,"pub enum Request {
 Resolve {
 url: String,
 },
 }
 
 pub async fn handle_event(
 event: Request,
 ) {
 async move {
 let Request::Resolve { url } = event;
 }.await;
 }","pub enum Request {
 Resolve {
 url: String,
 },
 }
 
 pub async fn handle_event(
 event: Request,
 ) {
 async move {
 let Request::Resolve { url } = event;
 }.await;
 }",,1,,,,,,,
97104,"{'A-lifetimes', 'F-type_alias_impl_trait', 'I-unsound', 'A-impl-trait', 'T-types', 'requires-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/97104,valid,members,2. Correctness Issues-Soundness Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Opaque Types,2,late-bound lifetimes on type-alias-impl-trait can be unsound,2022-05-17T05:56:49Z,2022-09-08T18:24:44Z,98933,https://github.com/rust-lang/rust/pull/98933,Opaque types' generic params do not imply anything about their hidden type's lifetimes,2022/7/5 13:57,2022/9/8 18:24,114,136,"['visit.rs', 'mod.rs', 'issue-62200.rs', 'issue-62200.stderr', 'issue-47511.stderr', 'constrain_inputs.rs', 'constrain_inputs.stderr', 'constrain_inputs_unsound.rs', 'constrain_inputs_unsound.stderr']","['compiler/rustc_middle/src/ty', 'compiler/rustc_typeck/src/astconv', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/issues', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 
 mod lifetime_params {
 type Ty<'a> = impl Sized + 'a;
 fn define(s: &str) -> Ty<'_> { s }
 
 type BadFnSig = fn(Ty<'_>) -> &str;
 type BadTraitRef = dyn Fn(Ty<'_>) -> &str;
 }
 
 mod type_params {
 type Ty<T> = impl Sized;
 fn define<T>(s: T) -> Ty<T> { s }
 
 type BadFnSig = fn(Ty<&str>) -> &str;
 type BadTraitRef = dyn Fn(Ty<&str>) -> &str;
 }","#![feature(type_alias_impl_trait)]
 
 mod lifetime_params {
 type Ty<'a> = impl Sized + 'a;
 fn define(s: &str) -> Ty<'_> { s }
 
 type BadFnSig = fn(Ty<'_>) -> &str;
 type BadTraitRef = dyn Fn(Ty<'_>) -> &str;
 }
 
 mod type_params {
 type Ty<T> = impl Sized;
 fn define<T>(s: T) -> Ty<T> { s }
 
 type BadFnSig = fn(Ty<&str>) -> &str;
 type BadTraitRef = dyn Fn(Ty<&str>) -> &str;
 }",,,1,,1,Sized,,,#![feature(type_alias_impl_trait)]
97099,"{'I-ICE', 'A-lifetimes', 'glacier', 'A-impl-trait', 'P-medium', 'T-compiler', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/97099,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,1. Type-Opaque Types,2,ICE with higher-ranked nested RPIT,2022-05-17T02:13:52Z,2023-08-04T18:46:20Z,113575,https://github.com/rust-lang/rust/pull/113575,don't ICE on higher ranked hidden types,2023/7/11 14:41,2023/8/4 18:46,444,120,"['mod.rs', 'opaque_types.rs', 'mod.rs', 'nested-rpit-hrtb-2.rs', 'nested-rpit-hrtb-2.stderr', 'nested-tait-hrtb.rs', 'nested-tait-hrtb.stderr']","['compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_infer/src/infer/error_reporting', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait']",P-medium,0,"pub trait Trait<'a> {
 type Assoc;
 }
 
 struct Struct;
 impl<'a> Trait<'a> for Struct {
 type Assoc = &'a u32;
 }
 
 fn blah() -> impl for<'a> Trait<'a, Assoc = impl Sized> {
 Struct
 }","pub trait Trait<'a> {
 type Assoc;
 }
 
 struct Struct;
 impl<'a> Trait<'a> for Struct {
 type Assoc = &'a u32;
 }
 
 fn blah() -> impl for<'a> Trait<'a, Assoc = impl Sized> {
 Struct
 }",,,,,1,Sized,,,
96927,"{'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/96927,duplicate,,,,,,,"Expected ""type annotations needed"", but inferred unit type instead",2022-05-10T23:03:48Z,2024-01-25T14:44:47Z,,,,,,624,,,,,0,,,,,,,,,,,
96908,"{'T-compiler', 'D-invalid-suggestion', 'C-bug', 'A-borrow-checker', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/96908,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Invalid suggestion when trying to use a reference in the loop,2022-05-10T16:50:54Z,2024-01-24T13:48:09Z,,,,,,623,,,,,0,,,,,,,,,,,
96831,"{'F-generic_associated_types', 'A-associated-items', 'A-lifetimes', 'A-GATs', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/96831,duplicate,,,,,,,GAT lifetime bound error when using Self::Associated<'a> but works when the associated type is written out.,2022-05-08T05:38:02Z,2022-05-08T14:28:19Z,,,,,,0,,,,,0,,,,,,,,,,,
96728,"{'A-closures', 'I-cycle', 'C-bug', 'A-const-generics', 'F-inline_const'}",https://github.com/rust-lang/rust/issues/96728,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,const generics: inline consts and closures cause cycle errors,2022-05-05T10:38:53Z,2024-01-25T15:44:51Z,,,,,,630,,,,,0,,,,,,,,,,,
96661,"{'requires-internal-features', 'C-enhancement', 'requires-nightly', 'A-inference', 'T-compiler', 'A-lang-item', 'P-low'}",https://github.com/rust-lang/rust/issues/96661,Not a bug,,,,,,,Output type of indexing op. wrongly inferred in custom libcore,2022-05-03T05:28:30Z,2023-08-27T19:01:47Z,,,,,,481,,,,P-low,0,,,,,,,,,,,
96644,"{'E-mentor', 'A-HIR', 'E-help-wanted', 'E-easy'}",https://github.com/rust-lang/rust/issues/96644,exclude,,,,,,,Simplify universal impl-trait collection during lowering,2022-05-02T18:09:33Z,2022-06-03T00:21:26Z,97598,https://github.com/rust-lang/rust/pull/97598,Simplify universal impl trait lowering,2022/5/31 20:41,2022/6/3 0:21,31,461,"['item.rs', 'lib.rs', 'path.rs']","['compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src']",,0,,,,,,,,,,,
96572,"{'I-ICE', 'F-type_alias_impl_trait', 'glacier', 'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/96572,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-MIR Transform,1. Type-Opaque Types,6,"TAIT: ""unconstrained opaque type"" error even if it's constrained",2022-04-30T03:49:02Z,2022-09-20T15:49:45Z,99806,https://github.com/rust-lang/rust/pull/99806,Allow patterns to constrain the hidden type of opaque types,2022/7/27 12:10,2022/9/20 15:49,143,563,"['conflict_errors.rs', 'mod.rs', 'mutability_errors.rs', 'lib.rs', 'places_conflict.rs', 'prefixes.rs', 'mod.rs', 'base.rs', 'value_and_place.rs', 'place.rs', 'projection.rs', 'check.rs', 'qualifs.rs', 'promote_consts.rs', 'mod.rs', 'syntax.rs', 'tcx.rs', 'visit.rs', 'as_place.rs', 'as_rvalue.rs', 'as_temp.rs', 'into.rs', 'mod.rs', 'simplify.rs', 'test.rs', 'util.rs', 'scope.rs', 'expr.rs', 'mod.rs', 'usefulness.rs', 'elaborate_drops.rs', 'abs_domain.rs', 'cross_inference_pattern_bug.rs', 'cross_inference_pattern_bug.stderr', 'cross_inference_pattern_bug_no_type.rs', 'cross_inference_pattern_bug_no_type.stderr', 'issue-96572-unconstrained-mismatch.rs', 'issue-96572-unconstrained-mismatch.stderr', 'issue-96572-unconstrained.rs', 'qualify_min_const_fn.rs']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_cranelift/src', 'compiler/rustc_codegen_ssa/src/mir', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/expr', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_mir_build/src/build', 'compiler/rustc_mir_build/src/thir/cx', 'compiler/rustc_mir_build/src/thir/pattern', 'compiler/rustc_mir_build/src/thir/pattern', 'compiler/rustc_mir_dataflow/src', 'compiler/rustc_mir_dataflow/src/move_paths', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/tools/clippy/clippy_utils/src']",,1,"#![feature(type_alias_impl_trait)]
 
 fn main() {
 type T = impl Copy;
 let foo: T = (1u32, 2u32);
 let (a, b): (u32, u32) = foo;
 }","#![feature(type_alias_impl_trait)]
 
 fn main() {
 type T = impl Copy;
 let foo: T = (1u32, 2u32);
 let (a, b): (u32, u32) = foo;
 }",,,,,,,,,#![feature(type_alias_impl_trait)]
96564,"{'T-compiler', 'F-type_alias_impl_trait', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/96564,valid,members,2. Correctness Issues-Completeness Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Opaque Types,1,type-alias-impl-trait with lifetime param can't be used in fn input,2022-04-29T21:22:03Z,2022-05-11T08:47:52Z,96903,https://github.com/rust-lang/rust/pull/96903,Use lifetimes on type-alias-impl-trait used in function signatures to infer output type lifetimes,2022/5/10 14:54,2022/5/11 8:47,11,19,"['fold.rs', 'constrain_inputs.rs']","['compiler/rustc_middle/src/ty', 'src/test/ui/type-alias-impl-trait']",,0,"#![feature(type_alias_impl_trait)]
 type Ty<'a> = impl FnOnce() -> &'a str;
 fn defining(s: &str) -> Ty<'_> { move || s }
 fn execute(ty: Ty<'_>) -> &str { ty() }","#![feature(type_alias_impl_trait)]
 type Ty<'a> = impl FnOnce() -> &'a str;
 fn defining(s: &str) -> Ty<'_> { move || s }
 fn execute(ty: Ty<'_>) -> &str { ty() }",,,,,1,FnOnce,,,#![feature(type_alias_impl_trait)]
96540,"{'A-lifetimes', 'A-impl-trait', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/96540,valid,members,2. Correctness Issues-Completeness Issues,,1. AST,2. Ownership-Lifetime,1,regression from error on elided lifetime in path in `-> impl Trait<...>`,2022-04-29T02:50:44Z,2022-04-30T00:45:44Z,96559,https://github.com/rust-lang/rust/pull/96559,Use the correct lifetime binder for elided lifetimes in path.,2022/4/29 16:51,2022/4/30 0:45,0,44,"['late.rs', 'elided-lifetime-in-path-in-impl-Fn.rs']","['compiler/rustc_resolve/src', 'src/test/ui/lifetimes']",P-high,0,"use std::marker::PhantomData;
 
 struct Foo<'a>(PhantomData<&'a ()>);
 
 fn foo() -> impl Fn(Foo) {
 |_| ()
 }
 
 fn main() {}","use std::marker::PhantomData;
 
 struct Foo<'a>(PhantomData<&'a ()>);
 
 fn foo() -> impl Fn(Foo) {
 |_| ()
 }
 
 fn main() {}",,,,1,1,,,,
96460,"{'P-high', 'A-inference', 'A-impl-trait'}",https://github.com/rust-lang/rust/issues/96460,valid,developer,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,1,impl trait: code that doesn't constrain a RPIT infers `()`? ,2022-04-27T01:49:20Z,2022-04-29T11:58:28Z,96516,https://github.com/rust-lang/rust/pull/96516,Revert diagnostic duplication and accidental stabilization,2022/4/28 13:32,2022/4/29 11:58,2,693,"['check.rs', 'impl-trait-return-missing-constraint.rs', 'impl-trait-return-missing-constraint.stderr', 'conservative_impl_trait.rs', 'conservative_impl_trait.stderr', 'rp_impl_trait_fail.rs', 'rp_impl_trait_fail.stderr', 'issue-88653.rs', 'issue-88653.stderr', 'type-mismatch-signature-deduction.rs', 'type-mismatch-signature-deduction.stderr', 'bound-normalization-fail.rs', 'bound-normalization-fail.stderr', 'cross-return-site-inference.rs', 'cross-return-site-inference.stderr', 'fallback_inference.rs', 'fallback_inference.stderr', 'issue-72911.rs', 'issue-72911.stderr', 'issue-67830.stderr', 'issue-88236-2.stderr', 'must_outlive_least_region_or_bound.nll.stderr', 'must_outlive_least_region_or_bound.rs', 'must_outlive_least_region_or_bound.stderr', 'nested-return-type2-tait.rs', 'nested-return-type2-tait.stderr', 'type_parameters_captured.nll.stderr', 'type_parameters_captured.rs', 'type_parameters_captured.stderr', 'where-allowed-2.rs', 'where-allowed-2.stderr', 'issues-71798.rs', 'issues-71798.stderr', 'lifetime-elision-return-type-trait.rs', 'lifetime-elision-return-type-trait.stderr', 'impl-trait-return-trailing-semicolon.rs', 'impl-trait-return-trailing-semicolon.stderr', 'issue-81098.rs', 'issue-81098.stderr', 'missing-lifetimes-in-signature.nll.stderr', 'missing-lifetimes-in-signature.rs', 'missing-lifetimes-in-signature.stderr', 'nested-tait-inference.rs', 'nested-tait-inference.stderr', 'nested-tait-inference2.rs', 'nested-tait-inference2.stderr']","['compiler/rustc_typeck/src/check', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui', 'src/test/ui', 'src/test/ui/const-generics/defaults', 'src/test/ui/const-generics/defaults', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui', 'src/test/ui', 'src/test/ui/lifetimes', 'src/test/ui/lifetimes', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions/lifetimes', 'src/test/ui/suggestions/lifetimes', 'src/test/ui/suggestions/lifetimes', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",P-high,0,"use core::marker::PhantomData;
 
 fn weird() -> PhantomData<impl Sized> {
 PhantomData
 }","use core::marker::PhantomData;
 
 fn weird() -> PhantomData<impl Sized> {
 PhantomData
 }",1,,,,,,,,
96360,"{'A-trait-system', 'A-trait-objects', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/96360,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-trait solving,1. Type-Trait & Bound,2,"`dyn XXX` had impl `Debug`, but `dyn XXX + Send` can't Debug.",2022-04-24T10:10:36Z,2024-11-25T06:05:01Z,119338,https://github.com/rust-lang/rust/pull/119338,,,,945,,,,,0,"use std::fmt;
 
 pub trait ConnectionDriver {
 fn name(&self) -> String;
 }
 impl fmt::Debug for dyn ConnectionDriver {
 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 f.write_fmt(format_args!(""name: {}"", self.name()))
 }
 }
 
 struct Wifi;
 impl ConnectionDriver for Wifi {
 fn name(&self) -> String {
 String::from(""wifi"")
 }
 }
 
 // type C = Box<dyn ConnectionDriver>; // this can work
 type C = Box<dyn ConnectionDriver + Send>; // this can't work
 pub struct Connection(pub C);
 
 
 fn main() {
 let conn = Connection(Box::new(Wifi));
 println!(""{:?}"", conn.0);
 }","use std::fmt;
 
 pub trait ConnectionDriver {
 fn name(&self) -> String;
 }
 impl fmt::Debug for dyn ConnectionDriver {
 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 f.write_fmt(format_args!(""name: {}"", self.name()))
 }
 }
 
 struct Wifi;
 impl ConnectionDriver for Wifi {
 fn name(&self) -> String {
 String::from(""wifi"")
 }
 }
 
 // type C = Box<dyn ConnectionDriver>; // this can work
 type C = Box<dyn ConnectionDriver + Send>; // this can't work
 pub struct Connection(pub C);
 
 
 fn main() {
 let conn = Connection(Box::new(Wifi));
 println!(""{:?}"", conn.0);
 }",,,1,1,1,,,,
96300,"{'A-inference', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/96300,duplicate,,,,,,,Const parameter defaults are not used as a fallback during type inference,2022-04-21T23:32:28Z,2024-01-23T11:42:19Z,,,,,,641,,,,,0,,,,,,,,,,,
96262,"{'T-lang', 'A-type-system'}",https://github.com/rust-lang/rust/issues/96262,Not a bug,,,,,,,Incorrect reporting of non-exhaustive match branches of mod operation on unsigned integer,2022-04-20T23:08:36Z,2022-04-25T00:10:51Z,,,,,,4,,,,,0,,,,,,,,,,,
96194,"{'A-impl-trait', 'T-lang', 'T-compiler'}",https://github.com/rust-lang/rust/issues/96194,exclude,,,,,,,nested RPIT and HRTB: unclear semantics and future incompatibility,2022-04-18T23:01:19Z,2022-11-11T15:20:15Z,,,,,,206,,,,,1,,,,,,,,,,,
95777,"{'A-trait-system', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/95777,duplicate,,,,,,,Comparisons with concrete types break in the presence of inapplicable `where` bounds,2022-04-07T18:30:16Z,2024-01-24T13:36:27Z,,,,,,656,,,,,0,,,,,,,,,,,
95527,"{'A-lifetimes', 'fixed-by-NLL', 'T-compiler', 'C-bug', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/95527,Not reproducible anymore,members,2. Correctness Issues-Completeness Issues,,,,,Weird lifetime error on closure in thread::scope,2022-03-31T15:31:47Z,2022-06-11T09:02:09Z,,,,,,71,,,,,0,,,,,,,,,,,
95412,"{'A-async-await', 'C-bug', 'AsyncAwait-Triaged', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/95412,Not reproducible anymore,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95404,"{'A-lifetimes', 'AsyncAwait-Polish', 'A-async-await', 'T-compiler', 'AsyncAwait-Triaged', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/95404,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Confusing error message with borrows and dyn Error,2022-03-28T14:17:51Z,2023-07-18T03:35:52Z,,,,,,476,,,,,0,,,,,,,,,,,
95277,"{'A-lifetimes', 'A-closures', 'T-compiler', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/95277,Not a bug,,4. Diagnostic Issues-Incorrect Warning/Error,,,,,Poor error message with a function that takes a closure that takes a reference,2022-03-24T17:03:24Z,2023-12-18T14:41:51Z,,,,,,633,,,,,0,,,,,,,,,,,
95187,"{'A-trait-system', 'F-const_trait_impl', 'requires-nightly', 'F-specialization', 'C-bug', 'A-specialization'}",https://github.com/rust-lang/rust/issues/95187,exclude,,,,,,,`min_specialization` does not equate `T: ~const Trait` with `T: Trait`,2022-03-21T22:33:48Z,2022-11-11T23:20:12Z,,,,,,235,307,"['min_specialization.rs', 'const-default-const-specialized.rs', 'const-default-non-const-specialized.rs', 'const-default-non-const-specialized.stderr', 'default-keyword.rs', 'issue-95186-specialize-on-tilde-const.rs', 'issue-95187-same-trait-bound-different-constness.rs', 'non-const-default-const-specialized.rs', 'non-const-default-const-specialized.stderr']","['compiler/rustc_hir_analysis/src/impl_wf_check', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization']",,0,,,,,,,,,,,
95186,"{'A-trait-system', 'F-const_trait_impl', 'requires-nightly', 'F-specialization', 'C-bug', 'A-specialization'}",https://github.com/rust-lang/rust/issues/95186,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Trait & Bound,1,`min_specialization` does not allow specializing on `~const` trait bounds,2022-03-21T22:14:38Z,2022-11-11T23:20:11Z,95292,https://github.com/rust-lang/rust/pull/95292,,,,235,307,"['min_specialization.rs', 'const-default-const-specialized.rs', 'const-default-non-const-specialized.rs', 'const-default-non-const-specialized.stderr', 'default-keyword.rs', 'issue-95186-specialize-on-tilde-const.rs', 'issue-95187-same-trait-bound-different-constness.rs', 'non-const-default-const-specialized.rs', 'non-const-default-const-specialized.stderr']","['compiler/rustc_hir_analysis/src/impl_wf_check', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization', 'src/test/ui/rfc-2632-const-trait-impl/specialization']",,0,"#![feature(rustc_attrs)]
 #![feature(min_specialization)]
 #![feature(const_trait_impl)]
 
 #[rustc_specialization_trait]
 trait Specialize {}
 
 trait Foo {}
 
 impl<T> const Foo for T {}
 
 impl<T> const Foo for T
 where
 T: ~const Specialize
 {}","#![feature(rustc_attrs)]
 #![feature(min_specialization)]
 #![feature(const_trait_impl)]
 
 #[rustc_specialization_trait]
 trait Specialize {}
 
 trait Foo {}
 
 impl<T> const Foo for T {}
 
 impl<T> const Foo for T
 where
 T: ~const Specialize
 {}",,,,,,,,,"#![feature(rustc_attrs)]
#![feature(min_specialization)]
#![feature(const_trait_impl)]"
95182,"{'A-lifetimes', 'A-higher-ranked', 'A-async-await', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/95182,Not reproducible anymore,,,,,,,Ambiguous output when higher rank trait bound is not met,2022-03-21T21:04:15Z,2024-09-25T00:24:39Z,,,,,,918,,,,,0,,,,,,,,,,,
95162,"{'T-compiler', 'A-mir-opt', 'A-MIR', 'C-bug'}",https://github.com/rust-lang/rust/issues/95162,valid,developer,3. Miscompilation-Safe Rust Causes UB,,3. MIR-MIR Transform,3. Opt-Wrong Implementations,1,Early otherwise branch MIR opt is unsound,2022-03-21T05:16:52Z,2024-04-09T03:03:13Z,122387,https://github.com/rust-lang/rust/pull/122387,Re-enable the early otherwise branch optimization,2024/3/12 14:43,2024/4/9 3:03,749,894,"['early_otherwise_branch.rs', 'enum-early-otherwise-branch.rs', 'early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff', 'early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff', 'early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff', 'early_otherwise_branch.opt4.EarlyOtherwiseBranch.diff', 'early_otherwise_branch.rs', 'early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff', 'early_otherwise_branch_3_element_tuple.opt2.EarlyOtherwiseBranch.diff', 'early_otherwise_branch_3_element_tuple.rs', 'early_otherwise_branch_68867.rs', 'early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff', 'early_otherwise_branch_noopt.rs', 'early_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff', 'early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff', 'early_otherwise_branch_soundness.rs']","['compiler/rustc_mir_transform/src', 'tests/codegen/enum', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt']",,0,"let Q = val;
 if discriminant(P) == otherwise {
 let ptr = &mut Q as *mut _ as *mut u8;
 unsafe { *ptr = 10; } // Any invalid value for the type
 }
 
 match P {
 A => match Q {
 A => {
 // code
 }
 _ => {
 // don't use Q
 }
 }
 _ => {
 // don't use Q
 }
 };","let Q = val;
 if discriminant(P) == otherwise {
 let ptr = &mut Q as *mut _ as *mut u8;
 unsafe { *ptr = 10; } // Any invalid value for the type
 }
 
 match P {
 A => match Q {
 A => {
 // code
 }
 _ => {
 // don't use Q
 }
 }
 _ => {
 // don't use Q
 }
 };",,,,,1,,,,
95004,"{'E-mentor', 'A-HIR', 'E-medium', 'E-help-wanted'}",https://github.com/rust-lang/rust/issues/95004,exclude,,,,,,,Refactor HIR item-like traversal,2022-03-16T12:57:54Z,2022-06-11T22:15:18Z,,,,,,87,,,,,0,,,,,,,,,,,
94940,"{'A-trait-system', 'A-coherence', 'T-types', 'C-discussion'}",https://github.com/rust-lang/rust/issues/94940,Not reproducible anymore,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
94843,"{'A-async-await', 'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/94843,Not reproducible anymore,,,,,,,Additional let bindings needed to avoid `Sync`,2022-03-11T11:28:48Z,2024-01-24T13:20:10Z,,,,,,684,,,,,0,,,,,,,,,,,
94715,"{'T-compiler', 'A-diagnostics', 'A-lifetimes', 'D-confusing'}",https://github.com/rust-lang/rust/issues/94715,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,"Confusing lifetime diagnostics hint: ""note: expected `&str` found `&str`""",2022-03-07T23:05:42Z,2022-06-19T23:01:31Z,,,,,,103,,,,,0,,,,,,,,,,,
94492,"{'T-compiler', 'A-borrow-checker', 'A-diagnostics', 'A-suggestion-diagnostics', 'P-low'}",https://github.com/rust-lang/rust/issues/94492,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,2. Ownership-Lifetime,1,Suggesting adding lifetime to return type,2022-03-01T17:43:23Z,2024-09-08T09:07:19Z,94464,https://github.com/rust-lang/rust/pull/94464,,,,921,,,,P-low,0,"trait T {
 fn foo(&self, x: &i32) -> Option<&i32> {
 Some(x)
 }
 }","trait T {
 fn foo(&self, x: &i32) -> Option<&i32> {
 Some(x)
 }
 }",,,,,,,,,
94429,"{'I-ICE', 'F-type_alias_impl_trait', 'glacier', 'A-impl-trait', 'E-needs-test', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/94429,Not reproducible anymore,developer,1. Crash-Front-end Panic,,,,,ICE on wrong generator yield/return type when using type_alias_impl_trait,2022-02-27T17:30:12Z,2022-05-04T12:26:02Z,96686,https://github.com/rust-lang/rust/pull/96686,Add some TAIT-related tests,2022/5/4 0:19,2022/5/4 12:26,65,123,"['issue-53398-cyclic-types.rs', 'issue-53398-cyclic-types.stderr', 'issue-58662-generator-with-lifetime.rs', 'issue-89952.rs', 'issue-94429.rs', 'issue-94429.stderr']","['src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",,0,,,,,,,,,,,
94374,"{'T-compiler', 'C-bug', 'A-borrow-checker', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/94374,Not reproducible anymore,,4. Diagnostic Issues-Improper Fix Suggestion,,,,,Confusing borrowck error when multiple borrow errors in different match arms,2022-02-25T20:43:50Z,2023-11-16T17:29:24Z,,,,,,628,,,,,0,,,,,,,,,,,
94207,"{'A-higher-ranked', 'T-compiler', 'A-diagnostics', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/94207,Not reproducible anymore,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
94056,"{'A-closures', 'D-newcomer-roadblock', 'T-compiler', 'D-terse', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/94056,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,2. Ownership-Borrow&Move,1,"The ""this function takes ownership of the receiver `self`"" diagnostic hint not shown inside closures",2022-02-16T16:32:09Z,2022-03-09T11:39:33Z,94515,https://github.com/rust-lang/rust/pull/94515,,,,20,531,"['conflict_errors.rs', 'mod.rs', 'move_errors.rs', 'borrowck-feature-nll-overrides-migrate.edition.stderr', 'borrowck-feature-nll-overrides-migrate.zflag.stderr', 'borrowck-move-by-capture.stderr', 'borrowck-move-out-of-overloaded-auto-deref.stderr', 'issue-27282-mutation-in-guard.stderr', 'unboxed-closures-move-upvar-from-non-once-ref-closure.stderr', 'E0507.stderr', 'issue-27282-move-ref-mut-into-guard.stderr', 'issue-61108.stderr', 'issue-64559.stderr', 'issue-82916.stderr', 'issue-46099-move-in-macro.stderr', 'move-fn-self-receiver.stderr', 'move-in-guard-2.stderr', 'match-guards-always-borrow.stderr', 'borrow-for-loop-head.stderr', 'for-i-in-vec.stderr', 'option-content-move2.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'src/test/ui/borrowck', 'src/test/ui/borrowck', 'src/test/ui/borrowck', 'src/test/ui/borrowck', 'src/test/ui/borrowck', 'src/test/ui/borrowck', 'src/test/ui/error-codes', 'src/test/ui/issues', 'src/test/ui/issues', 'src/test/ui/issues', 'src/test/ui/loops', 'src/test/ui/moves', 'src/test/ui/moves', 'src/test/ui/moves', 'src/test/ui/nll', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions']",,0,"fn testcase(items: &[u64]) -> Abc {
 let mut abc = Abc { bar: Vec::new() };
 items.iter().for_each(|item| abc.update(*item));
 abc
 }
 
 struct Abc {
 bar: Vec<u64>,
 }
 
 impl Abc {
 fn update(mut self, bar: u64) {
 // ^^^^^^^^ the issue is here, this should be `&mut self`
 self.bar.push(bar);
 }
 }","fn testcase(items: &[u64]) -> Abc {
 let mut abc = Abc { bar: Vec::new() };
 items.iter().for_each(|item| abc.update(*item));
 abc
 }
 
 struct Abc {
 bar: Vec<u64>,
 }
 
 impl Abc {
 fn update(mut self, bar: u64) {
 // ^^^^^^^^ the issue is here, this should be `&mut self`
 self.bar.push(bar);
 }
 }",,,,,,,,,
93911,"{'E-needs-test', 'A-lifetimes'}",https://github.com/rust-lang/rust/issues/93911,valid,members,2. Correctness Issues-Completeness Issues,,1. AST,2. Ownership-Lifetime,2,"Incorrect ""use of undeclared lifetime name"" error with nested async functions",2022-02-11T18:09:45Z,2023-04-04T18:55:55Z,94773,https://github.com/rust-lang/rust/pull/94773,,,,417,,,,,0,"struct Foo<'a>(&'a u32);
 
 impl<'a> Foo<'a> {
 async fn foo() {
 struct Bar<'b>(&'b u32);
 
 impl<'b> Bar<'b> {
 async fn bar() {}
 }
 }
 }","struct Foo<'a>(&'a u32);
 
 impl<'a> Foo<'a> {
 async fn foo() {
 struct Bar<'b>(&'b u32);
 
 impl<'b> Bar<'b> {
 async fn bar() {}
 }
 }
 }",,1,,,1,,,,
93841,"{'A-impl-trait', 'regression-from-stable-to-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/93841,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,6,Compilation error regression on nightly,2022-02-10T00:03:11Z,2022-02-11T20:01:40Z,93893,https://github.com/rust-lang/rust/pull/93893,Revert lazy TAIT PR,2022/2/11 7:20,2022/2/11 20:01,1,6103,"['bound_region_errors.rs', 'lib.rs', 'mod.rs', 'opaque_types.rs', 'canonical.rs', 'free_region_relations.rs', 'input_output.rs', 'mod.rs', 'relate_tys.rs', 'universal_regions.rs', 'check.rs', 'validate.rs', 'vec_map.rs', 'at.rs', 'query_response.rs', 'combine.rs', 'equate.rs', 'glb.rs', 'lattice.rs', 'lub.rs', 'mod.rs', 'mod.rs', 'opaque_types.rs', 'table.rs', 'mod.rs', 'obligations.rs', 'sub.rs', 'undo_log.rs', 'lib.rs', 'util.rs', 'builtin.rs', 'canonical.rs', '_match.rs', 'context.rs', 'flags.rs', 'fold.rs', 'mod.rs', 'pretty.rs', 'structural_impls.rs', 'sty.rs', 'block.rs', 'serialized.rs', 'opaque_types.rs', 'auto_trait.rs', 'codegen.rs', 'mod.rs', 'suggestions.rs', 'fulfill.rs', 'object_safety.rs', 'custom.rs', 'mod.rs', 'candidate_assembly.rs', 'mod.rs', 'wf.rs', 'lowering.rs', 'mod.rs', 'implied_outlives_bounds.rs', 'normalize_erasing_regions.rs', 'lib.rs', '_match.rs', 'callee.rs', 'check.rs', 'closure.rs', 'coercion.rs', 'expectation.rs', 'expr.rs', 'fallback.rs', '_impl.rs', 'mod.rs', 'inherited.rs', 'probe.rs', 'mod.rs', 'upvar.rs', 'wfcheck.rs', 'writeback.rs', 'type_of.rs', 'min_specialization.rs', 'explicit.rs', 'rustc.rs', 'mod.rs', 'function_interfaces.rs', 'assoc-type-eq-with-dyn-atb-fail.rs', 'assoc-type-eq-with-dyn-atb-fail.stderr', 'impl-trait-return-missing-constraint.rs', 'impl-trait-return-missing-constraint.stderr', 'async-borrowck-escaping-block-error.stderr', 'issue-64130-4-async-move.rs', 'issue-64130-4-async-move.stderr', 'issue-70818.rs', 'issue-70818.stderr', 'issue-70935-complex-spans.rs', 'issue-70935-complex-spans.stderr', 'ret-impl-trait-one.nll.stderr', 'ret-impl-trait-one.stderr', 'no-const-async.rs', 'no-const-async.stderr', 'recursive-async-impl-trait-type.rs', 'suggest-missing-await.rs', 'suggest-missing-await.stderr', 'casts-differing-anon.rs', 'casts-differing-anon.stderr', 'borrowck-4.stderr', 'conservative_impl_trait.stderr', 'rp_impl_trait_fail.rs', 'rp_impl_trait_fail.stderr', 'imported_main_const_fn_item_type_forbidden.rs', 'imported_main_const_fn_item_type_forbidden.stderr', 'feature-gate-type_alias_impl_trait.rs', 'feature-gate-type_alias_impl_trait.stderr', 'issue-88653.rs', 'issue-88653.stderr', 'type-mismatch-signature-deduction.rs', 'type-mismatch-signature-deduction.stderr', 'issue-87258_a.rs', 'issue-87258_a.stderr', 'issue-87258_b.rs', 'issue-87258_b.stderr', 'issue-88595.rs', 'issue-88595.stderr', 'issue-92096.migrate.stderr', 'issue-92096.rs', 'auto-trait-leak.rs', 'auto-trait-leak.stderr', 'auto-trait.rs', 'auto-trait.stderr', 'bound-normalization-fail.rs', 'bound-normalization-fail.stderr', 'does-not-live-long-enough.stderr', 'equality.rs', 'equality.stderr', 'equality2.stderr', 'fallback.rs', 'hidden-lifetimes.rs', 'hidden-lifetimes.stderr', 'hidden-type-is-opaque-2.rs', 'hidden-type-is-opaque-2.stderr', 'hidden-type-is-opaque.rs', 'issue-55872-1.rs', 'issue-55872-1.stderr', 'issue-55872-2.rs', 'issue-55872-2.stderr', 'issue-55872-3.rs', 'issue-55872-3.stderr', 'issue-55872.rs', 'issue-55872.stderr', 'issue-72911.rs', 'issue-72911.stderr', 'issue-70877.rs', 'issue-70877.stderr', 'issue-78722.rs', 'issue-78722.stderr', 'issue-86201.rs', 'issue-86201.stderr', 'issue-88236-2.nll.stderr', 'issue-88236-2.rs', 'issue-88236-2.stderr', 'issue-88236.rs', 'lifetimes2.rs', 'error-handling-2.rs', 'error-handling-2.stderr', 'ordinary-bounds-unrelated.rs', 'ordinary-bounds-unrelated.stderr', 'ordinary-bounds-unsuited.rs', 'ordinary-bounds-unsuited.stderr', 'must_outlive_least_region_or_bound.nll.stderr', 'must_outlive_least_region_or_bound.rs', 'must_outlive_least_region_or_bound.stderr', 'negative-reasoning.rs', 'negative-reasoning.stderr', 'nested_impl_trait.rs', 'nested_impl_trait.stderr', 'object-unsafe-trait-in-return-position-impl-trait.stderr', 'point-to-type-err-cause-on-impl-trait-return.rs', 'point-to-type-err-cause-on-impl-trait-return.stderr', 'projection-mismatch-in-impl-where-clause.rs', 'projection-mismatch-in-impl-where-clause.stderr', 'question_mark.rs', 'recursive-impl-trait-type-direct.rs', 'recursive-impl-trait-type-direct.stderr', 'recursive-impl-trait-type-indirect.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.stderr', 'recursive-type-alias-impl-trait-declaration.rs', 'region-escape-via-bound.rs', 'region-escape-via-bound.stderr', 'static-return-lifetime-infered.rs', 'static-return-lifetime-infered.stderr', 'two_tait_defining_each_other.rs', 'two_tait_defining_each_other.stderr', 'two_tait_defining_each_other2.rs', 'two_tait_defining_each_other2.stderr', 'two_tait_defining_each_other3.rs', 'two_tait_defining_each_other3.stderr', 'type_parameters_captured.nll.stderr', 'type_parameters_captured.rs', 'type_parameters_captured.stderr', 'where-allowed-2.rs', 'where-allowed-2.stderr', 'issues-71798.rs', 'issues-71798.stderr', 'lang-item-missing-generator.stderr', 'freeze_cycle.rs', 'infer_cross_function.rs', 'lifetime_inference.rs', 'nested.rs', 'opaque_vs_opaque.rs', 'unsized_sized_opaque.rs', 'lifetime-elision-return-type-trait.rs', 'lifetime-elision-return-type-trait.stderr', 'inline-trait-and-foreign-items.rs', 'inline-trait-and-foreign-items.stderr', 'lint-ctypes-73249-2.rs', 'lint-ctypes-73249-2.stderr', 'lint-ctypes-73249-3.rs', 'lint-ctypes-73249-3.stderr', 'lint-ctypes-73249-5.rs', 'lint-ctypes-73249-5.stderr', 'lint-ctypes-73251-1.rs', 'lint-ctypes-73251-1.stderr', 'lint-ctypes-73251-2.rs', 'lint-ctypes-73251-2.stderr', 'opaque-ty-ffi-unsafe.rs', 'opaque-ty-ffi-unsafe.stderr', 'feature-gate-never_type_fallback.rs', 'feature-gate-never_type_fallback.stderr', 'impl_trait_fallback.rs', 'impl_trait_fallback2.rs', 'impl_trait_fallback2.stderr', 'impl_trait_fallback3.rs', 'impl_trait_fallback3.stderr', 'impl_trait_fallback4.rs', 'impl_trait_fallback4.stderr', 'issue-52113.rs', 'issue-52113.stderr', 'issue-73159-rpit-static.rs', 'issue-73159-rpit-static.stderr', 'opaque-hrtb.rs', 'opaque-hrtb.stderr', 'impl-trait-captures.rs', 'impl-trait-captures.stderr', 'impl-trait-outlives.rs', 'impl-trait-outlives.stderr', 'fn-header-semantic-fail.rs', 'fn-header-semantic-fail.stderr', 'generators.rs', 'generators.stderr', 'issue-70736-async-fn-no-body-def-collector.rs', 'issue-70736-async-fn-no-body-def-collector.stderr', 'issue-68621.rs', 'issue-68621.stderr', 'arbitrary_self_types_pin_lifetime_impl_trait-async.stderr', 'arbitrary_self_types_pin_lifetime_impl_trait.stderr', 'impl-trait-return-trailing-semicolon.stderr', 'issue-81098.stderr', 'trait-object-nested-in-impl-trait.stderr', 'match-prev-arm-needing-semi.rs', 'match-prev-arm-needing-semi.stderr', 'opaque-type-error.stderr', 'issue-83613.rs', 'issue-83613.stderr', 'argument-types.rs', 'argument-types.stderr', 'auto-trait-leakage2.stderr', 'auto-trait-leakage3.rs', 'auto-trait-leakage3.stderr', 'bound_reduction2.rs', 'bound_reduction2.stderr', 'bounds-are-checked.rs', 'bounds-are-checked.stderr', 'declared_but_never_defined.rs', 'declared_but_never_defined.stderr', 'declared_but_not_defined_in_scope.rs', 'declared_but_not_defined_in_scope.stderr', 'different_defining_uses_never_type.rs', 'different_defining_uses_never_type.stderr', 'fallback.rs', 'field-types.rs', 'field-types.stderr', 'generic_duplicate_lifetime_param.rs', 'generic_duplicate_lifetime_param.stderr', 'generic_duplicate_param_use.rs', 'generic_duplicate_param_use.stderr', 'generic_duplicate_param_use2.rs', 'generic_duplicate_param_use2.stderr', 'generic_duplicate_param_use3.rs', 'generic_duplicate_param_use3.stderr', 'generic_duplicate_param_use4.rs', 'generic_duplicate_param_use4.stderr', 'generic_nondefining_use.rs', 'generic_nondefining_use.stderr', 'generic_not_used.rs', 'generic_not_used.stderr', 'generic_type_does_not_live_long_enough.nll.stderr', 'generic_type_does_not_live_long_enough.rs', 'generic_type_does_not_live_long_enough.stderr', 'inference-cycle.rs', 'inference-cycle.stderr', 'issue-53598.rs', 'issue-53598.stderr', 'issue-57611-trait-alias.nll.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_data_structures/src', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/canonical', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/nll_relate', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/opaque_types', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src', 'compiler/rustc_infer/src/traits', 'compiler/rustc_lint/src', 'compiler/rustc_middle/src/infer', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty/print', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/build', 'compiler/rustc_query_system/src/dep_graph', 'compiler/rustc_trait_selection/src', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_traits/src/chalk', 'compiler/rustc_traits/src/chalk', 'compiler/rustc_traits/src', 'compiler/rustc_traits/src', 'compiler/rustc_type_ir/src', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check/fn_ctxt', 'compiler/rustc_typeck/src/check/fn_ctxt', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check/method', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/collect', 'compiler/rustc_typeck/src/impl_wf_check', 'compiler/rustc_typeck/src/outlives', 'src/bootstrap/bin', 'src/librustdoc/clean', 'src/test/incremental/hashes', 'src/test/ui/associated-type-bounds', 'src/test/ui/associated-type-bounds', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await/multiple-lifetimes', 'src/test/ui/async-await/multiple-lifetimes', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/cast', 'src/test/ui/cast', 'src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck', 'src/test/ui', 'src/test/ui/const-generics/defaults', 'src/test/ui/const-generics/defaults', 'src/test/ui/entry-point', 'src/test/ui/entry-point', 'src/test/ui/feature-gates', 'src/test/ui/feature-gates', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui', 'src/test/ui', 'src/test/ui/lang-items', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lifetimes', 'src/test/ui/lifetimes', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll/relate_tys', 'src/test/ui/nll/relate_tys', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/parser', 'src/test/ui/parser', 'src/test/ui/polymorphization', 'src/test/ui/polymorphization', 'src/test/ui/resolve', 'src/test/ui/resolve', 'src/test/ui/save-analysis', 'src/test/ui/save-analysis', 'src/test/ui/self', 'src/test/ui/self', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions/lifetimes', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/traits/alias', 'src/test/ui/traits/alias', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",,0,"use std::path::Path;
 use std::ffi::OsStr;
 use std::ops::Deref;
 
 fn frob(path: &str) -> impl Deref<Target = Path> + '_ {
 OsStr::new(path).as_ref()
 }
 
 fn open_parent<'path>(_path: &'path Path) {
 todo!()
 }
 
 fn main() {
 let old_path = frob(""hello"");
 
 open_parent(&old_path);
 }","use std::path::Path;
 use std::ffi::OsStr;
 use std::ops::Deref;
 
 fn frob(path: &str) -> impl Deref<Target = Path> + '_ {
 OsStr::new(path).as_ref()
 }
 
 fn open_parent<'path>(_path: &'path Path) {
 todo!()
 }
 
 fn main() {
 let old_path = frob(""hello"");
 
 open_parent(&old_path);
 }",,,,1,1,,,,
93794,"{'A-impl-trait', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/93794,valid,developer,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,1. Type-Opaque Types,6,"Nightly fails to infer the type of iterator collect & impl IntoIterator, and gives confusing error message",2022-02-09T04:58:10Z,2022-02-11T20:01:39Z,93893,https://github.com/rust-lang/rust/pull/93893,Revert lazy TAIT PR,2022/2/11 7:20,2022/2/11 20:01,2,6103,"['bound_region_errors.rs', 'lib.rs', 'mod.rs', 'opaque_types.rs', 'canonical.rs', 'free_region_relations.rs', 'input_output.rs', 'mod.rs', 'relate_tys.rs', 'universal_regions.rs', 'check.rs', 'validate.rs', 'vec_map.rs', 'at.rs', 'query_response.rs', 'combine.rs', 'equate.rs', 'glb.rs', 'lattice.rs', 'lub.rs', 'mod.rs', 'mod.rs', 'opaque_types.rs', 'table.rs', 'mod.rs', 'obligations.rs', 'sub.rs', 'undo_log.rs', 'lib.rs', 'util.rs', 'builtin.rs', 'canonical.rs', '_match.rs', 'context.rs', 'flags.rs', 'fold.rs', 'mod.rs', 'pretty.rs', 'structural_impls.rs', 'sty.rs', 'block.rs', 'serialized.rs', 'opaque_types.rs', 'auto_trait.rs', 'codegen.rs', 'mod.rs', 'suggestions.rs', 'fulfill.rs', 'object_safety.rs', 'custom.rs', 'mod.rs', 'candidate_assembly.rs', 'mod.rs', 'wf.rs', 'lowering.rs', 'mod.rs', 'implied_outlives_bounds.rs', 'normalize_erasing_regions.rs', 'lib.rs', '_match.rs', 'callee.rs', 'check.rs', 'closure.rs', 'coercion.rs', 'expectation.rs', 'expr.rs', 'fallback.rs', '_impl.rs', 'mod.rs', 'inherited.rs', 'probe.rs', 'mod.rs', 'upvar.rs', 'wfcheck.rs', 'writeback.rs', 'type_of.rs', 'min_specialization.rs', 'explicit.rs', 'rustc.rs', 'mod.rs', 'function_interfaces.rs', 'assoc-type-eq-with-dyn-atb-fail.rs', 'assoc-type-eq-with-dyn-atb-fail.stderr', 'impl-trait-return-missing-constraint.rs', 'impl-trait-return-missing-constraint.stderr', 'async-borrowck-escaping-block-error.stderr', 'issue-64130-4-async-move.rs', 'issue-64130-4-async-move.stderr', 'issue-70818.rs', 'issue-70818.stderr', 'issue-70935-complex-spans.rs', 'issue-70935-complex-spans.stderr', 'ret-impl-trait-one.nll.stderr', 'ret-impl-trait-one.stderr', 'no-const-async.rs', 'no-const-async.stderr', 'recursive-async-impl-trait-type.rs', 'suggest-missing-await.rs', 'suggest-missing-await.stderr', 'casts-differing-anon.rs', 'casts-differing-anon.stderr', 'borrowck-4.stderr', 'conservative_impl_trait.stderr', 'rp_impl_trait_fail.rs', 'rp_impl_trait_fail.stderr', 'imported_main_const_fn_item_type_forbidden.rs', 'imported_main_const_fn_item_type_forbidden.stderr', 'feature-gate-type_alias_impl_trait.rs', 'feature-gate-type_alias_impl_trait.stderr', 'issue-88653.rs', 'issue-88653.stderr', 'type-mismatch-signature-deduction.rs', 'type-mismatch-signature-deduction.stderr', 'issue-87258_a.rs', 'issue-87258_a.stderr', 'issue-87258_b.rs', 'issue-87258_b.stderr', 'issue-88595.rs', 'issue-88595.stderr', 'issue-92096.migrate.stderr', 'issue-92096.rs', 'auto-trait-leak.rs', 'auto-trait-leak.stderr', 'auto-trait.rs', 'auto-trait.stderr', 'bound-normalization-fail.rs', 'bound-normalization-fail.stderr', 'does-not-live-long-enough.stderr', 'equality.rs', 'equality.stderr', 'equality2.stderr', 'fallback.rs', 'hidden-lifetimes.rs', 'hidden-lifetimes.stderr', 'hidden-type-is-opaque-2.rs', 'hidden-type-is-opaque-2.stderr', 'hidden-type-is-opaque.rs', 'issue-55872-1.rs', 'issue-55872-1.stderr', 'issue-55872-2.rs', 'issue-55872-2.stderr', 'issue-55872-3.rs', 'issue-55872-3.stderr', 'issue-55872.rs', 'issue-55872.stderr', 'issue-72911.rs', 'issue-72911.stderr', 'issue-70877.rs', 'issue-70877.stderr', 'issue-78722.rs', 'issue-78722.stderr', 'issue-86201.rs', 'issue-86201.stderr', 'issue-88236-2.nll.stderr', 'issue-88236-2.rs', 'issue-88236-2.stderr', 'issue-88236.rs', 'lifetimes2.rs', 'error-handling-2.rs', 'error-handling-2.stderr', 'ordinary-bounds-unrelated.rs', 'ordinary-bounds-unrelated.stderr', 'ordinary-bounds-unsuited.rs', 'ordinary-bounds-unsuited.stderr', 'must_outlive_least_region_or_bound.nll.stderr', 'must_outlive_least_region_or_bound.rs', 'must_outlive_least_region_or_bound.stderr', 'negative-reasoning.rs', 'negative-reasoning.stderr', 'nested_impl_trait.rs', 'nested_impl_trait.stderr', 'object-unsafe-trait-in-return-position-impl-trait.stderr', 'point-to-type-err-cause-on-impl-trait-return.rs', 'point-to-type-err-cause-on-impl-trait-return.stderr', 'projection-mismatch-in-impl-where-clause.rs', 'projection-mismatch-in-impl-where-clause.stderr', 'question_mark.rs', 'recursive-impl-trait-type-direct.rs', 'recursive-impl-trait-type-direct.stderr', 'recursive-impl-trait-type-indirect.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.rs', 'recursive-type-alias-impl-trait-declaration-too-subtle.stderr', 'recursive-type-alias-impl-trait-declaration.rs', 'region-escape-via-bound.rs', 'region-escape-via-bound.stderr', 'static-return-lifetime-infered.rs', 'static-return-lifetime-infered.stderr', 'two_tait_defining_each_other.rs', 'two_tait_defining_each_other.stderr', 'two_tait_defining_each_other2.rs', 'two_tait_defining_each_other2.stderr', 'two_tait_defining_each_other3.rs', 'two_tait_defining_each_other3.stderr', 'type_parameters_captured.nll.stderr', 'type_parameters_captured.rs', 'type_parameters_captured.stderr', 'where-allowed-2.rs', 'where-allowed-2.stderr', 'issues-71798.rs', 'issues-71798.stderr', 'lang-item-missing-generator.stderr', 'freeze_cycle.rs', 'infer_cross_function.rs', 'lifetime_inference.rs', 'nested.rs', 'opaque_vs_opaque.rs', 'unsized_sized_opaque.rs', 'lifetime-elision-return-type-trait.rs', 'lifetime-elision-return-type-trait.stderr', 'inline-trait-and-foreign-items.rs', 'inline-trait-and-foreign-items.stderr', 'lint-ctypes-73249-2.rs', 'lint-ctypes-73249-2.stderr', 'lint-ctypes-73249-3.rs', 'lint-ctypes-73249-3.stderr', 'lint-ctypes-73249-5.rs', 'lint-ctypes-73249-5.stderr', 'lint-ctypes-73251-1.rs', 'lint-ctypes-73251-1.stderr', 'lint-ctypes-73251-2.rs', 'lint-ctypes-73251-2.stderr', 'opaque-ty-ffi-unsafe.rs', 'opaque-ty-ffi-unsafe.stderr', 'feature-gate-never_type_fallback.rs', 'feature-gate-never_type_fallback.stderr', 'impl_trait_fallback.rs', 'impl_trait_fallback2.rs', 'impl_trait_fallback2.stderr', 'impl_trait_fallback3.rs', 'impl_trait_fallback3.stderr', 'impl_trait_fallback4.rs', 'impl_trait_fallback4.stderr', 'issue-52113.rs', 'issue-52113.stderr', 'issue-73159-rpit-static.rs', 'issue-73159-rpit-static.stderr', 'opaque-hrtb.rs', 'opaque-hrtb.stderr', 'impl-trait-captures.rs', 'impl-trait-captures.stderr', 'impl-trait-outlives.rs', 'impl-trait-outlives.stderr', 'fn-header-semantic-fail.rs', 'fn-header-semantic-fail.stderr', 'generators.rs', 'generators.stderr', 'issue-70736-async-fn-no-body-def-collector.rs', 'issue-70736-async-fn-no-body-def-collector.stderr', 'issue-68621.rs', 'issue-68621.stderr', 'arbitrary_self_types_pin_lifetime_impl_trait-async.stderr', 'arbitrary_self_types_pin_lifetime_impl_trait.stderr', 'impl-trait-return-trailing-semicolon.stderr', 'issue-81098.stderr', 'trait-object-nested-in-impl-trait.stderr', 'match-prev-arm-needing-semi.rs', 'match-prev-arm-needing-semi.stderr', 'opaque-type-error.stderr', 'issue-83613.rs', 'issue-83613.stderr', 'argument-types.rs', 'argument-types.stderr', 'auto-trait-leakage2.stderr', 'auto-trait-leakage3.rs', 'auto-trait-leakage3.stderr', 'bound_reduction2.rs', 'bound_reduction2.stderr', 'bounds-are-checked.rs', 'bounds-are-checked.stderr', 'declared_but_never_defined.rs', 'declared_but_never_defined.stderr', 'declared_but_not_defined_in_scope.rs', 'declared_but_not_defined_in_scope.stderr', 'different_defining_uses_never_type.rs', 'different_defining_uses_never_type.stderr', 'fallback.rs', 'field-types.rs', 'field-types.stderr', 'generic_duplicate_lifetime_param.rs', 'generic_duplicate_lifetime_param.stderr', 'generic_duplicate_param_use.rs', 'generic_duplicate_param_use.stderr', 'generic_duplicate_param_use2.rs', 'generic_duplicate_param_use2.stderr', 'generic_duplicate_param_use3.rs', 'generic_duplicate_param_use3.stderr', 'generic_duplicate_param_use4.rs', 'generic_duplicate_param_use4.stderr', 'generic_nondefining_use.rs', 'generic_nondefining_use.stderr', 'generic_not_used.rs', 'generic_not_used.stderr', 'generic_type_does_not_live_long_enough.nll.stderr', 'generic_type_does_not_live_long_enough.rs', 'generic_type_does_not_live_long_enough.stderr', 'inference-cycle.rs', 'inference-cycle.stderr', 'issue-53598.rs', 'issue-53598.stderr', 'issue-57611-trait-alias.nll.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/region_infer', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src/type_check', 'compiler/rustc_borrowck/src', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_data_structures/src', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/canonical', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/nll_relate', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer/opaque_types', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer/outlives', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src/infer', 'compiler/rustc_infer/src', 'compiler/rustc_infer/src/traits', 'compiler/rustc_lint/src', 'compiler/rustc_middle/src/infer', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty/print', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/build', 'compiler/rustc_query_system/src/dep_graph', 'compiler/rustc_trait_selection/src', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/query/type_op', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits/select', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_traits/src/chalk', 'compiler/rustc_traits/src/chalk', 'compiler/rustc_traits/src', 'compiler/rustc_traits/src', 'compiler/rustc_type_ir/src', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check/fn_ctxt', 'compiler/rustc_typeck/src/check/fn_ctxt', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check/method', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/check', 'compiler/rustc_typeck/src/collect', 'compiler/rustc_typeck/src/impl_wf_check', 'compiler/rustc_typeck/src/outlives', 'src/bootstrap/bin', 'src/librustdoc/clean', 'src/test/incremental/hashes', 'src/test/ui/associated-type-bounds', 'src/test/ui/associated-type-bounds', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await/multiple-lifetimes', 'src/test/ui/async-await/multiple-lifetimes', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/cast', 'src/test/ui/cast', 'src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck', 'src/test/ui', 'src/test/ui/const-generics/defaults', 'src/test/ui/const-generics/defaults', 'src/test/ui/entry-point', 'src/test/ui/entry-point', 'src/test/ui/feature-gates', 'src/test/ui/feature-gates', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generator', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/generic-associated-types', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait/issues', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait/multiple-lifetimes', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui/impl-trait', 'src/test/ui', 'src/test/ui', 'src/test/ui/lang-items', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lazy-type-alias-impl-trait', 'src/test/ui/lifetimes', 'src/test/ui/lifetimes', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/lint', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/never_type', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll', 'src/test/ui/nll/relate_tys', 'src/test/ui/nll/relate_tys', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/nll/ty-outlives', 'src/test/ui/parser', 'src/test/ui/parser', 'src/test/ui/polymorphization', 'src/test/ui/polymorphization', 'src/test/ui/resolve', 'src/test/ui/resolve', 'src/test/ui/save-analysis', 'src/test/ui/save-analysis', 'src/test/ui/self', 'src/test/ui/self', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions/lifetimes', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/traits/alias', 'src/test/ui/traits/alias', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait', 'src/test/ui/type-alias-impl-trait']",P-high,0,"fn foo(b: bool) -> impl IntoIterator<Item = ()> {
 if b {
 return vec![()];
 }
 [()].into_iter().collect()
 }","fn foo(b: bool) -> impl IntoIterator<Item = ()> {
 if b {
 return vec![()];
 }
 [()].into_iter().collect()
 }",,,,,,,,,
93770,"{'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/93770,Not reproducible anymore,,2. Correctness Issues-Completeness Issues,,,,,Nested mutex guards with dropping and re-assigning confuse the borrow checker,2022-02-08T10:59:23Z,2023-05-11T13:57:09Z,,,,,,457,,,,,0,,,,,,,,,,,
93706,"{'A-trait-system', 'A-const-eval', 'C-tracking-issue'}",https://github.com/rust-lang/rust/issues/93706,exclude,,,,,,,Tracking Issue for `const_fn_trait_bound`,2022-02-06T16:33:18Z,2022-05-13T08:03:00Z,,,,,,95,,,,,0,,,,,,,,,,,
93596,"{'A-trait-system', 'C-enhancement', 'T-compiler', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/93596,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,2. Ownership-Borrow&Move,3,Suggest reborrowing unsized value when borrowed trait object wanted,2022-02-02T19:26:17Z,2022-06-29T08:28:29Z,98277,https://github.com/rust-lang/rust/pull/98277,Fix trait object reborrow suggestion,2022/6/20 3:50,2022/6/29 8:28,146,151,"['mod.rs', 'mod.rs', 'suggestions.rs', 'confirmation.rs', 'assoc-type-eq-with-dyn-atb-fail.stderr', 'associated-types-eq-3.stderr', 'associated-types-overridden-binding-2.stderr', 'issue-65774-1.stderr', 'issue-65774-2.stderr', 'async-block-control-flow-static-semantics.stderr', 'issue-86507.stderr', 'coerce-issue-49593-box-never-windows.nofallback.stderr', 'coerce-issue-49593-box-never.nofallback.stderr', 'trait_objects_fail.stderr', 'mismatch.stderr', 'dst-bad-coerce1.stderr', 'dst-object-from-unsized-type.stderr', 'issue-79422.extended.stderr', 'issue-14366.stderr', 'issue-22034.stderr', 'issue-22872.stderr', 'issue-7013.stderr', 'kindck-impl-type-params.stderr', 'cast-rfc0401.stderr', 'fallback-closure-wrap.fallback.stderr', 'derive-macro-missing-bounds.stderr', 'suggest-borrow-to-dyn-object.rs', 'suggest-borrow-to-dyn-object.stderr', 'coercion-generic-bad.stderr', 'map-types.stderr', 'type-checking-test-1.stderr', 'type-checking-test-2.stderr', 'unsized-fn-param.stderr']","['compiler/rustc_middle/src/traits', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'compiler/rustc_trait_selection/src/traits/select', 'src/test/ui/associated-type-bounds', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/associated-types', 'src/test/ui/async-await', 'src/test/ui/async-await', 'src/test/ui/coercion', 'src/test/ui/coercion', 'src/test/ui/const-generics/defaults', 'src/test/ui/custom_test_frameworks', 'src/test/ui/dst', 'src/test/ui/dst', 'src/test/ui/generic-associated-types', 'src/test/ui/issues', 'src/test/ui/issues', 'src/test/ui/issues', 'src/test/ui/issues', 'src/test/ui/kindck', 'src/test/ui/mismatched_types', 'src/test/ui/never_type', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/suggestions', 'src/test/ui/traits', 'src/test/ui/traits', 'src/test/ui/traits/trait-upcasting', 'src/test/ui/traits/trait-upcasting', 'src/test/ui/unsized']",,0,"use std::ffi::{OsStr, OsString};
 use std::path::Path;
 
 fn check(p: &dyn AsRef<Path>) {
 let m = std::fs::metadata(&p);
 println!(""{:?}"", &m);
 }
 
 fn main() {
 let s: OsString = ""."".into();
 let s: &OsStr = &s;
 check(s);
 }","use std::ffi::{OsStr, OsString};
 use std::path::Path;
 
 fn check(p: &dyn AsRef<Path>) {
 let m = std::fs::metadata(&p);
 println!(""{:?}"", &m);
 }
 
 fn main() {
 let s: OsString = ""."".into();
 let s: &OsStr = &s;
 check(s);
 }",,,1,1,,,,,
93506,"{'A-inference', 'T-compiler', 'D-invalid-suggestion', 'D-verbose', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/93506,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-report,5. Exception Handling & Report,2,Duplicated help with sum() missing type annotation,2022-01-31T12:31:34Z,2022-07-12T03:09:40Z,99075,https://github.com/rust-lang/rust/pull/99075,,,,161,36,"['diagnostic.rs', 'diagnostic_builder.rs', 'mod.rs', 'erase-type-params-in-label.stderr', 'issue-71732.stderr', 'issue-77982.stderr', 'multidispatch-convert-ambig-dest.stderr', 'type-annotation-needed.stderr']","['compiler/rustc_errors/src', 'compiler/rustc_errors/src', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'src/test/ui/inference', 'src/test/ui/inference', 'src/test/ui/traits', 'src/test/ui/traits', 'src/test/ui/type']",,0,"fn foo() -> u64 {
 [1_u64].iter().sum() + 1
 }
 fn main() {}","fn foo() -> u64 {
 [1_u64].iter().sum() + 1
 }
 fn main() {}",,,,,,,,,
93401,"{'C-bug', 'regression-from-stable-to-beta', 'A-lifetimes', 'T-rustdoc'}",https://github.com/rust-lang/rust/issues/93401,exclude,,,,,,,rustdoc regression: Lifetime in type alias definition is incorrectly elided,2022-01-28T00:59:30Z,2022-02-02T22:03:30Z,93542,https://github.com/rust-lang/rust/pull/93542,Prevent lifetime elision in type alias,2022/2/1 11:30,2022/2/2 22:03,5,21,"['mod.rs', 'lifetime-name.rs']","['src/librustdoc/clean', 'src/test/rustdoc']",,0,,,,,,,,,,,
93367,"{'A-trait-system', 'C-future-incompatibility', 'T-types', 'A-auto-traits'}",https://github.com/rust-lang/rust/issues/93367,exclude,,,,,,,Tracking Issue for sound builtin auto trait impls,2022-01-27T09:38:42Z,2024-02-20T09:00:23Z,120716,https://github.com/rust-lang/rust/pull/120716,Change leak check and suspicious auto trait lint warning messages,2024/2/6 18:42,2024/2/20 9:00,753,667,"['orphan.rs', 'lib.rs', 'builtin.rs', 'non_send_fields_in_send_ty.rs', 'non_send_fields_in_send_ty.stderr', 'lints.rs', 'issue-117789.rs', 'issue-117789.stderr', 'issue-83857-ub.rs', 'issue-83857-ub.stderr', 'suspicious-impls-lint.rs', 'suspicious-impls-lint.stderr', 'suspicious-negative-impls-lint.rs', 'suspicious-negative-impls-lint.stderr', 'coherence-conflicting-negative-trait-impl.rs', 'coherence-conflicting-negative-trait-impl.stderr', 'coherence-fn-implied-bounds.rs', 'coherence-fn-implied-bounds.stderr', 'coherence-free-vs-bound-region.rs', 'coherence-free-vs-bound-region.stderr', 'coherence-orphan.rs', 'coherence-orphan.stderr', 'coherence-overlap-negative-impls.rs', 'coherence-subtyping.rs', 'coherence-subtyping.stderr', 'coherence-wasm-bindgen.rs', 'coherence-wasm-bindgen.stderr', 'negative-coherence-placeholder-region-constraints-on-unification.explicit.stderr', 'negative-coherence-placeholder-region-constraints-on-unification.rs', 'invariant.rs', 'invariant.stderr', 'issue-106755.rs', 'issue-106755.stderr', 'typeck-default-trait-impl-cross-crate-coherence.rs', 'typeck-default-trait-impl-cross-crate-coherence.stderr']","['compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_lint/src', 'compiler/rustc_lint_defs/src', 'src/tools/clippy/tests/ui', 'src/tools/clippy/tests/ui', 'src/tools/rust-analyzer/crates/ide-db/src/generated', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/auto-traits', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/issues', 'tests/ui/issues', 'tests/ui/typeck', 'tests/ui/typeck']",,0,,,,,,,,,,,
93093,"{'AsyncAwait-Polish', 'A-async-await', 'T-compiler', 'D-invalid-suggestion', 'A-borrow-checker', 'AsyncAwait-Triaged', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/93093,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,3. MIR-report,5. Exception Handling & Report,1,Incorrect suggestion when trying to write to an immutable field in an async function,2022-01-19T20:44:27Z,2022-02-02T22:03:30Z,93221,https://github.com/rust-lang/rust/pull/93221,,,,14,58,"['mutability_errors.rs', 'issue-93093.rs', 'issue-93093.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'src/test/ui/borrowck', 'src/test/ui/borrowck']",,0,"struct S { foo: usize }
 impl S {
 async fn bar(&self) {
 self.foo += 1;
 }
 }","struct S { foo: usize }
 impl S {
 async fn bar(&self) {
 self.foo += 1;
 }
 }",,1,,,,,,,
92984,"{'C-bug', 'T-compiler', 'A-MIR', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/92984,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-MIR Transform,5. Exception Handling & Report,6,Can't modify value after temporarily dropping reference in loop when using Drop,2022-01-16T20:47:34Z,2024-01-26T11:30:53Z,107421,https://github.com/rust-lang/rust/pull/107421,,,,739,,,,,0,"struct Console<'gfx>(&'gfx usize);
 
 impl<'gfx> Drop for Console<'gfx> {
 fn drop(&mut self) {}
 }
 
 fn main() {
 let mut gfx = 0;
 let mut console = Console(&gfx);
 
 for _ in 0..5 {
 println!(""{gfx}"");
 
 if gfx == 0 {
 drop(console);
 
 gfx += 1;
 
 console = Console(&gfx);
 }
 }
 }","struct Console<'gfx>(&'gfx usize);
 
 impl<'gfx> Drop for Console<'gfx> {
 fn drop(&mut self) {}
 }
 
 fn main() {
 let mut gfx = 0;
 let mut console = Console(&gfx);
 
 for _ in 0..5 {
 println!(""{gfx}"");
 
 if gfx == 0 {
 drop(console);
 
 gfx += 1;
 
 console = Console(&gfx);
 }
 }
 }",,,,,1,,,,
92940,"{'A-trait-system', 'C-bug', 'T-rustdoc'}",https://github.com/rust-lang/rust/issues/92940,exclude,,,,,,,rustdoc: Impl for boxed type doesn't show up on the type's page,2022-01-15T18:54:58Z,2022-05-20T15:40:30Z,,,,,,124,27,"['cache.rs', 'impl-box.rs']","['src/librustdoc/formats', 'src/test/rustdoc']",,0,,,,,,,,,,,
92894,"{'A-impl-trait', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/92894,duplicate,,,,,,,Rust detects a conflict between non-conflicting implementations of a trait,2022-01-14T14:13:44Z,2023-05-08T12:26:13Z,,,,,,478,,,,,0,,,,,,,,,,,
92893,"{'I-ICE', 'glacier', 'A-MIR', 'T-compiler', 'A-const-eval', 'C-bug'}",https://github.com/rust-lang/rust/issues/92893,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,3,error: internal compiler error: compiler/rustc_middle/src/middle/region.rs:377:32: no enclosing scope for id 6,2022-01-14T13:13:02Z,2022-04-15T21:14:22Z,94849,https://github.com/rust-lang/rust/pull/94849,Check var scope if it exist,2022/3/11 14:55,2022/4/15 21:14,91,56,"['region.rs', 'mod.rs', 'generator_interior.rs', 'issue-92893.rs', 'issue-92893.stderr', 'needless_range_loop.rs', 'shadow.rs']","['compiler/rustc_middle/src/middle', 'compiler/rustc_mir_build/src/build/matches', 'compiler/rustc_typeck/src/check', 'src/test/ui/mir', 'src/test/ui/mir', 'src/tools/clippy/clippy_lints/src/loops', 'src/tools/clippy/clippy_lints/src']",,0,"struct Bug<A = [(); (let a = (), 1).1]> {
 a: A 
 }
 
 fn main() {
 
 }","struct Bug<A = [(); (let a = (), 1).1]> {
 a: A 
 }
 
 fn main() {}",,,,,,,,,
92833,"{'A-lifetimes', 'A-impl-trait', 'T-compiler', 'C-bug', 'I-crash'}",https://github.com/rust-lang/rust/issues/92833,duplicate,,,,,,,Stack overflow with `impl Trait` and multiple lifetimes... and a closure.,2022-01-13T00:17:26Z,2022-01-13T00:36:18Z,,,,,,0,,,,,0,,,,,,,,,,,
92713,"{'A-trait-system', 'F-const_trait_impl', 'T-compiler', 'A-const-eval', 'D-terse', 'F-inline_const', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/92713,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,1. Type-Trait & Bound,1,Poor diagnostic when passing `T: Drop` (nonconst only) to a function that takes `~const Drop` in an inline const ,2022-01-10T05:41:36Z,2022-01-15T13:56:42Z,92892,https://github.com/rust-lang/rust/pull/92892,Do not fail evaluation in const blocks,2022/1/14 11:44,2022/1/15 13:56,5,40,"['expr.rs', 'const-block-const-bound.rs', 'const-block-const-bound.stderr']","['compiler/rustc_typeck/src/check', 'src/test/ui/consts', 'src/test/ui/consts']",,0,"#![allow(unused)]
 #![feature(const_fn_trait_bound, const_trait_impl, inline_const)]
 
 const fn f<T: ~const Drop>(x: T) {}
 
 struct UnconstDrop;
 
 impl Drop for UnconstDrop {
 fn drop(&mut self) {}
 }
 
 fn main() {
 const {
 f(UnconstDrop);
 }
 }","#![allow(unused)]
 #![feature(const_fn_trait_bound, const_trait_impl, inline_const)]
 
 const fn f<T: ~const Drop>(x: T) {}
 
 struct UnconstDrop;
 
 impl Drop for UnconstDrop {
 fn drop(&mut self) {}
 }
 
 fn main() {
 const {
 f(UnconstDrop);
 }
 }",,,,1,,,,,"#![feature(const_fn_trait_bound, const_trait_impl, inline_const)]"
92712,"{'A-trait-system', 'F-const_trait_impl', 'T-compiler', 'A-diagnostics', 'D-confusing'}",https://github.com/rust-lang/rust/issues/92712,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-trait solving,1. Type-Trait & Bound,6,E0277 reports `const Drop` bounds as `Drop` bounds ,2022-01-10T05:28:03Z,2022-02-14T05:47:01Z,92256,https://github.com/rust-lang/rust/pull/92256,,,,35,,,,,0,"#![allow(unused)]
 #![feature(const_fn_trait_bound, const_trait_impl)]
 
 const fn f<T: ~const Drop>(x: T) {}
 
 struct UnconstDrop;
 
 impl Drop for UnconstDrop {
 fn drop(&mut self) {}
 }
 
 const X: () = f(UnconstDrop);","#![allow(unused)]
 #![feature(const_fn_trait_bound, const_trait_impl)]
 
 const fn f<T: ~const Drop>(x: T) {}
 
 struct UnconstDrop;
 
 impl Drop for UnconstDrop {
 fn drop(&mut self) {}
 }
 
 const X: () = f(UnconstDrop);",,,,1,,,,,"#![feature(const_fn_trait_bound, const_trait_impl)]"
92603,"{'A-lifetimes', 'A-NLL', 'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/92603,Not reproducible anymore,,,,,,,Trait resolution with index operator and mixed lifetimes,2022-01-06T01:46:47Z,2024-01-24T10:56:40Z,,,,,,748,,,,,0,,,,,,,,,,,
92531,"{'C-enhancement', 'T-compiler', 'D-terse', 'A-borrow-checker', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/92531,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,3. MIR-report,2. Ownership-Borrow&Move,1,Confusing error message with moving a value within a nested for loop,2022-01-03T19:26:37Z,2024-03-18T04:14:12Z,121652,https://github.com/rust-lang/rust/pull/121652,,,,804,280,"['conflict_errors.rs', 'liveness-move-call-arg-2.stderr', 'liveness-move-call-arg.stderr', 'borrow-closures-instead-of-move.rs', 'borrow-closures-instead-of-move.stderr', 'nested-loop-moved-value-wrong-continue.rs', 'nested-loop-moved-value-wrong-continue.stderr', 'recreating-value-in-loop-condition.rs', 'recreating-value-in-loop-condition.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'tests/ui/liveness', 'tests/ui/liveness', 'tests/ui/moves', 'tests/ui/moves', 'tests/ui/moves', 'tests/ui/moves', 'tests/ui/moves', 'tests/ui/moves']",,0,"let foos = vec![String::from(""hello""), String::from(""world"")];
 let bars = vec![""world""];
 
 let mut baz = vec![];
 let mut qux = vec![];
 
 for foo in foos {
 for bar in &bars {
 if foo == *bar {
 baz.push(foo);
 continue;
 }
 }
 
 qux.push(foo);
 }","let foos = vec![String::from(""hello""), String::from(""world"")];
 let bars = vec![""world""];
 
 let mut baz = vec![];
 let mut qux = vec![];
 
 for foo in foos {
 for bar in &bars {
 if foo == *bar {
 baz.push(foo);
 continue;
 }
 }
 
 qux.push(foo);
 }",,,,,,,,,
134632,"{'A-coherence', 'T-compiler', 'D-terse', 'F-negative_impls', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/134632,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-trait solving,5. Exception Handling & Report,1,Positive and Negative Trait Implementations Clash Unexpectedly,2024-12-21T23:02:19Z,2024-12-22T13:27:08Z,134639,https://github.com/rust-lang/rust/pull/134639,Make sure we note ambiguity causes on positive/negative impl conflicts,2024/12/22 2:04,2024/12/22 13:27,0,63,"['mod.rs', 'ambiguity-cause.negative_coherence.stderr', 'ambiguity-cause.rs', 'ambiguity-cause.simple.stderr']","['compiler/rustc_trait_selection/src/traits/specialize', 'tests/ui/traits/negative-impls', 'tests/ui/traits/negative-impls', 'tests/ui/traits/negative-impls']",,0,"#![allow(unused)]
 #![feature(negative_impls)]
 
 trait MyTrait {}
 
 #[derive(Clone)]
 struct MyString {
 string: String,
 }
 
 impl<T: Copy> !MyTrait for T { }
 
 // Works
 impl MyTrait for MyString { }
 // Throws error but it should work
 impl MyTrait for String { }
 
 fn main() {
 
 }","#![allow(unused)]
 #![feature(negative_impls)]
 
 trait MyTrait {}
 
 #[derive(Clone)]
 struct MyString {
 string: String,
 }
 
 impl<T: Copy> !MyTrait for T { }
 
 // Works
 impl MyTrait for MyString { }
 // Throws error but it should work
 impl MyTrait for String { }
 
 fn main() {
 
 }",,,,,,Copy,,,#![feature(negative_impls)]
134546,"{'I-ICE', 'requires-incomplete-features', 'requires-nightly', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/134546,duplicate,,,,,,,ICE: unsized type for `NullaryOp::SizeOf` through `size_of` const expr in type alias,2024-12-20T05:01:17Z,2024-12-20T08:37:52Z,,,,,,0,,,,,0,,,,,,,,,,,
134246,"{'I-ICE', 'F-async_closure', 'T-compiler', 'C-bug', 'A-stable-MIR'}",https://github.com/rust-lang/rust/issues/134246,valid,icemaker,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,3,ICE: not yet implemented: FIXME(async_closures): Lower these to SMIR,2024-12-13T07:20:53Z,2024-12-14T22:42:33Z,134295,https://github.com/rust-lang/rust/pull/134295,Encode coroutine-closures in SMIR,2024/12/14 3:45,2024/12/14 22:42,1,141,"['internal.rs', 'mod.rs', 'mir.rs', 'body.rs', 'pretty.rs', 'ty.rs', 'visitor.rs', 'async-closure.rs', 'async-closure.stdout']","['compiler/rustc_smir/src/rustc_internal', 'compiler/rustc_smir/src/rustc_internal', 'compiler/rustc_smir/src/rustc_smir/convert', 'compiler/stable_mir/src/mir', 'compiler/stable_mir/src/mir', 'compiler/stable_mir/src', 'compiler/stable_mir/src', 'tests/ui/stable-mir-print', 'tests/ui/stable-mir-print']",,0,"//@compile-flags: -Zunpretty=stable-mir --edition=2018
 use std::future::ready;
 pub fn main() {
 let mut vec: Vec<String> = vec![];
 
 let closure = async || {
 vec.push(ready(String::from("""")).await);
 };
 }","//@compile-flags: -Zunpretty=stable-mir --edition=2018
 use std::future::ready;
 pub fn main() {
 let mut vec: Vec<String> = vec![];
 
 let closure = async || {
 vec.push(ready(String::from("""")).await);
 };
 }",,1,,1,,,-Zunpretty=stable-mir,=-Zunpretty=stable-mir,
133361,"{'A-trait-objects', 'A-coherence', 'T-types', 'I-unsound', 'P-high', 'C-bug'}",https://github.com/rust-lang/rust/issues/133361,valid,developer,1. Crash-Back-end Crash,,2. HIR-type & wf check,1. Type-Trait & Bound,3,Coherence with object types with overlapping supertrait projections is incomplete,2024-11-23T02:20:57Z,,136458,,,,,91,,,,P-high,0,"trait Sup<T> {
 type Assoc;
 }
 
 impl<T> Sup<T> for () {
 type Assoc = T;
 }
 impl<T, U> Dyn<T, U> for () {}
 
 trait Dyn<A, B>: Sup<A, Assoc = A> + Sup<B, Assoc = B> {}
 
 trait Trait {
 type Assoc;
 }
 impl Trait for dyn Dyn<(), ()> {
 type Assoc = &'static str;
 }
 impl<A, B> Trait for dyn Dyn<A, B> {
 type Assoc = usize;
 }
 
 fn call<A, B>(x: usize) -> <dyn Dyn<A, B> as Trait>::Assoc {
 x
 }
 
 fn main() {
 let x: &'static str = call::<(), ()>(0xDEADBEEF);
 println!(""{x}"");
 }","trait Sup<T> {
 type Assoc;
 }
 
 impl<T> Sup<T> for () {
 type Assoc = T;
 }
 impl<T, U> Dyn<T, U> for () {}
 
 trait Dyn<A, B>: Sup<A, Assoc = A> + Sup<B, Assoc = B> {}
 
 trait Trait {
 type Assoc;
 }
 impl Trait for dyn Dyn<(), ()> {
 type Assoc = &'static str;
 }
 impl<A, B> Trait for dyn Dyn<A, B> {
 type Assoc = usize;
 }
 
 fn call<A, B>(x: usize) -> <dyn Dyn<A, B> as Trait>::Assoc {
 x
 }
 
 fn main() {
 let x: &'static str = call::<(), ()>(0xDEADBEEF);
 println!(""{x}"");
 }",,,1,,1,,,,
133222,"{'requires-incomplete-features', 'F-pin_ergonomics', 'A-coercions', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/133222,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,2. Ownership-Borrow&Move,1,"`pin_ergonomics` leads to bizarre ""expected `Pin<X>` found `Pin<X>`"" type errors",2024-11-19T23:02:42Z,2024-11-28T13:59:59Z,133358,https://github.com/rust-lang/rust/pull/133358,Don't type error if we fail to coerce `Pin<T>` because it doesnt contain a ref,2024/11/23 1:42,2024/11/28 14:00,8,40,"['coercion.rs', 'coerce-non-pointer-pin.rs', 'coerce-non-pointer-pin.stderr', 'reborrow-arg.rs', 'reborrow-const-as-mut.rs', 'reborrow-const-as-mut.stderr', 'reborrow-once.rs', 'reborrow-once.stderr', 'reborrow-self.rs', 'reborrow-shorter.rs', 'sugar-ambiguity.rs', 'sugar-no-const.rs', 'sugar-no-const.stderr', 'sugar.rs']","['compiler/rustc_hir_typeck/src', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics', 'tests/ui/async-await/pin-ergonomics']",,0,"#![feature(pin_ergonomics)]
 
 use std::pin::Pin;
 
 pub fn foo() {
 let _: Pin<Box<()>> = Box::pin(());
 }","#![feature(pin_ergonomics)]
 
 use std::pin::Pin;
 
 pub fn foo() {
 let _: Pin<Box<()>> = Box::pin(());
 }",,,,1,,,,,#![feature(pin_ergonomics)]
133117,"{'I-ICE', 'F-never_patterns', 'A-MIR', 'S-bug-has-test', 'A-patterns', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/133117,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,1,ICE: `leaf_candidate.false_edge_start_block.is_some()` duplicate match arm,2024-11-16T18:52:05Z,2025-01-23T01:02:29Z,135409,https://github.com/rust-lang/rust/pull/135409,Fix ICE-133117: multiple never-pattern arm doesn't have false_edge_start_block,2025/1/12 14:47,2025/1/23 1:02,67,144,"['mod.rs', '130779.rs', '133063.rs', '133117.rs', 'ICE-130779-never-arm-no-oatherwise-block.rs', 'ICE-130779-never-arm-no-oatherwise-block.stderr', 'ICE-133063-never-arm-no-otherwise-block.rs', 'ICE-133063-never-arm-no-otherwise-block.stderr', 'ICE-133117-duplicate-never-arm.rs', 'ICE-133117-duplicate-never-arm.stderr']","['compiler/rustc_mir_build/src/builder/matches', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns']",,0,"fn main() {
 match () {
 (!|!) if true => {}
 (!|!) if true => {}
 }
 }","fn main() {
 match () {
 (!|!) if true => {}
 (!|!) if true => {}
 }
 }",,,,,,,,,
133063,"{'I-ICE', 'S-has-bisection', 'F-never_patterns', 'F-if_let_guard', 'A-MIR', 'S-bug-has-test', 'A-patterns', 'T-compiler', 'S-has-mcve', 'C-bug'}",https://github.com/rust-lang/rust/issues/133063,valid,icemaker,1. Crash-Front-end Panic,invalid,3. MIR-Dataflow Analysis,4. Basic syntax&structure,1,ICE: compiler/rustc_mir_build/src/build/matches/mod.rs `None`,2024-11-15T08:29:04Z,2025-01-23T01:02:29Z,135409,https://github.com/rust-lang/rust/pull/135409,Fix ICE-133117: multiple never-pattern arm doesn't have false_edge_start_block,2025/1/12 14:47,2025/1/23 1:02,68,144,"['mod.rs', '130779.rs', '133063.rs', '133117.rs', 'ICE-130779-never-arm-no-oatherwise-block.rs', 'ICE-130779-never-arm-no-oatherwise-block.stderr', 'ICE-133063-never-arm-no-otherwise-block.rs', 'ICE-133063-never-arm-no-otherwise-block.stderr', 'ICE-133117-duplicate-never-arm.rs', 'ICE-133117-duplicate-never-arm.stderr']","['compiler/rustc_mir_build/src/builder/matches', 'tests/crashes', 'tests/crashes', 'tests/crashes', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns', 'tests/ui/rfcs/rfc-0000-never_patterns']",,0,"//@ check-pass
 
 #![feature(if_let_guard)]
 
 fn split_last(_: &()) -> Option<(&i32, &i32)> {
 None
 }
 
 fn assign_twice() {
 loop {
 match () {
 #[allow(irrefutable_let_patterns)]
 (! | !) if let _ = split_last(&()) => {}
 _ => {}
 }
 }
 }
 
 fn main() {}","fn split_last(_: &()) -> Option<(&i32, &i32)> {
 None
 }
 
 fn assign_twice() {
 loop {
 match () {
 
 (! | !) if let _ = split_last(&()) => {}
 _ => {}
 }
 }
 }",,,,,,,,,
132330,"{'I-ICE', 'A-trait-system', 'S-bug-has-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'WG-trait-system-refactor'}",https://github.com/rust-lang/rust/issues/132330,valid,icemaker,1. Crash-Front-end Panic,valid,2. HIR-type & wf check,1. Type-Opaque Types,3,ICE with next-solver: ExistentialMismatch,2024-10-29T20:33:29Z,2025-02-22T06:11:47Z,136458,,,,,115,,,,,0,"trait Service {
 type S;
 }
 
 trait Framing {
 type F;
 }
 
 impl Framing for () {
 type F = ();
 }
 
 trait HttpService<F: Framing>: Service<S = F::F> {}
 
 type BoxService = Box<dyn HttpService<(), S = ()>>;
 
 fn build_server<F: FnOnce() -> BoxService>(_: F) {}
 
 fn make_server<F: Framing>() -> Box<dyn HttpService<F, S = F::F>> {
 unimplemented!()
 }
 
 fn main() {
 build_server(|| make_server())
 }","trait Service {
 type S;
 }
 
 trait Framing {
 type F;
 }
 
 impl Framing for () {
 type F = ();
 }
 
 trait HttpService: Service<S = <() as Framing>::F> {}
 
 fn main() {
 let _: dyn HttpService<S = ()>;
 }",,,1,,,,,,
132120,"{'I-ICE', 'A-THIR', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/132120,valid,developer,1. Crash-Front-end Panic,invalid,1. AST,5. Exception Handling & Report,2,ICE with const blocks in rustc_legacy_const_generics,2024-10-24T20:53:25Z,2024-12-15T14:43:42Z,130443,,,,,51,,,,,0,"fn main() {
 const I = 0; // type ommitted
 std::arch::x86_64::_mm_shuffle_ps(todo!(), todo!(), const {I});
 }","fn main() {
 const I = 0; // type ommitted
 std::arch::x86_64::_mm_shuffle_ps(todo!(), todo!(), const {I});
 }",,,,1,,,,,
131338,"{'A-coercions', 'C-feature-request'}",https://github.com/rust-lang/rust/issues/131338,Not a bug,,,,,,,Owned Reference will not Deref,2024-10-06T19:20:22Z,2024-10-06T22:34:21Z,,,,,,0,,,,,0,,,,,,,,,,,
130589,"{'I-ICE', 'S-has-bisection', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-macros', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/130589,valid,members,1. Crash-Front-end Panic,valid,1. AST,4. Basic syntax&structure,3,ICE when using macro to wrap const generic,2024-09-20T00:23:06Z,2024-09-27T03:00:16Z,130337,,,,,7,,,,,0,"fn main() {
 const I = 0; // type ommitted
 std::arch::x86_64::_mm_shuffle_ps(todo!(), todo!(), const {I});
 }","macro_rules! wrap {
 ($v:expr) => {
 $v
 };
 }
 
 pub struct Const<const V: usize>;
 
 pub struct S<const V: usize>(Const<{ wrap!(V) }>);",,,,,,,,,
129286,"{'T-types', 'P-medium', 'A-coercions', 'regression-from-stable-to-nightly', 'A-variance', 'C-bug'}",https://github.com/rust-lang/rust/issues/129286,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,4. Basic syntax&structure,2,Regression in clone impl of enum with variant that has a field with a bivariant substitution,2024-08-20T01:05:50Z,2024-09-02T18:35:35Z,129317,https://github.com/rust-lang/rust/pull/129317,Use equality when relating formal and expected type in arg checking,2024/8/20 15:54,2024/9/2 18:35,13,176,"['callee.rs', 'expr.rs', '_impl.rs', 'checks.rs', 'constrain-expectation-in-arg.rs']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'tests/ui/coercion']",P-medium,0,"trait Array {
 type Item;
 }
 
 trait Platform {
 type Assoc: Array<Item = Self::Assoc2>;
 type Assoc2;
 }
 
 struct Message<A, B>
 where
 A: Array<Item = B>,
 {
 pub field: A,
 }
 
 impl<A, B> Clone for Message<A, B>
 where
 A: Array<Item = B>,
 {
 fn clone(&self) -> Self {
 todo!()
 }
 }
 
 fn clone<P: Platform>(x: &Message<P::Assoc, P::Assoc2>) {
 let x: Message<_, _> = Clone::clone(x);
 }","trait Array {
 type Item;
 }
 
 trait Platform {
 type Assoc: Array<Item = Self::Assoc2>;
 type Assoc2;
 }
 
 struct Message<A, B>
 where
 A: Array<Item = B>,
 {
 pub field: A,
 }
 
 impl<A, B> Clone for Message<A, B>
 where
 A: Array<Item = B>,
 {
 fn clone(&self) -> Self {
 todo!()
 }
 }
 
 fn clone<P: Platform>(x: &Message<P::Assoc, P::Assoc2>) {
 let x: Message<_, _> = Clone::clone(x);
 }",,,,,,Clone,,,
129285,"{'T-types', 'P-medium', 'A-coercions', 'regression-from-stable-to-nightly', 'C-bug'}",https://github.com/rust-lang/rust/issues/129285,valid,members,2. Correctness Issues-Completeness Issues,,3. MIR-Borrow Check,5. Exception Handling & Report,1,Can't cast higher-ranked safe fn to (not higher-ranked) unsafe fn ptr,2024-08-20T00:20:32Z,2024-08-26T08:07:51Z,129288,https://github.com/rust-lang/rust/pull/129288,"Use subtyping for `UnsafeFnPointer` coercion, too",2024/8/20 1:28,2024/8/26 8:07,6,18,"['mod.rs', 'cast-higher-ranked-unsafe-fn-ptr.rs']","['compiler/rustc_borrowck/src/type_check', 'tests/ui/coercion']",P-medium,0,"fn higher_ranked(ctx: &mut ()) {}
 
 fn main() {
 fn as_unsafe<T>(_: unsafe fn(T)) {}
 as_unsafe(higher_ranked);
 }","fn higher_ranked(ctx: &mut ()) {}
 
 fn main() {
 fn as_unsafe<T>(_: unsafe fn(T)) {}
 as_unsafe(higher_ranked);
 }",,,,,,,,,
128390,"{'A-coherence', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/128390,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-type & wf check,5. Exception Handling & Report,2,Error on implementation violating the orphan rules implies all types must be local when one uncovered local type is sufficient.,2024-07-30T12:49:38Z,2024-10-17T13:50:43Z,128391,https://github.com/rust-lang/rust/pull/128391,"Change orphan hint from ""only"" to ""any uncovered type inside...""",2024/7/30 12:56,2024/10/17 13:50,79,458,"['messages.ftl', 'errors.rs', 'coherence-cow.re_a.stderr', 'coherence-cow.re_b.stderr', 'coherence-cow.re_c.stderr', 'coherence-fundamental-trait-objects.stderr', 'coherence-impl-trait-for-marker-trait-negative.stderr', 'coherence-impl-trait-for-marker-trait-positive.stderr', 'coherence-impls-copy.stderr', 'coherence-impls-send.stderr', 'coherence-impls-sized.stderr', 'coherence-negative-impls-copy-bad.stderr', 'coherence-orphan.stderr', 'coherence-overlapping-pairs.stderr', 'coherence-pair-covered-uncovered-1.stderr', 'coherence-pair-covered-uncovered.stderr', 'coherence-vec-local-2.stderr', 'coherence-vec-local.stderr', 'coherence_local_err_struct.stderr', 'coherence_local_err_tuple.stderr', 'impl-foreign-for-foreign.stderr', 'impl-foreign-for-foreign[foreign].stderr', 'impl-foreign-for-fundamental[foreign].stderr', 'impl-foreign[foreign]-for-foreign.stderr', 'impl-foreign[fundemental[foreign]]-for-foreign.stderr', 'impl[t]-foreign-for-foreign[t].stderr', 'drop-on-non-struct.stderr', 'E0117.stderr', 'complex-impl.stderr', 'issue-99572-impl-trait-on-pointer.rs', 'issue-99572-impl-trait-on-pointer.stderr', 'issue-67535.stderr', 'const-and-non-const-impl.stderr', 'coherence.classic.stderr', 'coherence.next.stderr', 'range_patterns_trait_impls2.stderr', 'typeck-default-trait-impl-cross-crate-coherence.stderr']","['compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/coherence', 'tests/ui/dropck', 'tests/ui/error-codes', 'tests/ui/error-codes/e0119', 'tests/ui/errors', 'tests/ui/errors', 'tests/ui/issues', 'tests/ui/rfcs/rfc-2632-const-trait-impl', 'tests/ui/type-alias-impl-trait', 'tests/ui/type-alias-impl-trait', 'tests/ui/type/pattern_types', 'tests/ui/typeck']",,0,"impl From<()> for () {
 fn from(_: ()) {}
 }","impl From<()> for () {
 fn from(_: ()) {}
 }",,,,,,,,,
128097,"{'I-ICE', 'F-explicit_tail_calls', 'S-bug-has-test', 'T-compiler', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/128097,valid,developer,1. Crash-Front-end Panic,valid,3. MIR-Dataflow Analysis,5. Exception Handling & Report,1,compiler/rustc_borrowck/src/borrow_set.rs:250:17: found two uses for 2-phase borrow temporary,2024-07-23T13:42:16Z,2025-01-25T01:55:54Z,135976,https://github.com/rust-lang/rust/pull/135976,Don't drop types with no drop glue when building drops for tailcalls,2025/1/24 5:53,2025/1/25 1:55,185,48,"['scope.rs', 'dangling-local-var.stderr', '128097.rs', 'tail_call_drops.f.ElaborateDrops.panic-abort.diff', 'tail_call_drops.f.ElaborateDrops.panic-unwind.diff', 'tail_call_drops.f.built.after.panic-abort.mir', 'tail_call_drops.f.built.after.panic-unwind.mir', 'tail_call_drops.f_with_arg.ElaborateDrops.panic-abort.diff', 'tail_call_drops.f_with_arg.ElaborateDrops.panic-unwind.diff', 'tail_call_drops.f_with_arg.built.after.panic-abort.mir', 'tail_call_drops.f_with_arg.built.after.panic-unwind.mir', 'ctfe-arg-bad-borrow.stderr', 'two-phase.rs']","['compiler/rustc_mir_build/src/builder', 'src/tools/miri/tests/fail/tail_calls', 'tests/crashes', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/mir-opt', 'tests/ui/explicit-tail-calls', 'tests/ui/explicit-tail-calls']",,0,"
 trait Cut {
 fn floor(&mut self) -> (Option<TransDataType>, Bson)
 where
 Self: Serialize,
 {
 match serde_json::to_string(&self) {
 Ok(json) => match json.len() {
 len if len > MAX_VARCHAR_SIZE => {
 (Some(TransDataType::Varchar(MAX_VARCHAR_SIZE)), self.cut())
 }
 len => (
 Some(TransDataType::Varchar(varchar_size(len))),
 Bson::String(json),
 ),
 },
 Err(e) => {
 tracing::error!(?e);
 (None, Bson::Null)
 }
 }
 }
 fn cut(&mut self) -> Bson;
 }
 
 impl Cut for Vec<Bson> {
 /// When the size of the JSON array string exceeds 65535, it needs to be trimmed so that the length is less than 65535;<br>
 /// Discard the largest element in the array, and then recursively repeat the judgment
 fn cut(&mut self) -> Bson {
 let remove_index = self
 .iter()
 .enumerate()
 .map(|(idx, value)| {
 (
 idx,
 serde_json::to_string(value)
 .map(|s| s.len())
 .unwrap_or(usize::MAX),
 )
 })
 .max_by(|a, b| a.1.cmp(&b.1))
 .map(|(idx, _)| idx);
 
 if let Some(remove_index) = remove_index {
 let remove_value = self.remove(remove_index);
 tracing::warn!(?remove_index, ?remove_value, ""Cut the BSON array length"");
 }
 
 match serde_json::to_string(&self) {
 Ok(json) if json.len() > MAX_VARCHAR_SIZE => become self.cut(),
 Ok(json) => Bson::String(json),
 Err(e) => {
 tracing::error!(?e);
 Bson::Null
 }
 }
 }
 }
 
 impl Cut for Document {
 /// When the size of the JSON object string exceeds 65535, it needs to be trimmed so that the length is less than 65535;<br>
 /// Discard the largest element in the array, and then recursively repeat the judgment
 fn cut(&mut self) -> Bson {
 let replace_key = self
 .iter()
 .map(|(key, value)| {
 (
 key,
 serde_json::to_string(value)
 .map(|s| s.len())
 .unwrap_or(usize::MAX),
 )
 })
 .max_by(|a, b| a.1.cmp(&b.1))
 .map(|(k, _)| k.to_string());
 
 if let Some(replace_key) = replace_key {
 tracing::warn!(
 ""Replace the value of the largest field: {} in the BSON object as ..."",
 replace_key
 );
 let _ = self.insert(replace_key, Bson::String(""..."".to_string()));
 }
 
 match serde_json::to_string(&self) {
 Ok(json) if json.len() > MAX_VARCHAR_SIZE => become self.cut(),
 Ok(json) => Bson::String(json),
 Err(e) => {
 tracing::error!(?e);
 Bson::Null
 }
 }
 }
 }","#![feature(explicit_tail_calls)]
 fn cut(x: &mut ()) {
 if let Some(_) = Some(Box::new(())) {
 become cut(x);
 }
 }",,,,,,,,,#![feature(explicit_tail_calls)]
127716,"{'A-const-generics', 'A-testsuite', 'T-compiler', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/127716,duplicate,,,,,,,The `ui/const-generics/std/const-generics/range.rs` test is not run (?),2024-07-14T12:34:02Z,2024-07-14T12:36:08Z,,,,,,0,,,,,0,,,,,,,,,,,
127009,"{'I-ICE', 'F-non_lifetime_binders', 'requires-incomplete-features', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/127009,valid,members,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,3,ICE(non_lifetime_binders): const bound params not handled correctly,2024-06-26T21:45:06Z,2024-07-22T05:54:59Z,128020,https://github.com/rust-lang/rust/pull/128020,Just totally fully deny late-bound consts,2024/7/20 21:59,2024/7/22 5:54,25,140,"['messages.ftl', 'errors.rs', 'feature_gate.rs', 'resolve_bound_vars.rs', 'late.rs', '127009.rs', 'const-bound.rs', 'const-bound.stderr', 'no-entry-found-for-key-ice-gce-nlb-113133.rs', 'no-entry-found-for-key-ice-gce-nlb-113133.stderr', 'bad-suggestion-on-missing-assoc.rs', 'bad-suggestion-on-missing-assoc.stderr', 'binder-defaults-112547.rs', 'binder-defaults-112547.stderr', 'binder-defaults-119489.rs', 'binder-defaults-119489.stderr', 'late-const-param-wf.rs', 'late-const-param-wf.stderr']","['compiler/rustc_ast_passes', 'compiler/rustc_ast_passes/src', 'compiler/rustc_ast_passes/src', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_resolve/src', 'tests/crashes', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders', 'tests/ui/traits/non_lifetime_binders']",,0,"#![feature(non_lifetime_binders)]
 //~^ WARN the feature `non_lifetime_binders` is incomplete
 
 fn b()
 where
 for<const C: usize> [(); C]: Copy,
 //~^ ERROR cannot capture late-bound const parameter in constant
 {
 }
 
 fn main() {}","#![feature(non_lifetime_binders)]
 //~^ WARN the feature `non_lifetime_binders` is incomplete
 
 fn b()
 where
 for<const C: usize> [(); C]: Copy,
 //~^ ERROR cannot capture late-bound const parameter in constant
 {
 }
 
 fn main() {}",,,,,,Copy,,,
125763,"{'T-types', 'A-coherence', 'finished-final-comment-period', 'C-bug', 'disposition-close'}",https://github.com/rust-lang/rust/issues/125763,Not reproducible anymore,members,2. Correctness Issues-Completeness Issues,,,,,conflicting impl since nightly-2024-05-01,2024-05-30T08:45:16Z,2024-06-16T13:34:41Z,,,,,,17,,,,,0,,"pub trait Overlap {}
impl<T: Overlap + ?Sized> Overlap for &'static T {}
impl<T: LabelSet> Overlap for T
where
    for<'a> T::Value<'a>: LabelGroup,
{}

pub trait LabelGroup {}
pub trait LabelSet {
    type Value<'a>;
}",,,,,,,,,
124942,"{'A-rustfmt', 'requires-nightly', 'C-bug', 'A-const-generics', 'F-generic_const_items'}",https://github.com/rust-lang/rust/issues/124942,duplicate,,,,,,,Const generic param disappears after rustfmt,2024-05-09T19:36:31Z,2024-05-10T09:43:26Z,,,,,,0,,,,,0,,,,,,,,,,,
124913,"{'T-types', 'A-coherence', 'C-bug'}",https://github.com/rust-lang/rust/issues/124913,duplicate,,,,,,,Conflicting implementation : impl<T> From<T> for T can never conflict,2024-05-08T22:55:47Z,2024-05-12T04:50:24Z,,,,,,3,,,,,0,,,,,,,,,,,
124664,"{'regression-from-stable-to-stable', 'A-coherence', 'T-types', 'C-bug'}",https://github.com/rust-lang/rust/issues/124664,Not reproducible anymore,,,,,,,Trait coherency regression in 1.78,2024-05-03T14:05:47Z,2024-05-04T09:16:17Z,,,,,,0,,,,,0,,,,,,,,,,,
124515,"{'I-ICE', 'F-with_negative_coherence', 'A-coherence', 'T-compiler', 'C-bug', 'A-specialization'}",https://github.com/rust-lang/rust/issues/124515,duplicate,,,,,,,ICE: `with_negative_coherence` & specialization,2024-04-29T11:46:09Z,2024-04-29T11:58:50Z,,,,,,0,,,,,0,,,,,,,,,,,
123954,"{'I-ICE', 'requires-incomplete-features', 'T-compiler', 'S-has-mcve', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/123954,duplicate,,,,,,,ICE: const generic with default const expr specified before type generic causes compiler to crash,2024-04-15T06:03:28Z,2024-04-15T16:57:59Z,,,,,,0,,,,,0,,,,,,,,,,,
123906,"{'I-ICE', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-const-generics', 'A-diagnostics', 'A-suggestion-diagnostics'}",https://github.com/rust-lang/rust/issues/123906,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-report,5. Exception Handling & Report,5,"ICE: `expected usize, got N/#0: usize`",2024-04-14T03:12:52Z,2024-04-15T21:27:19Z,123924,https://github.com/rust-lang/rust/pull/123924,Fix various bugs in `ty_kind_suggestion`,2024/4/14 13:43,2024/4/15 21:27,1,269,"['conflict_errors.rs', 'mod.rs', 'coercion.rs', 'expr.rs', 'lib.rs', 'suggestions.rs', 'value-suggestion-ice-123906.rs', 'value-suggestion-ice-123906.stderr', 'E0069.stderr', 'ret-non-nil.stderr', 'suggest-a-value.rs', 'suggest-a-value.stderr']","['compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_trait_selection/src', 'compiler/rustc_trait_selection/src/traits/error_reporting', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/error-codes', 'tests/ui', 'tests/ui/return', 'tests/ui/return']",,0,"fn as_chunks<const N: usize>() -> [u8; N] {
 loop {
 break;
 }
 }
 
 fn main() {}","fn as_chunks<const N: usize>() -> [u8; N] {
 loop {
 break;
 }
 }
 
 fn main() {}",,,,,,,,,
123893,"{'I-ICE', 'S-bug-has-test', 'T-compiler', '-Zpolymorphize', 'S-has-mcve', 'C-bug', 'A-mir-opt-inlining', 'A-mir-opt'}",https://github.com/rust-lang/rust/issues/123893,Not a bug,,,,,,,ICE: `Couldn't evaluate constant const`,2024-04-13T11:50:42Z,2025-02-11T22:51:52Z,,,,,,304,,,,,0,,,,,,,,,,,
123839,"{'fixed-by-polonius', 'T-types', 'NLL-polonius', 'C-bug', 'A-borrow-checker'}",https://github.com/rust-lang/rust/issues/123839,duplicate,,,,,,,Borrow checking should identify function returns,2024-04-12T03:01:02Z,2025-02-09T03:16:35Z,,,,,,303,,,,,0,,,,,,,,,,,
123077,"{'I-ICE', 'S-bug-has-test', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/123077,valid,icemaker,1. Crash-Front-end Panic,invalid,1. AST,4. Basic syntax&structure,2,ICE: thir: `LocalTableInContext: key not found`,2024-03-26T05:10:55Z,2024-11-16T07:59:07Z,130443,https://github.com/rust-lang/rust/pull/130443,Fix ICE when passing DefId-creating args to legacy_const_generics.,2024/9/16 18:23,2024/11/16 7:59,235,233,"['Cargo.lock', 'Cargo.toml', 'messages.ftl', 'errors.rs', 'expr.rs', '123077-2.rs', '129150.rs', 'invalid-rustc_legacy_const_generics-issue-123077.rs', 'invalid-rustc_legacy_const_generics-issue-123077.stderr']","['', 'compiler/rustc_ast_lowering', 'compiler/rustc_ast_lowering', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'tests/crashes', 'tests/crashes', 'tests/ui/invalid', 'tests/ui/invalid']",,0,"use std::arch::x86_64::{__m128, _mm_blend_ps};
 
 pub fn sse41_blend_noinline( ) -> __m128 {
 let f = { |x, y| unsafe {
 _mm_blend_ps(x, y, { |x, y| unsafe })
 }};
 f(x, y)
 }
 
 pub fn main() {}","use std::arch::x86_64::{__m128, _mm_blend_ps};
 
 pub fn sse41_blend_noinline( ) -> __m128 {
 let f = { |x, y| unsafe {
 _mm_blend_ps(x, y, { |x, y| unsafe })
 }};
 f(x, y)
 }",,,,1,,,,,
122549,"{'I-ICE', 'E-needs-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/122549,Not reproducible anymore,icemaker,1. Crash-Front-end Panic,invalid,,,,ICE: `unexpected inference var`,2024-03-15T14:25:56Z,2024-03-22T04:04:16Z,,,,,,6,,,,,0,,"trait ConstChunksExactTrait<T> {
    fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'a, T, { N }>;
}

impl<T> ConstChunksExactTrait<T> for [T] {}

struct ConstChunksExact<'rem, T: 'a, const N: usize> {}

impl<'a, T, const N: usize> Iterator for ConstChunksExact<'a, T, {}> {
    type Item = &'a [T; N];
}

fn main() {
    let slice = &[1i32, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    let mut iter = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].iter();

    for a in slice.const_chunks_exact::<3>() {
        assert_eq!(a, iter.next().unwrap());
    }
}",,,,,,,,,
122395,"{'T-compiler', 'const-generics-bad-diagnostics', 'F-generic_const_exprs', 'A-const-generics', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/122395,valid,developer,4. Diagnostic Issues-Improper Fix Suggestion,,2. HIR-trait solving,5. Exception Handling & Report,1,Wrong suggestion for const well-formedness of bool,2024-03-12T17:28:07Z,2024-03-25T11:59:17Z,122802,,,,,12,462,"['type_err_ctxt_ext.rs', 'const-argument-if-length.full.stderr', 'generic-expr-default.stderr', 'ensure_is_evaluatable.stderr', 'fn_with_two_const_inputs.stderr', 'abstract-const-as-cast-2.fixed', 'abstract-const-as-cast-2.rs', 'abstract-const-as-cast-2.stderr', 'abstract-const-as-cast-3.stderr', 'abstract-consts-as-cast-5.stderr', 'array-size-in-generic-struct-param.full.stderr', 'doesnt_unify_evaluatable.stderr', 'issue_114151.stderr', 'relate_binop_arg_tys.stderr', 'relate_cast_arg_ty.stderr', 'wf_obligation.stderr', 'cross_crate_predicate.stderr', 'dependence_lint.gce.stderr', 'different-fn.stderr', 'issue-62504.full.stderr', 'issue-83765.stderr', 'issue-85848.stderr', 'needs_where_clause.stderr', 'no_where_clause.stderr', 'unify-op-with-fn-call.stderr', 'issue-67739.full.stderr', 'issue-71202.stderr', 'issue-84659.fixed', 'issue-84659.rs', 'issue-84659.stderr', 'issue-90455.fixed', 'issue-90455.rs', 'issue-90455.stderr', 'const-needs_drop-monomorphic.stderr', 'evaluatable-bounds.fixed', 'evaluatable-bounds.rs', 'evaluatable-bounds.stderr', 'evaluatable-bounds.unconstrained.stderr', 'array-trait.stderr', 'issue-51892.stderr', 'variance-associated-consts.stderr']","['compiler/rustc_trait_selection/src/traits/error_reporting', 'tests/ui/const-generics', 'tests/ui/const-generics/defaults', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs/assoc_const_unification', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/consts', 'tests/ui/generic-const-items', 'tests/ui/generic-const-items', 'tests/ui/generic-const-items', 'tests/ui/generic-const-items', 'tests/ui/simd', 'tests/ui/specialization', 'tests/ui/variance']",,0,"#![feature(generic_const_exprs)]
 
 fn bb<const N: bool>() {}
 
 fn b<const N: bool>() {
 bb::<{!N}>();
 }
 
 fn main() {}","#![feature(generic_const_exprs)]
 
 fn bb<const N: bool>() {}
 
 fn b<const N: bool>() {
 bb::<{!N}>();
 }
 
 fn main() {}",,,,,,,,,#![feature(generic_const_exprs)]
117986,"{'A-coherence', 'requires-nightly', 'T-compiler', 'F-negative_impls', 'C-bug'}",https://github.com/rust-lang/rust/issues/117986,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,5. Exception Handling & Report,1,`with_negative_coherence` fails to prevent `coherence_leak_check` overlap error,2023-11-16T21:16:20Z,2023-11-20T13:25:37Z,117994,https://github.com/rust-lang/rust/pull/117994,Ignore but do not assume region obligations from unifying headers in negative coherence,2023/11/16 22:56,2023/11/20 13:25,3,61,"['coherence.rs', 'negative-coherence-placeholder-region-constraints-on-unification.explicit.stderr', 'negative-coherence-placeholder-region-constraints-on-unification.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/ui/coherence', 'tests/ui/coherence']",,0,"#![forbid(coherence_leak_check)]
 #![feature(negative_impls, with_negative_coherence)]
 
 pub trait Marker {}
 
 impl<'a, T: ?Sized> !Marker for &'a T {}
 
 trait FnMarker {}
 
 impl<T: ?Sized + Marker> FnMarker for fn(T) {}
 impl<T: ?Sized> FnMarker for fn(&T) {}","#![forbid(coherence_leak_check)]
 #![feature(negative_impls, with_negative_coherence)]
 
 pub trait Marker {}
 
 impl<'a, T: ?Sized> !Marker for &'a T {}
 
 trait FnMarker {}
 
 impl<T: ?Sized + Marker> FnMarker for fn(T) {}
 impl<T: ?Sized> FnMarker for fn(&T) {}",,,,,1,,,,"#![feature(negative_impls, with_negative_coherence)]"
117140,"{'A-higher-ranked', 'T-compiler', 'A-lifetimes', 'C-bug'}",https://github.com/rust-lang/rust/issues/117140,Not reproducible anymore,,,,,,,higher-ranked lifetime error,2023-10-24T20:24:13Z,2025-02-21T16:01:37Z,,,,,,485,,,,,0,,,,,,,,,,,
114464,"{'I-ICE', 'requires-incomplete-features', 'requires-nightly', 'E-needs-test', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/114464,Not reproducible anymore,,,,,,,ICE caused by using feature(generic_const_exprs):`compiler/rustc_borrowck/src/universal_regions.rs:880:36`,2023-08-04T13:39:43Z,2024-03-25T18:19:00Z,,,,,,234,28,"['convert-refree-region-vid-ice-114464.rs', 'convert-refree-region-vid-ice-114464.stderr']","['tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs']",,0,,,,,,,,,,,
114061,"{'A-associated-items', 'T-types', 'I-unsound', 'A-coherence', 'P-high', 'C-bug'}",https://github.com/rust-lang/rust/issues/114061,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,4,coherence incorrectly considers `unnormalizable_projection: Trait` to not hold even if it could,2023-07-25T15:19:58Z,2024-05-01T01:26:58Z,117164,,,,,280,,,,P-high,1,"// crate dep
 trait IsUnit {}
 impl IsUnit for () {}
 
 
 pub trait WithAssoc<'a> {
 type Assoc;
 }
 
 // The two impls of `Trait` overlap
 pub trait Trait {}
 impl<T> Trait for T
 where
 T: 'static,
 for<'a> T: WithAssoc<'a>,
 for<'a> <T as WithAssoc<'a>>::Assoc: IsUnit,
 {
 }
 impl<T> Trait for Box<T> {}
 // root crate
 use dep::*;
 
 struct Local;
 impl WithAssoc<'_> for Box<Local> {
 type Assoc = ();
 }
 
 fn impls_trait<T: Trait>() {}
 
 fn main() {
 impls_trait::<Box<Local>>();
 }","// crate dep
 trait IsUnit {}
 impl IsUnit for () {}
 
 
 pub trait WithAssoc<'a> {
 type Assoc;
 }
 
 // The two impls of `Trait` overlap
 pub trait Trait {}
 impl<T> Trait for T
 where
 T: 'static,
 for<'a> T: WithAssoc<'a>,
 for<'a> <T as WithAssoc<'a>>::Assoc: IsUnit,
 {
 }
 impl<T> Trait for Box<T> {}
 // root crate
 use dep::*;
 
 struct Local;
 impl WithAssoc<'_> for Box<Local> {
 type Assoc = ();
 }
 
 fn impls_trait<T: Trait>() {}
 
 fn main() {
 impls_trait::<Box<Local>>();
 }",,,,,1,,,,
113327,"{'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/113327,question,,,,,,,v0 symbol mangling creates a `Const` with a different type to existing `Const`,2023-07-04T14:10:37Z,2024-06-27T11:48:32Z,,,,,,358,,,,,0,,,,,,,,,,,
113257,"{'A-raw-pointers', 'T-compiler', 'C-bug', 'A-coercions'}",https://github.com/rust-lang/rust/issues/113257,duplicate,,,,,,,"Raw pointer cast triggers ""lifetime may not live long enough""",2023-07-02T08:41:14Z,2023-10-26T14:49:20Z,113262,https://github.com/rust-lang/rust/pull/113262,Never consider raw pointer casts to be trival,2023/7/2 15:52,2023/10/26 14:49,116,114,"['cast.rs', 'expr.rs', 'casts.redundant.InstSimplify.diff', 'casts.roundtrip.InstSimplify.diff', 'casts.rs', 'ptr-to-ptr-different-regions.rs']","['compiler/rustc_hir_typeck/src', 'compiler/rustc_mir_build/src/thir/cx', 'tests/mir-opt/instsimplify', 'tests/mir-opt/instsimplify', 'tests/mir-opt/instsimplify', 'tests/ui/cast']",,0,,,,,,,,,,,
113075,"{'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/113075,question,,,,,,,Implement ConstParamTy for Option<T> where T: ConstParamTy,2023-06-26T22:30:14Z,2023-06-30T10:04:20Z,,,,,,3,,,,,0,,,,,,,,,,,
112602,"{'I-cycle', 'A-impl-trait', 'E-needs-test', 'T-compiler', 'A-const-eval', 'C-bug'}",https://github.com/rust-lang/rust/issues/112602,Not reproducible anymore,developer,2. Correctness Issues-Completeness Issues,,,,,"Cycle detected when computing type, but only when function is const",2023-06-14T00:43:30Z,2025-01-20T18:15:11Z,,,,,,586,,,,,0,,"pub struct Parser<H>(H);

impl<H, T> Parser<H>
where
    H: for<'a> Fn(&'a str) -> T,
{
    pub const fn new(handler: H) -> Parser<H> {
        Parser(handler)
    }

    pub const fn many<'s>(
        &'s self,
    ) -> Parser<impl for<'a> Fn(&'a str) -> Vec<T> + 's> {
        Parser::new(|_| unimplemented!())
    }
}

fn main() {
    println!(""Hello, world!"");
}",,,,,,,,,
112560,"{'T-lang', 'F-associated_const_equality', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/112560,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,5. Exception Handling & Report,2,Associated const equality conflicts with associated type equality,2023-06-12T15:26:15Z,2023-12-08T11:26:42Z,118668,,,,,178,,,,,0,"#![feature(associated_const_equality)]
 
 trait Trait2 {}
 
 trait Trait1 {
 const A: u32;
 type A;
 }
 
 impl<T: Trait1<A = 12>, const N: usize> Trait2 for [T; N] {}
 
 fn main() {}","#![feature(associated_const_equality)]
 
 trait Trait2 {}
 
 trait Trait1 {
 const A: u32;
 type A;
 }
 
 impl<T: Trait1<A = 12>, const N: usize> Trait2 for [T; N] {}
 
 fn main() {}",,,,,,,,,#![feature(associated_const_equality)]
112221,"{'T-types', 'A-patterns', 'T-compiler', 'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/112221,exclude,,,,,,,ConstParamTy should be split into two traits,2023-06-02T18:03:57Z,2024-07-02T16:15:42Z,,,,,,395,,,,,0,,,,,,,,,,,
112219,"{'T-types', 'A-const-generics', 'T-compiler', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/112219,exclude,,,,,,,sizedness of const parameter types,2023-06-02T17:51:57Z,2024-07-21T07:59:29Z,127722,https://github.com/rust-lang/rust/pull/127722,Forbid borrows and unsized types from being used as the type of a const generic under `adt_const_params`,2024/7/14 15:22,2024/7/21 7:59,414,1785,"['bounds.rs', 'lib.rs', 'E0771.md', 'unstable.rs', 'lang_items.rs', 'messages.ftl', 'wfcheck.rs', 'builtin.rs', 'errors.rs', 'symbol.rs', 'misc.rs', 'lib.rs', 'marker.rs', 'transmutability.rs', 'tuple.rs', '119299.rs', 'invalid_constant.rs', 'issue_99325.rs', 'const-impl.rs', 'regions-in-canonical.rs', 'regions-in-canonical.stderr', 'alias_const_param_ty-1.rs', 'alias_const_param_ty-1.stderr', 'alias_const_param_ty-2.rs', 'alias_const_param_ty-2.stderr', 'unsized_const_param.rs', 'const_param_ty_bad.rs', 'const_param_ty_bad.stderr', 'const_param_ty_bad_empty_array.rs', 'const_param_ty_bad_empty_array.stderr', 'const_param_ty_generic_bounds_do_not_hold.rs', 'const_param_ty_generic_bounds_do_not_hold.stderr', 'const_param_ty_good.rs', 'const_param_ty_impl_bad_field.rs', 'const_param_ty_impl_bad_field.stderr', 'const_param_ty_impl_no_structural_eq.rs', 'const_param_ty_impl_no_structural_eq.stderr', 'const_param_ty_impl_union.rs', 'const_param_ty_impl_union.stderr', 'const_param_ty_object_safety.rs', 'const_param_ty_object_safety.stderr', 'index-oob-ice-83993.rs', 'index-oob-ice-83993.stderr', 'nested_bad_const_param_ty.rs', 'nested_bad_const_param_ty.stderr', 'opaque_type_with_non-universal_region_substs_ice-111911.rs', 'reference_pointee_is_const_param-1.rs', 'reference_pointee_is_const_param-1.stderr', 'reference_pointee_is_const_param-2.rs', 'reference_pointee_is_const_param-2.stderr', 'suggest_feature_only_when_possible.rs', 'suggest_feature_only_when_possible.stderr', 'trait_objects_as_a_const_generic.rs', 'trait_objects_as_a_const_generic.stderr', 'unsized_field-1.rs', 'unsized_field-1.stderr', 'unsized_field-2.rs', 'unsized_field-2.stderr', 'const-param-elided-lifetime.min.stderr', 'const-param-elided-lifetime.rs', 'const-param-with-additional-obligations.rs', 'float-generic.adt_const_params.stderr', 'float-generic.full.stderr', 'float-generic.rs', 'float-generic.simple.stderr', 'fn-const-param-call.adt_const_params.stderr', 'fn-const-param-call.full.stderr', 'fn-const-param-call.min.stderr', 'fn-const-param-call.rs', 'fn-const-param-infer.adt_const_params.stderr', 'fn-const-param-infer.full.stderr', 'fn-const-param-infer.min.stderr', 'fn-const-param-infer.rs', 'issue-100360.rs', 'issue-89851.rs', 'issue-97047-ice-1.rs', 'issue-97047-ice-1.stderr', 'issue-97047-ice-2.rs', 'issue-97047-ice-2.stderr', 'intrinsics-type_name-as-const-argument.min.stderr', 'intrinsics-type_name-as-const-argument.rs', 'issue-66451.rs', 'issue-66451.stderr', 'issue-70408.rs', 'issue-80471.rs', 'issue-80471.stderr', 'issue-100313.rs', 'issue-105821.rs', 'issue-56445-1.min.stderr', 'issue-56445-1.rs', 'issue-63322-forbid-dyn.full.stderr', 'issue-63322-forbid-dyn.min.stderr', 'issue-63322-forbid-dyn.rs', 'issue-66596-impl-trait-for-str-const-arg.rs', 'issue-71547.rs', 'issue-73727-static-reference-array-const-param.min.stderr', 'issue-73727-static-reference-array-const-param.rs', 'issue-86535-2.rs', 'issue-86535.rs', 'issue-90455.fixed', 'issue-90455.rs', 'issue-99641.stderr', 'complex-types.stderr', 'raw-ptr-const-param-deref.adt_const_params.stderr', 'raw-ptr-const-param-deref.full.stderr', 'raw-ptr-const-param-deref.min.stderr', 'raw-ptr-const-param-deref.rs', 'raw-ptr-const-param.adt_const_params.stderr', 'raw-ptr-const-param.full.stderr', 'raw-ptr-const-param.min.stderr', 'raw-ptr-const-param.rs', 'slice-const-param-mismatch.adt_const_params.stderr', 'slice-const-param-mismatch.full.stderr', 'slice-const-param-mismatch.min.stderr', 'slice-const-param-mismatch.rs', 'slice-const-param.rs', 'transmute-const-param-static-reference.adt_const_params.stderr', 'transmute-const-param-static-reference.min.stderr', 'transmute-const-param-static-reference.rs', 'issue-71348.min.stderr', 'issue-71348.rs', 'refs_check_const_eq-issue-88384.rs', 'refs_check_const_eq-issue-88384.stderr', 'refs_check_const_value_eq-issue-88876.rs', 'E0771.rs', 'E0771.stderr', 'feature-gate-adt_const_params.stderr', 'feature-gate-unsized-const-params.rs', 'feature-gate-unsized-const-params.stderr', 'elided-lifetimes.stderr', 'defining-use-uncaptured-non-universal-region-3.rs', 'static-lifetime-return-position-impl-trait.rs', 'ice-cannot-relate-region-109178.rs', 'unusual-rib-combinations.stderr', 'generic-elements.rs', 'generic-elements.stderr', 'monomorphize-shuffle-index.rs', 'const_generics.rs', 'const-generics-str-demangling.rs', 'const-generics-structural-demangling.rs', 'ice-unexpected-region-123863.stderr']","['compiler/rustc_builtin_macros/src/deriving', 'compiler/rustc_builtin_macros/src', 'compiler/rustc_error_codes/src/error_codes', 'compiler/rustc_feature/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_span/src', 'compiler/rustc_trait_selection/src/traits', 'library/core/src', 'library/core/src', 'library/core/src/mem', 'library/core/src', 'tests/crashes', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/rustdoc/const-generics', 'tests/ui/coherence/negative-coherence', 'tests/ui/coherence/negative-coherence', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params/auxiliary', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/min_const_generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/type-dependent', 'tests/ui/const-generics/type-dependent', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/generic-const-items', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/inference', 'tests/ui/lifetimes', 'tests/ui/simd/intrinsic', 'tests/ui/simd/intrinsic', 'tests/ui/simd', 'tests/ui/statics', 'tests/ui/symbol-names', 'tests/ui/symbol-names', 'tests/ui/typeck']",,0,,,,,,,,,,,
112125,"{'T-types', 'A-const-generics', 'F-adt_const_params', 'C-bug'}",https://github.com/rust-lang/rust/issues/112125,exclude,,,,,,,`adt_const_params` does not explicitly check for a union `ConstParamTy` impl,2023-05-31T02:44:47Z,2024-07-21T07:59:30Z,127722,https://github.com/rust-lang/rust/pull/127722,Forbid borrows and unsized types from being used as the type of a const generic under `adt_const_params`,2024/7/14 15:22,2024/7/21 7:59,417,1785,"['bounds.rs', 'lib.rs', 'E0771.md', 'unstable.rs', 'lang_items.rs', 'messages.ftl', 'wfcheck.rs', 'builtin.rs', 'errors.rs', 'symbol.rs', 'misc.rs', 'lib.rs', 'marker.rs', 'transmutability.rs', 'tuple.rs', '119299.rs', 'invalid_constant.rs', 'issue_99325.rs', 'const-impl.rs', 'regions-in-canonical.rs', 'regions-in-canonical.stderr', 'alias_const_param_ty-1.rs', 'alias_const_param_ty-1.stderr', 'alias_const_param_ty-2.rs', 'alias_const_param_ty-2.stderr', 'unsized_const_param.rs', 'const_param_ty_bad.rs', 'const_param_ty_bad.stderr', 'const_param_ty_bad_empty_array.rs', 'const_param_ty_bad_empty_array.stderr', 'const_param_ty_generic_bounds_do_not_hold.rs', 'const_param_ty_generic_bounds_do_not_hold.stderr', 'const_param_ty_good.rs', 'const_param_ty_impl_bad_field.rs', 'const_param_ty_impl_bad_field.stderr', 'const_param_ty_impl_no_structural_eq.rs', 'const_param_ty_impl_no_structural_eq.stderr', 'const_param_ty_impl_union.rs', 'const_param_ty_impl_union.stderr', 'const_param_ty_object_safety.rs', 'const_param_ty_object_safety.stderr', 'index-oob-ice-83993.rs', 'index-oob-ice-83993.stderr', 'nested_bad_const_param_ty.rs', 'nested_bad_const_param_ty.stderr', 'opaque_type_with_non-universal_region_substs_ice-111911.rs', 'reference_pointee_is_const_param-1.rs', 'reference_pointee_is_const_param-1.stderr', 'reference_pointee_is_const_param-2.rs', 'reference_pointee_is_const_param-2.stderr', 'suggest_feature_only_when_possible.rs', 'suggest_feature_only_when_possible.stderr', 'trait_objects_as_a_const_generic.rs', 'trait_objects_as_a_const_generic.stderr', 'unsized_field-1.rs', 'unsized_field-1.stderr', 'unsized_field-2.rs', 'unsized_field-2.stderr', 'const-param-elided-lifetime.min.stderr', 'const-param-elided-lifetime.rs', 'const-param-with-additional-obligations.rs', 'float-generic.adt_const_params.stderr', 'float-generic.full.stderr', 'float-generic.rs', 'float-generic.simple.stderr', 'fn-const-param-call.adt_const_params.stderr', 'fn-const-param-call.full.stderr', 'fn-const-param-call.min.stderr', 'fn-const-param-call.rs', 'fn-const-param-infer.adt_const_params.stderr', 'fn-const-param-infer.full.stderr', 'fn-const-param-infer.min.stderr', 'fn-const-param-infer.rs', 'issue-100360.rs', 'issue-89851.rs', 'issue-97047-ice-1.rs', 'issue-97047-ice-1.stderr', 'issue-97047-ice-2.rs', 'issue-97047-ice-2.stderr', 'intrinsics-type_name-as-const-argument.min.stderr', 'intrinsics-type_name-as-const-argument.rs', 'issue-66451.rs', 'issue-66451.stderr', 'issue-70408.rs', 'issue-80471.rs', 'issue-80471.stderr', 'issue-100313.rs', 'issue-105821.rs', 'issue-56445-1.min.stderr', 'issue-56445-1.rs', 'issue-63322-forbid-dyn.full.stderr', 'issue-63322-forbid-dyn.min.stderr', 'issue-63322-forbid-dyn.rs', 'issue-66596-impl-trait-for-str-const-arg.rs', 'issue-71547.rs', 'issue-73727-static-reference-array-const-param.min.stderr', 'issue-73727-static-reference-array-const-param.rs', 'issue-86535-2.rs', 'issue-86535.rs', 'issue-90455.fixed', 'issue-90455.rs', 'issue-99641.stderr', 'complex-types.stderr', 'raw-ptr-const-param-deref.adt_const_params.stderr', 'raw-ptr-const-param-deref.full.stderr', 'raw-ptr-const-param-deref.min.stderr', 'raw-ptr-const-param-deref.rs', 'raw-ptr-const-param.adt_const_params.stderr', 'raw-ptr-const-param.full.stderr', 'raw-ptr-const-param.min.stderr', 'raw-ptr-const-param.rs', 'slice-const-param-mismatch.adt_const_params.stderr', 'slice-const-param-mismatch.full.stderr', 'slice-const-param-mismatch.min.stderr', 'slice-const-param-mismatch.rs', 'slice-const-param.rs', 'transmute-const-param-static-reference.adt_const_params.stderr', 'transmute-const-param-static-reference.min.stderr', 'transmute-const-param-static-reference.rs', 'issue-71348.min.stderr', 'issue-71348.rs', 'refs_check_const_eq-issue-88384.rs', 'refs_check_const_eq-issue-88384.stderr', 'refs_check_const_value_eq-issue-88876.rs', 'E0771.rs', 'E0771.stderr', 'feature-gate-adt_const_params.stderr', 'feature-gate-unsized-const-params.rs', 'feature-gate-unsized-const-params.stderr', 'elided-lifetimes.stderr', 'defining-use-uncaptured-non-universal-region-3.rs', 'static-lifetime-return-position-impl-trait.rs', 'ice-cannot-relate-region-109178.rs', 'unusual-rib-combinations.stderr', 'generic-elements.rs', 'generic-elements.stderr', 'monomorphize-shuffle-index.rs', 'const_generics.rs', 'const-generics-str-demangling.rs', 'const-generics-structural-demangling.rs', 'ice-unexpected-region-123863.stderr']","['compiler/rustc_builtin_macros/src/deriving', 'compiler/rustc_builtin_macros/src', 'compiler/rustc_error_codes/src/error_codes', 'compiler/rustc_feature/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_span/src', 'compiler/rustc_trait_selection/src/traits', 'library/core/src', 'library/core/src', 'library/core/src/mem', 'library/core/src', 'tests/crashes', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/rustdoc/const-generics', 'tests/ui/coherence/negative-coherence', 'tests/ui/coherence/negative-coherence', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params/auxiliary', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/min_const_generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/type-dependent', 'tests/ui/const-generics/type-dependent', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/generic-const-items', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/inference', 'tests/ui/lifetimes', 'tests/ui/simd/intrinsic', 'tests/ui/simd/intrinsic', 'tests/ui/simd', 'tests/ui/statics', 'tests/ui/symbol-names', 'tests/ui/symbol-names', 'tests/ui/typeck']",,0,,,,,,,,,,,
112124,"{'T-types', 'A-const-generics', 'F-adt_const_params', 'C-bug'}",https://github.com/rust-lang/rust/issues/112124,valid,members,2. Correctness Issues-Soundness Issues,,2. HIR-type & wf check,1. Type-WF,6,`adt_const_params` allows impls of `ConstParamTy` with non-ConstParamTy pointees ,2023-05-31T02:41:24Z,2024-07-21T07:59:30Z,127722,https://github.com/rust-lang/rust/pull/127722,Forbid borrows and unsized types from being used as the type of a const generic under `adt_const_params`,2024/7/14 15:22,2024/7/21 7:59,417,1785,"['bounds.rs', 'lib.rs', 'E0771.md', 'unstable.rs', 'lang_items.rs', 'messages.ftl', 'wfcheck.rs', 'builtin.rs', 'errors.rs', 'symbol.rs', 'misc.rs', 'lib.rs', 'marker.rs', 'transmutability.rs', 'tuple.rs', '119299.rs', 'invalid_constant.rs', 'issue_99325.rs', 'const-impl.rs', 'regions-in-canonical.rs', 'regions-in-canonical.stderr', 'alias_const_param_ty-1.rs', 'alias_const_param_ty-1.stderr', 'alias_const_param_ty-2.rs', 'alias_const_param_ty-2.stderr', 'unsized_const_param.rs', 'const_param_ty_bad.rs', 'const_param_ty_bad.stderr', 'const_param_ty_bad_empty_array.rs', 'const_param_ty_bad_empty_array.stderr', 'const_param_ty_generic_bounds_do_not_hold.rs', 'const_param_ty_generic_bounds_do_not_hold.stderr', 'const_param_ty_good.rs', 'const_param_ty_impl_bad_field.rs', 'const_param_ty_impl_bad_field.stderr', 'const_param_ty_impl_no_structural_eq.rs', 'const_param_ty_impl_no_structural_eq.stderr', 'const_param_ty_impl_union.rs', 'const_param_ty_impl_union.stderr', 'const_param_ty_object_safety.rs', 'const_param_ty_object_safety.stderr', 'index-oob-ice-83993.rs', 'index-oob-ice-83993.stderr', 'nested_bad_const_param_ty.rs', 'nested_bad_const_param_ty.stderr', 'opaque_type_with_non-universal_region_substs_ice-111911.rs', 'reference_pointee_is_const_param-1.rs', 'reference_pointee_is_const_param-1.stderr', 'reference_pointee_is_const_param-2.rs', 'reference_pointee_is_const_param-2.stderr', 'suggest_feature_only_when_possible.rs', 'suggest_feature_only_when_possible.stderr', 'trait_objects_as_a_const_generic.rs', 'trait_objects_as_a_const_generic.stderr', 'unsized_field-1.rs', 'unsized_field-1.stderr', 'unsized_field-2.rs', 'unsized_field-2.stderr', 'const-param-elided-lifetime.min.stderr', 'const-param-elided-lifetime.rs', 'const-param-with-additional-obligations.rs', 'float-generic.adt_const_params.stderr', 'float-generic.full.stderr', 'float-generic.rs', 'float-generic.simple.stderr', 'fn-const-param-call.adt_const_params.stderr', 'fn-const-param-call.full.stderr', 'fn-const-param-call.min.stderr', 'fn-const-param-call.rs', 'fn-const-param-infer.adt_const_params.stderr', 'fn-const-param-infer.full.stderr', 'fn-const-param-infer.min.stderr', 'fn-const-param-infer.rs', 'issue-100360.rs', 'issue-89851.rs', 'issue-97047-ice-1.rs', 'issue-97047-ice-1.stderr', 'issue-97047-ice-2.rs', 'issue-97047-ice-2.stderr', 'intrinsics-type_name-as-const-argument.min.stderr', 'intrinsics-type_name-as-const-argument.rs', 'issue-66451.rs', 'issue-66451.stderr', 'issue-70408.rs', 'issue-80471.rs', 'issue-80471.stderr', 'issue-100313.rs', 'issue-105821.rs', 'issue-56445-1.min.stderr', 'issue-56445-1.rs', 'issue-63322-forbid-dyn.full.stderr', 'issue-63322-forbid-dyn.min.stderr', 'issue-63322-forbid-dyn.rs', 'issue-66596-impl-trait-for-str-const-arg.rs', 'issue-71547.rs', 'issue-73727-static-reference-array-const-param.min.stderr', 'issue-73727-static-reference-array-const-param.rs', 'issue-86535-2.rs', 'issue-86535.rs', 'issue-90455.fixed', 'issue-90455.rs', 'issue-99641.stderr', 'complex-types.stderr', 'raw-ptr-const-param-deref.adt_const_params.stderr', 'raw-ptr-const-param-deref.full.stderr', 'raw-ptr-const-param-deref.min.stderr', 'raw-ptr-const-param-deref.rs', 'raw-ptr-const-param.adt_const_params.stderr', 'raw-ptr-const-param.full.stderr', 'raw-ptr-const-param.min.stderr', 'raw-ptr-const-param.rs', 'slice-const-param-mismatch.adt_const_params.stderr', 'slice-const-param-mismatch.full.stderr', 'slice-const-param-mismatch.min.stderr', 'slice-const-param-mismatch.rs', 'slice-const-param.rs', 'transmute-const-param-static-reference.adt_const_params.stderr', 'transmute-const-param-static-reference.min.stderr', 'transmute-const-param-static-reference.rs', 'issue-71348.min.stderr', 'issue-71348.rs', 'refs_check_const_eq-issue-88384.rs', 'refs_check_const_eq-issue-88384.stderr', 'refs_check_const_value_eq-issue-88876.rs', 'E0771.rs', 'E0771.stderr', 'feature-gate-adt_const_params.stderr', 'feature-gate-unsized-const-params.rs', 'feature-gate-unsized-const-params.stderr', 'elided-lifetimes.stderr', 'defining-use-uncaptured-non-universal-region-3.rs', 'static-lifetime-return-position-impl-trait.rs', 'ice-cannot-relate-region-109178.rs', 'unusual-rib-combinations.stderr', 'generic-elements.rs', 'generic-elements.stderr', 'monomorphize-shuffle-index.rs', 'const_generics.rs', 'const-generics-str-demangling.rs', 'const-generics-structural-demangling.rs', 'ice-unexpected-region-123863.stderr']","['compiler/rustc_builtin_macros/src/deriving', 'compiler/rustc_builtin_macros/src', 'compiler/rustc_error_codes/src/error_codes', 'compiler/rustc_feature/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/coherence', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_span/src', 'compiler/rustc_trait_selection/src/traits', 'library/core/src', 'library/core/src', 'library/core/src/mem', 'library/core/src', 'tests/crashes', 'tests/mir-opt/const_prop', 'tests/mir-opt', 'tests/rustdoc/const-generics', 'tests/ui/coherence/negative-coherence', 'tests/ui/coherence/negative-coherence', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params/auxiliary', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/min_const_generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics/type-dependent', 'tests/ui/const-generics/type-dependent', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/error-codes', 'tests/ui/error-codes', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/generic-const-items', 'tests/ui/impl-trait', 'tests/ui/impl-trait', 'tests/ui/inference', 'tests/ui/lifetimes', 'tests/ui/simd/intrinsic', 'tests/ui/simd/intrinsic', 'tests/ui/simd', 'tests/ui/statics', 'tests/ui/symbol-names', 'tests/ui/symbol-names', 'tests/ui/typeck']",,0,"#![feature(adt_const_params)]
 
 use core::marker::ConstParamTy;
 
 struct Foo;
 
 impl ConstParamTy for &'static Foo {}","#![feature(adt_const_params)]
 
 use core::marker::ConstParamTy;
 
 struct Foo;
 
 impl ConstParamTy for &'static Foo {}",1,,,,1,,,,#![feature(adt_const_params)]
112110,"{'A-const-generics', 'T-compiler', 'F-generic_arg_infer'}",https://github.com/rust-lang/rust/issues/112110,exclude,,,,,,,`generic_arg_infer` impl is prone to bugs in hir visitors,2023-05-30T18:32:02Z,2025-01-24T14:30:19Z,135272,https://github.com/rust-lang/rust/pull/135272,Forbid usage of `hir` `Infer` const/ty variants in ambiguous contexts ,2025/1/8 23:05,2025/1/24 14:30,604,1721,"['ast.rs', 'index.rs', 'lib.rs', 'path.rs', 'region_errors.rs', 'region_name.rs', 'hir.rs', 'tests.rs', 'intravisit.rs', 'lib.rs', 'compare_impl_item.rs', 'wfcheck.rs', 'collect.rs', 'generics_of.rs', 'resolve_bound_vars.rs', 'type_of.rs', 'generics.rs', 'lint.rs', 'mod.rs', 'hir_wf_check.rs', 'lib.rs', 'fallback.rs', '_impl.rs', 'lib.rs', 'confirm.rs', 'writeback.rs', 'internal.rs', 'late.rs', 'lints.rs', 'non_local_def.rs', 'opaque_hidden_inferred_bound.rs', 'pass_by_value.rs', 'passes.rs', 'traits.rs', 'types.rs', 'context.rs', 'diagnostics.rs', 'values.rs', 'check_attr.rs', 'dead.rs', 'input_stats.rs', 'stability.rs', 'lib.rs', 'find_anon_type.rs', 'mismatched_static_lifetime.rs', 'static_impl_trait.rs', 'trait_impl_difference.rs', 'suggest.rs', 'fulfillment_errors.rs', 'mod.rs', 'suggestions.rs', 'errors.rs', 'assoc.rs', 'mod.rs', 'visit_ast.rs', 'box_default.rs', 'as_pointer_underscore.rs', 'as_underscore.rs', 'cast_lossless.rs', 'cast_ptr_alignment.rs', 'ptr_as_ptr.rs', 'ref_as_ptr.rs', 'unnecessary_cast.rs', 'zero_ptr.rs', 'dereference.rs', 'disallowed_macros.rs', 'disallowed_types.rs', 'eta_reduction.rs', 'extra_unused_type_parameters.rs', 'from_over_into.rs', 'implicit_hasher.rs', 'implied_bounds_in_impls.rs', 'let_with_type_underscore.rs', 'lifetimes.rs', 'macro_use.rs', 'manual_bits.rs', 'manual_rem_euclid.rs', 'unnecessary_lazy_eval.rs', 'unnecessary_literal_unwrap.rs', 'unused_enumerate_index.rs', 'mut_mut.rs', 'op_ref.rs', 'ref_option_ref.rs', 'trait_bounds.rs', 'missing_transmute_annotations.rs', 'borrowed_box.rs', 'mod.rs', 'type_complexity.rs', 'vec_box.rs', 'let_unit_value.rs', 'use_self.rs', 'zero_sized_map_values.rs', 'check_proc_macro.rs', 'hir_utils.rs', 'lib.rs', 'mod.rs', 'visitors.rs', 'forbid_ambig_const_infers.rs', 'forbid_ambig_const_infers.stderr', 'forbid_ambig_type_infers.rs', 'forbid_ambig_type_infers.stderr', 'forbid_const_infer.rs', 'forbid_const_infer.stderr', 'parend_infer.rs', 'issue-62878.min.stderr', 'issue-62878.rs', 'bad-assoc-ty.stderr', 'feature-gate-generic_arg_infer.normal.stderr', 'feature-gate-generic_arg_infer.rs', 'issue-79605.stderr', 'macro-span-issue-116502.stderr', 'issue-14303-fncall.full.stderr', 'issue-14303-fncall.generic_arg.stderr', 'issue-14303-fncall.rs', 'issue-42234-unknown-receiver-type.generic_arg.stderr', 'issue-77179.stderr', 'bad_const_generics_args_on_const_param.rs', 'bad_const_generics_args_on_const_param.stderr', 'typeck_type_placeholder_item.stderr']","['compiler/rustc_ast/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_ast_lowering/src', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_hir/src', 'compiler/rustc_hir/src/hir', 'compiler/rustc_hir/src', 'compiler/rustc_hir/src', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src/check', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/collect', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src/hir_ty_lowering', 'compiler/rustc_hir_analysis/src', 'compiler/rustc_hir_pretty/src', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/fn_ctxt', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_hir_typeck/src/method', 'compiler/rustc_hir_typeck/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_lint/src', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_passes/src', 'compiler/rustc_privacy/src', 'compiler/rustc_trait_selection/src/error_reporting/infer/nice_region_error', 'compiler/rustc_trait_selection/src/error_reporting/infer/nice_region_error', 'compiler/rustc_trait_selection/src/error_reporting/infer/nice_region_error', 'compiler/rustc_trait_selection/src/error_reporting/infer/nice_region_error', 'compiler/rustc_trait_selection/src/error_reporting/infer', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'compiler/rustc_trait_selection/src/error_reporting/traits', 'compiler/rustc_trait_selection/src', 'compiler/rustc_ty_utils/src', 'src/librustdoc/clean', 'src/librustdoc', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src/casts', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src/methods', 'src/tools/clippy/clippy_lints/src/methods', 'src/tools/clippy/clippy_lints/src/methods', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src/operators', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src/transmute', 'src/tools/clippy/clippy_lints/src/types', 'src/tools/clippy/clippy_lints/src/types', 'src/tools/clippy/clippy_lints/src/types', 'src/tools/clippy/clippy_lints/src/types', 'src/tools/clippy/clippy_lints/src/unit_types', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_lints/src', 'src/tools/clippy/clippy_utils/src', 'src/tools/clippy/clippy_utils/src', 'src/tools/clippy/clippy_utils/src', 'src/tools/clippy/clippy_utils/src/ty/type_certainty', 'src/tools/clippy/clippy_utils/src', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/closures/binder', 'tests/ui/const-generics/generic_arg_infer', 'tests/ui/const-generics/issues', 'tests/ui/const-generics/issues', 'tests/ui/did_you_mean', 'tests/ui/feature-gates', 'tests/ui/feature-gates', 'tests/ui/generics', 'tests/ui/macros', 'tests/ui/parser/issues', 'tests/ui/parser/issues', 'tests/ui/parser/issues', 'tests/ui/span', 'tests/ui/type-alias-impl-trait', 'tests/ui/type/pattern_types', 'tests/ui/type/pattern_types', 'tests/ui/typeck']",,0,,,,,,,,,,,
111941,"{'A-const-generics', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/111941,valid,members,4. Diagnostic Issues-Improper Fix Suggestion,,1. AST,5. Exception Handling & Report,1,missing recover for typo'd `const` in const parameter definition,2023-05-25T10:46:53Z,2023-05-29T05:53:24Z,112029,https://github.com/rust-lang/rust/pull/112029,Recover upon mistyped error on typo'd `const` in const param def,2023/5/28 6:31,2023/5/29 5:53,3,106,"['generics.rs', 'typod-const-in-const-param-def.rs', 'typod-const-in-const-param-def.stderr']","['compiler/rustc_parse/src/parser', 'tests/ui/parser', 'tests/ui/parser']",,0,pub fn bar<Const N: u8>() {},pub fn bar<Const N: u8>() {},,,,,,,,,
111911,"{'I-ICE', 'glacier', 'T-types', 'E-needs-test', 'T-compiler', 'C-bug', 'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/111911,exclude,,,,,,,const generic ty's with lifetimes cause opaque types to ICE,2023-05-24T14:56:21Z,2024-04-28T13:04:15Z,,,,,,339,29,"['opaque_type_with_non-universal_region_substs_ice-111911.rs', 'opaque_type_with_non-universal_region_substs_ice-111911.stderr']","['tests/ui/const-generics/adt_const_params', 'tests/ui/const-generics/adt_const_params']",,0,,,,,,,,,,,
111521,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics', 'WG-compiler-parallel'}",https://github.com/rust-lang/rust/issues/111521,Not reproducible anymore,,,,,,,ICE: parallel compiler: `deadlock detected`,2023-05-13T00:15:34Z,2023-12-11T16:21:12Z,,,,,,212,,,,,0,,,,,,,,,,,
111434,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/111434,exclude,,,,,,,borrowck doesnt convert lifetime params to vars in generic_const_exprs,2023-05-10T16:26:36Z,2023-05-10T17:42:11Z,,,,,,0,,,,,1,,,,,,,,,,,
111433,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/111433,duplicate,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
110892,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/110892,valid,icemaker,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,2,"ICE: `expected ConstKind::Value, got Unevaluated(UnevaluatedConst...`",2023-04-27T10:33:26Z,2023-07-18T10:54:39Z,113677,,,,,82,97,"['consts.rs', 'lib.rs', 'issue-110892.rs', 'issue-110892.stderr']","['compiler/rustc_middle/src/ty', 'compiler/rustc_transmute/src', 'tests/ui/transmutability', 'tests/ui/transmutability']",,0,"#![feature(generic_const_exprs)]
 
 mod assert {
 use std::mem::{Assume, BikeshedIntrinsicFrom};
 
 pub fn is_transmutable<
 Src,
 Dst,
 Context,
 const ASSUME_ALIGNMENT: bool,
 const ASSUME_LIFETIMES: bool,
 const ASSUME_SAFETY: bool,
 const ASSUME_VALIDITY: bool,
 >()
 where
 Dst: BikeshedIntrinsicFrom<
 Src,
 Context,
 { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }
 >,
 {}
 
 const fn from_options(
 ,
 ,
 ,
 ,
 ) -> Assume {}
 }
 
 fn test() {
 struct Context;
 #[repr(C)] struct Src;
 #[repr(C)] struct Dst;
 
 false(); 
 assert::is_transmutable::<Src, Dst, Context, false, false, { true }, false>(); 
 
 }","#![feature(generic_const_exprs)]
 
 mod assert {
 use std::mem::{Assume, BikeshedIntrinsicFrom};
 
 pub fn is_transmutable<
 Src,
 Dst,
 Context,
 const ASSUME_ALIGNMENT: bool,
 const ASSUME_LIFETIMES: bool,
 const ASSUME_SAFETY: bool,
 const ASSUME_VALIDITY: bool,
 >()
 where
 Dst: BikeshedIntrinsicFrom<
 Src,
 Context,
 { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }
 >,
 {}
 
 const fn from_options(
 ,
 ,
 ,
 ,
 ) -> Assume {}
 }
 
 fn test() {
 struct Context;
 #[repr(C)] struct Src;
 #[repr(C)] struct Dst;
 
 false(); 
 assert::is_transmutable::<Src, Dst, Context, false, false, { true }, false>(); 
 
 }",,,,1,,,,,#![feature(generic_const_exprs)]
110887,"{'I-ICE', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/110887,valid,icemaker,1. Crash-Front-end Panic,invalid,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,2,ICE: `Trying to feed an already recorded value for query type_of key`,2023-04-27T08:03:11Z,2023-05-18T15:49:15Z,110986,https://github.com/rust-lang/rust/pull/110986,Delay a bug when overwriting fed value.,2023/4/29 11:04,2023/5/18 15:49,21,61,"['plumbing.rs', 'plumbing.rs', 'const-generic-type-cycle.rs']","['compiler/rustc_middle/src/query', 'compiler/rustc_query_system/src/query', 'tests/incremental']",,0,"#![crate_type=""lib""]
 trait Bar<const N: BB> {}
 trait BB = Bar<{ 2 + 1 }>;","#![crate_type=""lib""]
 trait Bar<const N: BB> {}
 trait BB = Bar<{ 2 + 1 }>;",,,,,,,,,
109296,"{'I-ICE', 'P-medium', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/109296,valid,icemaker,1. Crash-Front-end Panic,invalid,2. HIR-Type Infer,4. Basic syntax&structure,2,ICE: `const variables should not be hashed` / `cannot relate consts of different types`,2023-03-18T08:30:49Z,2023-03-21T23:41:15Z,109336,https://github.com/rust-lang/rust/pull/109336,Constrain const vars to error if const types are mismatched,2023/3/19 2:38,2023/3/21 23:41,3,64,"['combine.rs', 'mod.rs', 'bad-subst-const-kind.rs', 'bad-subst-const-kind.stderr', 'bad-const-wf-doesnt-specialize.rs', 'bad-const-wf-doesnt-specialize.stderr']","['compiler/rustc_infer/src/infer', 'compiler/rustc_trait_selection/src/traits/specialize', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/specialization/min_specialization', 'tests/ui/specialization/min_specialization']",P-medium,0,"#![crate_type = ""lib""]
 
 trait Q {
 const ASSOC: usize;
 }
 
 impl<const N: u64> Q for [u8; N] {}
 
 pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {}","#![crate_type = ""lib""]
 
 trait Q {
 const ASSOC: usize;
 }
 
 impl<const N: u64> Q for [u8; N] {}
 
 pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {}",,,,,,,,,
108952,"{'I-ICE', 'glacier', 'E-needs-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/108952,valid,developer,1. Crash-Front-end Panic,invalid,1. AST,5. Exception Handling & Report,1,ICE in adt_const_params: panicked at 'const parameter types cannot be generic',2023-03-09T20:53:00Z,2023-11-11T08:39:54Z,114606,,,,,246,,,,,0,"#![allow(incomplete_features)]
 #![feature(adt_const_params)]
 
 struct LifetimeGeneric<'a>(&'a ());
 
 struct UwU<'b, const T: LifetimeGeneric>(&'b ());","#![allow(incomplete_features)]
 #![feature(adt_const_params)]
 
 struct LifetimeGeneric<'a>(&'a ());
 
 struct UwU<'b, const T: LifetimeGeneric>(&'b ());",,,,,1,,,,#![feature(adt_const_params)]
108329,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/108329,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,4. Basic syntax&structure,1,nightly rustc crash with `generic_const_exprs`,2023-02-22T00:29:50Z,2023-03-04T11:51:15Z,108667,,,,,10,,,,,0,"pub fn take (&mut self) -> Vec<T> {
 let mut buf = Vec::with_capacity(self.buffer.len());
 buf.copy_from_slice(self.buffer[..]);
 self.index = S - 1;
 buf
 }","pub fn take (&mut self) -> Vec<T> {
 let mut buf = Vec::with_capacity(self.buffer.len());
 buf.copy_from_slice(self.buffer[..]);
 self.index = S - 1;
 buf
 }",,,,,,,,,
108271,"{'I-ICE', 'glacier', 'P-medium', 'F-associated_const_equality', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/108271,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,2,`feature(associated_const_equality)` allows const arguments to generic const parameters,2023-02-20T15:31:05Z,2024-03-18T23:27:34Z,121258,https://github.com/rust-lang/rust/pull/121258,Reject overly generic assoc const binding types,2024/2/18 10:02,2024/3/18 23:27,392,474,"['messages.ftl', 'bounds.rs', 'errors.rs', 'assoc-const-eq-bound-var-in-ty-not-wf.rs', 'assoc-const-eq-bound-var-in-ty-not-wf.stderr', 'assoc-const-eq-bound-var-in-ty.rs', 'assoc-const-eq-esc-bound-var-in-ty.rs', 'assoc-const-eq-esc-bound-var-in-ty.stderr', 'assoc-const-eq-param-in-ty.rs', 'assoc-const-eq-param-in-ty.stderr']","['compiler/rustc_hir_analysis', 'compiler/rustc_hir_analysis/src/astconv', 'compiler/rustc_hir_analysis/src', 'tests/ui/associated-consts', 'tests/ui/associated-consts', 'tests/ui/associated-consts', 'tests/ui/associated-consts', 'tests/ui/associated-consts', 'tests/ui/associated-consts', 'tests/ui/associated-consts']",P-medium,0,"#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 pub trait TraitWAssocConst {
 const A: dyn TraitWAssocConst<A=0>;
 }
 
 fn bar<A: TraitWAssocConst<A=0>>() {}","#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 pub trait TraitWAssocConst {
 const A: dyn TraitWAssocConst<A=0>;
 }
 
 fn bar<A: TraitWAssocConst<A=0>>() {}",,,1,,,,,,#![feature(generic_const_exprs)]
108152,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics', 'E-needs-mcve'}",https://github.com/rust-lang/rust/issues/108152,duplicate,,,,,,,ICE: collection encountered polymorphic constant,2023-02-17T02:47:00Z,2023-03-16T14:38:43Z,,,,,,27,,,,,0,,,,,,,,,,,
107898,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/107898,valid,developer,1. Crash-Front-end Panic,valid,2. HIR-type & wf check,5. Exception Handling & Report,4,"`super_relate_consts` `ty` field equality assert doesnt support `<T, const N: T>`",2023-02-10T17:38:55Z,2023-02-15T08:48:41Z,107940,https://github.com/rust-lang/rust/pull/107940,use semantic equality for const param type equality assertion ,2023/2/11 23:06,2023/2/15 8:48,4,262,"['combine.rs', 'mod.rs', 'relate.rs', 'misc.rs', 'mod.rs', 'relate_ty_with_infer_1.rs', 'relate_ty_with_infer_2.rs']","['compiler/rustc_infer/src/infer', 'compiler/rustc_middle/src/query', 'compiler/rustc_middle/src/ty', 'compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr', 'tests/ui/const-generics/generic_const_exprs/const_kind_expr']",,0,"#![feature(generic_const_exprs)]
 
 use std::mem::size_of;
 
 trait X<T> {
 fn f(self);
 fn g(self);
 }
 
 struct Y;
 
 impl<T> X<T> for Y
 where [(); size_of::<T>()]: Sized {
 fn f(self) {
 self.g();
 }
 fn g(self) {
 }
 }","#![feature(generic_const_exprs)]
 
 use std::mem::size_of;
 
 trait X<T> {
 fn f(self);
 fn g(self);
 }
 
 struct Y;
 
 impl<T> X<T> for Y
 where [(); size_of::<T>()]: Sized {
 fn f(self) {
 self.g();
 }
 fn g(self) {
 }
 }",,,,1,,,,,#![feature(generic_const_exprs)]
107883,"{'A-closures', 'T-types', 'A-impl-trait', 'E-needs-test', 'F-impl_trait_in_fn_trait_return', 'C-bug', 'A-type-system'}",https://github.com/rust-lang/rust/issues/107883,valid,members,2. Correctness Issues-Completeness Issues,,5. Utils: Middle & ty utils & apfloat & metadata &macros,1. Type-Opaque Types,6,"Returning `impl Fn(T) -> impl Trait` does not compile, unless you add an `identity` call",2023-02-10T10:19:00Z,2025-02-15T03:32:47Z,122077,,,,,,,,,,0,"#![feature(impl_trait_in_fn_trait_return)]
 #![feature(unboxed_closures)] // only for `h`
 
 use std::fmt::Debug;
 
 // Fails??
 fn f<T>() -> impl Fn(T) -> impl Debug {
 |_x| 15
 }
 
 // Works?...
 fn g<T>() -> impl MyFn<(T,), Out = impl Debug> {
 |_x| 15
 }
 
 trait MyFn<T> { type Out; }
 impl<T, U, F: Fn(T) -> U> MyFn<(T,)> for F { type Out = U; }
 
 // Also fails??
 fn h<T>() -> impl Fn<(T,), Output = impl Debug> {
 |_x| 15
 }
 
 // Works??????
 fn f_<T>() -> impl Fn(T) -> impl Debug {
 std::convert::identity(|_x| 15)
 }
 
 // Works?????
 fn f__<T>() -> impl Fn(T) -> impl Debug {
 let r = |_x| 15;
 r
 }","#![feature(impl_trait_in_fn_trait_return)]
 #![feature(unboxed_closures)] // only for `h`
 
 use std::fmt::Debug;
 
 // Fails??
 fn f<T>() -> impl Fn(T) -> impl Debug {
 |_x| 15
 }
 
 // Works?...
 fn g<T>() -> impl MyFn<(T,), Out = impl Debug> {
 |_x| 15
 }
 
 trait MyFn<T> { type Out; }
 impl<T, U, F: Fn(T) -> U> MyFn<(T,)> for F { type Out = U; }
 
 // Also fails??
 fn h<T>() -> impl Fn<(T,), Output = impl Debug> {
 |_x| 15
 }
 
 // Works??????
 fn f_<T>() -> impl Fn(T) -> impl Debug {
 std::convert::identity(|_x| 15)
 }
 
 // Works?????
 fn f__<T>() -> impl Fn(T) -> impl Debug {
 let r = |_x| 15;
 r
 }",,,,1,,,,,"#![feature(impl_trait_in_fn_trait_return)]
#![feature(unboxed_closures)]"
107474,"{'I-ICE', 'A-const-generics', 'T-compiler', 'F-generic_const_exprs'}",https://github.com/rust-lang/rust/issues/107474,duplicate,developer,1. Crash-Front-end Panic,,,,,"[ICE]: Failed to evaluate associated constant from inferred type parameter (Nightly, Generic Const Exprs)",2023-01-30T17:33:19Z,2023-01-31T09:57:47Z,107479,https://github.com/rust-lang/rust/pull/107479,Use `ObligationCtxt::new_in_snapshot` in `satisfied_from_param_env`,2023/1/30 19:06,2023/1/31 9:57,0,58,"['const_evaluatable.rs', 'document-item-with-associated-const-in-where-clause.rs', 'single-satisfied-ConstEvaluatable-in-probe.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/rustdoc', 'tests/ui/const-generics/generic_const_exprs']",,0,,,,,,,,,,,
106666,"{'I-ICE', 'T-rustdoc', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/106666,valid,icemaker,1. Crash-Front-end Panic,valid,2. HIR-trait solving,4. Basic syntax&structure,1,ice: rustdoc: `assertion failed: !infcx.is_in_snapshot() || self.usable_in_snapshot`,2023-01-10T06:49:53Z,2023-01-31T09:57:48Z,107479,https://github.com/rust-lang/rust/pull/107479,Use `ObligationCtxt::new_in_snapshot` in `satisfied_from_param_env`,2023/1/30 19:06,2023/1/31 9:57,21,58,"['const_evaluatable.rs', 'document-item-with-associated-const-in-where-clause.rs', 'single-satisfied-ConstEvaluatable-in-probe.rs']","['compiler/rustc_trait_selection/src/traits', 'tests/rustdoc', 'tests/ui/const-generics/generic_const_exprs']",,0,"#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 pub trait Enumerable {
 const N: usize;
 }
 
 #[derive(Clone)]
 pub struct SymmetricGroup<S>
 where
 S: Enumerable,
 [(); S::N]: Sized,
 {
 _phantom: std::marker::PhantomData<S>,
 }
 
 fn main() {}","#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 pub trait Enumerable {
 const N: usize;
 }
 
 #[derive(Clone)]
 pub struct SymmetricGroup<S>
 where
 S: Enumerable,
 [(); S::N]: Sized,
 {
 _phantom: std::marker::PhantomData<S>,
 }
 
 fn main() {}",,,,1,,Sized,,,#![feature(generic_const_exprs)]
106545,"{'A-const-generics', 'T-compiler', 'A-lints', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/106545,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,5. Utils: Middle & ty utils & apfloat & metadata &macros,4. Basic syntax&structure,1,False positive unused_braces when calling a macro,2023-01-06T22:35:32Z,2023-01-15T00:00:51Z,106563,https://github.com/rust-lang/rust/pull/106563,Fix `unused_braces` on generic const expr macro call,2023/1/7 15:43,2023/1/15 0:00,8,17,"['unused.rs', 'unused_braces.fixed', 'unused_braces.rs', 'unused_braces.stderr']","['compiler/rustc_lint/src', 'tests/ui/const-generics', 'tests/ui/const-generics', 'tests/ui/const-generics']",,0,"#![allow(incomplete_features)]
 #![feature(generic_const_exprs)]
 
 macro_rules! co_vec_default {
 () => {
 1
 }
 }
 
 struct V<const U: usize>
 where
 [(); U]:;
 
 trait Tr {}
 
 impl Tr for V<{co_vec_default!()}> {}","#![allow(incomplete_features)]
 #![feature(generic_const_exprs)]
 
 macro_rules! co_vec_default {
 () => {
 1
 }
 }
 
 struct V<const U: usize>
 where
 [(); U]:;
 
 trait Tr {}
 
 impl Tr for V<{co_vec_default!()}> {}",,,,,,,,,#![feature(generic_const_exprs)]
106473,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/106473,duplicate,members,1. Crash-Front-end Panic,,,,,subst ICE when building specialization graph with `generic_const_exprs`,2023-01-04T23:44:08Z,2023-01-17T18:27:16Z,,,,,,12,,,,,0,,,,,,,,,,,
106423,"{'I-ICE', 'requires-incomplete-features', 'glacier', 'requires-nightly', 'P-medium', 'E-needs-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/106423,Not reproducible anymore,developer,1. Crash-Front-end Panic,invalid,,,,ICE: collection encountered polymorphic constant: UnevaluatedConst,2023-01-03T20:19:04Z,2024-03-24T04:30:37Z,,,,,,445,,,,P-medium,0,,"use rand::prelude::*;
use std::time::Instant;
use sci_rs::signal::filter::{design::Sos, sosfilt_dyn};
use sci_rs::signal::filter::design::{butter_st, FilterBandType, FilterOutputType};

fn main() {

    let mut rng = rand::thread_rng();

    let vals: Vec<f64> = (0..25000*120).map(|_| rng.gen()).collect();

    // let y = Array1::from_vec(vec![0.0, 0.09414586007215595, 0.18745540640340155, ...]);

    let filter = butter_st::<f64,4,2>(
        [10.,50.],
        Some(FilterBandType::Bandpass),
        Some(false),
        Some(FilterOutputType::Zpk),
        Some(1666.)
    );

    // check filter params
    println!(""{:?}"",filter)
 
}",,,,,,,,,
106419,"{'requires-nightly', 'E-needs-test', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/106419,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,5. Exception Handling & Report,1,Nightly `#![feature(generic_const_exprs)]`: mismatched types in derive macro `Clone`,2023-01-03T18:58:20Z,2023-01-27T10:40:28Z,105292,,,,,23,,,,,0,"#![feature(generic_const_exprs)]
 
 #[derive(Clone)]
 struct Bar<const A: usize, const B: usize>
 where
 [(); A as usize]:,
 [(); B as usize]:, 
 {}
 
 fn main() {}","#![feature(generic_const_exprs)]
 
 #[derive(Clone)]
 struct Bar<const A: usize, const B: usize>
 where
 [(); A as usize]:,
 [(); B as usize]:, 
 {}
 
 fn main() {}",,,,,,,,,#![feature(generic_const_exprs)]
106240,"{'I-ICE', 'P-high', 'regression-from-stable-to-nightly', 'T-compiler', 'C-bug', 'A-const-generics', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/106240,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-trait solving,4. Basic syntax&structure,1,"ICE, regression from stable/beta -> nightly: var types encountered in super_relate_consts when trait bound not satisfied",2022-12-29T01:42:15Z,2023-01-12T20:05:13Z,106322,https://github.com/rust-lang/rust/pull/106322,Handle inference variables in `CollectAllMismatches` correctly,2022/12/31 3:05,2023/1/12 20:05,14,83,"['method_chain.rs', 'ct-var-in-collect_all_mismatches.rs', 'ct-var-in-collect_all_mismatches.stderr', 'invalid-iterator-chain-with-int-infer.rs', 'invalid-iterator-chain-with-int-infer.stderr']","['compiler/rustc_trait_selection/src/traits/error_reporting', 'tests/ui/consts', 'tests/ui/consts', 'tests/ui/iterators', 'tests/ui/iterators']",P-high,0,"struct Foo<T, const N: usize> {
 array: [T; N],
 }
 
 trait Bar<const N: usize> {}
 
 impl<T, const N: usize> Foo<T, N> {
 fn trigger(self) {
 self.unsatisfied()
 // ^^^^^^^^^^^ expected location of type error (T: Bar<N> isn't satisfied)
 // Instead, nightly produces an ICE when
 }
 
 fn unsatisfied(self)
 where
 T: Bar<N>,
 {
 }
 }","struct Foo<T, const N: usize> {
 array: [T; N],
 }
 
 trait Bar<const N: usize> {}
 
 impl<T, const N: usize> Foo<T, N> {
 fn trigger(self) {
 self.unsatisfied()
 // ^^^^^^^^^^^ expected location of type error (T: Bar<N> isn't satisfied)
 // Instead, nightly produces an ICE when
 }
 
 fn unsatisfied(self)
 where
 T: Bar<N>,
 {
 }
 }",,,,,1,,,,
105821,"{'I-ICE', 'glacier', 'E-needs-test', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/105821,Not reproducible anymore,,,,,,,error: internal compiler error: broken MIR in DefId,2022-12-17T09:15:52Z,2023-03-01T22:06:58Z,108605,https://github.com/rust-lang/rust/pull/108605,Add regression test for #105821,2023/3/1 13:02,2023/3/1 22:06,74,23,['issue-105821.rs'],['tests/ui/const-generics/issues'],,0,,,,,,,,,,,
105709,"{'I-ICE', 'requires-incomplete-features', 'glacier', 'requires-nightly', 'E-needs-test', 'T-compiler', 'S-has-mcve', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/105709,duplicate,,,,,,,ICE: type parameter out of range when substituting,2022-12-14T17:49:40Z,2023-06-08T13:30:48Z,112389,https://github.com/rust-lang/rust/pull/112389,Add a test for #105709,2023/6/7 16:00,2023/6/8 13:30,175,9,['inline-const-in-const-generic-defaults.rs'],['tests/ui/const-generics/generic_const_exprs'],,0,,,,,,,,,,,
105631,"{'I-ICE', 'glacier', 'requires-nightly', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/105631,duplicate,,,,,,,"ICE: `type parameter C/#1 (C/1) out of range when substituting, substs=[]` with `generic_const_exprs`",2022-12-12T20:11:42Z,2023-01-17T18:26:56Z,,,,,,35,,,,,0,,,,,,,,,,,
105608,"{'I-ICE', 'requires-nightly', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/105608,valid,members,1. Crash-Front-end Panic,invalid,2. HIR-Type Infer,4. Basic syntax&structure,1,ICE: Missing constant with generic_const_exprs,2022-12-12T12:50:51Z,2022-12-14T12:46:07Z,105611,https://github.com/rust-lang/rust/pull/105611,fold instead of obliterating args,2022/12/12 14:40,2022/12/14 12:46,1,82,"['mod.rs', 'issue-105608.rs', 'issue-105608.stderr']","['compiler/rustc_infer/src/infer', 'src/test/ui/const-generics/generic_const_exprs', 'src/test/ui/const-generics/generic_const_exprs']",,0,"#![allow(incomplete_features, unstable_features)]
 #![feature(generic_const_exprs)]
 
 struct Combination<const STRATEGIES: usize>;
 
 impl<const STRATEGIES: usize> Combination<STRATEGIES> {
 fn and<M>(self) -> Combination<{ STRATEGIES + 1 }> {
 Combination
 }
 }
 
 pub fn trigger_the_ice() {
 Combination::<0>.and::<_>().and::<_>();
 }","#![allow(incomplete_features, unstable_features)]
 #![feature(generic_const_exprs)]
 
 struct Combination<const STRATEGIES: usize>;
 
 impl<const STRATEGIES: usize> Combination<STRATEGIES> {
 fn and<M>(self) -> Combination<{ STRATEGIES + 1 }> {
 Combination
 }
 }
 
 pub fn trigger_the_ice() {
 Combination::<0>.and::<_>().and::<_>();
 }",,,,,,,,,#![feature(generic_const_exprs)]
105205,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/105205,valid,icemaker,1. Crash-Front-end Panic,valid,2. HIR-trait solving,5. Exception Handling & Report,1,ICE: checking wfness of `ConstKind::Expr` is unsupported,2022-12-03T11:38:15Z,2022-12-06T15:35:59Z,105339,https://github.com/rust-lang/rust/pull/105339,support `ConstKind::Expr` in `is_const_evaluatable` and `WfPredicates::compute`,2022/12/5 23:23,2022/12/6 15:36,3,119,"['const_evaluatable.rs', 'wf.rs', 'wf_obligation.rs', 'wf_obligation.stderr']","['compiler/rustc_trait_selection/src/traits', 'compiler/rustc_trait_selection/src/traits', 'src/test/ui/const-generics/generic_const_exprs/const_kind_expr', 'src/test/ui/const-generics/generic_const_exprs/const_kind_expr']",,0,"// run-pass
 #![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 fn zero_init<const N: usize>() -> Substs1<N>
 where
 [u8; N + 1]: ,
 {
 Substs1([0; N + 1])
 }
 struct Substs1<const N: usize>([u8; N + 1])
 where
 [(); N + 1]: ;
 
 fn substs2<const M: usize>() -> Substs1<{ M * 2 }>
 where
 [(); { M * 2 } + 1]: ,
 {
 zero_init::<{ M * 2 }>()
 }
 
 fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>
 where
 [(); (L - 1) * 2 + 1]: ,
 {
 substs2::<{ Substs1([0; N + 1]) }>()
 }
 
 fn main() {
 assert_eq!(substs3::<2>().0, [0; 3]);
 }
 
 // Test that the ``{ (L - 1) * 2 + 1 }`` bound on ``substs3`` satisfies the
 // ``{ N + 1 }`` bound on ``Substs1``","// run-pass
 #![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 fn zero_init<const N: usize>() -> Substs1<N>
 where
 [u8; N + 1]: ,
 {
 Substs1([0; N + 1])
 }
 struct Substs1<const N: usize>([u8; N + 1])
 where
 [(); N + 1]: ;
 
 fn substs2<const M: usize>() -> Substs1<{ M * 2 }>
 where
 [(); { M * 2 } + 1]: ,
 {
 zero_init::<{ M * 2 }>()
 }
 
 fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>
 where
 [(); (L - 1) * 2 + 1]: ,
 {
 substs2::<{ Substs1([0; N + 1]) }>()
 }
 
 fn main() {
 assert_eq!(substs3::<2>().0, [0; 3]);
 }
 
 // Test that the ``{ (L - 1) * 2 + 1 }`` bound on ``substs3`` satisfies the
 // ``{ N + 1 }`` bound on ``Substs1``",,,,,,,,,#![feature(generic_const_exprs)]
105037,"{'F-generic_const_exprs', 'A-const-generics', 'C-bug'}",https://github.com/rust-lang/rust/issues/105037,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-trait solving,5. Exception Handling & Report,1,Bad generic inference on very recent nightly,2022-11-29T00:12:54Z,2023-01-09T21:14:28Z,105292,https://github.com/rust-lang/rust/pull/105292,Change a commit_if_ok call to probe,2022/12/5 9:33,2023/1/9 21:14,41,237,"['const_evaluatable.rs', 'ensure_is_evaluatable.rs', 'ensure_is_evaluatable.stderr', 'fn_with_two_const_inputs.rs', 'fn_with_two_const_inputs.stderr', 'fn_with_two_same_const_inputs.rs', 'issue-105037.rs', 'two_matching_preds.rs', 'unify_with_nested_expr.rs', 'unify_with_nested_expr.stderr']","['compiler/rustc_trait_selection/src/traits', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/const-generics']",,0,"#![feature(generic_const_exprs)]
 
 trait Table<const D: usize>: Sync {
 const COLUMNS: usize;
 }
 
 struct Table1<const D: usize>;
 impl<const D: usize> Table<D> for Table1<D> {
 const COLUMNS: usize = 123;
 }
 
 struct Table2<const D: usize>;
 impl<const D: usize> Table<D> for Table2<D> {
 const COLUMNS: usize = 456;
 }
 
 fn process_table<T: Table<D>, const D: usize>(table: T)
 where
 [(); T::COLUMNS]:,
 {
 }
 
 fn process_all_tables<const D: usize>()
 where
 [(); Table1::<D>::COLUMNS]:,
 [(); Table2::<D>::COLUMNS]:,
 {
 process_table(Table1::<D>);
 process_table(Table2::<D>);
 }","#![feature(generic_const_exprs)]
 
 trait Table<const D: usize>: Sync {
 const COLUMNS: usize;
 }
 
 struct Table1<const D: usize>;
 impl<const D: usize> Table<D> for Table1<D> {
 const COLUMNS: usize = 123;
 }
 
 struct Table2<const D: usize>;
 impl<const D: usize> Table<D> for Table2<D> {
 const COLUMNS: usize = 456;
 }
 
 fn process_table<T: Table<D>, const D: usize>(table: T)
 where
 [(); T::COLUMNS]:,
 {
 }
 
 fn process_all_tables<const D: usize>()
 where
 [(); Table1::<D>::COLUMNS]:,
 [(); Table2::<D>::COLUMNS]:,
 {
 process_table(Table1::<D>);
 process_table(Table2::<D>);
 }",,,,,,,,,#![feature(generic_const_exprs)]
104312,"{'I-ICE', 'A-const-generics', 'T-compiler', 'C-bug'}",https://github.com/rust-lang/rust/issues/104312,valid,fuzz-rustc,1. Crash-Front-end Panic,invalid,1. AST,5. Exception Handling & Report,1,"ICE ""const parameter out of range"" with duplicated const param name in trait",2022-11-12T08:44:09Z,2022-12-06T00:47:04Z,105230,https://github.com/rust-lang/rust/pull/105230,Skip recording resolution for duplicated generic params.,2022/12/3 22:41,2022/12/6 0:47,23,21,"['late.rs', 'self-referential.rs', 'self-referential.stderr', 'duplicate-type-parameter.stderr']","['compiler/rustc_resolve/src', 'src/test/ui/const-generics/defaults', 'src/test/ui/const-generics/defaults', 'src/test/ui/duplicate']",,0,"trait Foo<const M: u8, const M: u8 = M> {}
 impl Foo<2> for () {}
 fn main() {}","trait Foo<const M: u8, const M: u8 = M> {}
 impl Foo<2> for () {}
 fn main() {}",,,,,,,,,
104141,"{'D-incorrect', 'T-compiler', 'C-bug', 'A-macros', 'A-const-generics', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/104141,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,1. AST,5. Exception Handling & Report,1,Misleading unnecessary braces warning,2022-11-08T08:55:06Z,2022-12-27T13:04:06Z,105515,https://github.com/rust-lang/rust/pull/105515,Account for macros in const generics,2022/12/9 23:21,2022/12/27 13:04,49,7,"['unused.rs', 'unused_braces_macro.rs']","['compiler/rustc_lint/src', 'src/test/ui/lint']",,0,"pub fn foo<const BAR: bool> () {}
 
 pub fn main() {
 // warning: unnecessary braces around const expression
 foo::<{cfg!(feature = ""foo"")}>();
 }","pub fn foo<const BAR: bool> () {}
 
 pub fn main() {
 // warning: unnecessary braces around const expression
 foo::<{cfg!(feature = ""foo"")}>();
 }",,,,,,,,,
103899,"{'I-ICE', 'A-trait-system', 'A-associated-items', 'glacier', 'T-types', 'P-medium', 'S-bug-has-test', 'T-compiler', 'C-bug', 'regression-from-stable-to-stable'}",https://github.com/rust-lang/rust/issues/103899,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,5. Exception Handling & Report,6,ICE: `delay_span_bug`: `error performing ParamEnvAnd`,2022-11-02T20:13:18Z,2025-02-19T10:50:58Z,136539,https://github.com/rust-lang/rust/pull/136539,Emit dropck normalization errors in borrowck,2025/2/4 13:45,2025/2/19 10:51,839,371,"['trace.rs', 'mod.rs', 'elaborate_drop.rs', 'dropck_outlives.rs', 'dropck_outlives.rs', '103899.rs', '105299.rs', 'dropck-only-error-ambiguity.rs', 'dropck-only-error-ambiguity.stderr', 'dropck-only-error-async.rs', 'dropck-only-error-async.stderr', 'dropck-only-error-gat.rs', 'dropck-only-error-gat.stderr', 'dropck-only-error.rs', 'dropck-only-error.stderr', 'issue-103899.current.stderr', 'issue-103899.next.stderr', 'issue-103899.rs', 'hir-wf-check-erase-regions.rs', 'hir-wf-check-erase-regions.stderr']","['compiler/rustc_borrowck/src/type_check/liveness', 'compiler/rustc_middle/src/query', 'compiler/rustc_mir_transform/src', 'compiler/rustc_trait_selection/src/traits/query', 'compiler/rustc_traits/src', 'tests/crashes', 'tests/crashes', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/dropck', 'tests/ui/typeck', 'tests/ui/typeck', 'tests/ui/typeck', 'tests/ui/wf', 'tests/ui/wf']",P-medium,0,"use std::collections::HashMap;
 use std::marker::PhantomData;
 use std::sync::Arc;
 
 trait DataTypePrimitive {
 type DataTypeHolder;
 }
 
 trait LayerT {
 type DataType: DataTypePrimitive;
 }
 
 struct Pooled<B> {
 _buffer: PhantomData<B>,
 }
 
 struct NdBufferView<B, T: DataTypePrimitive> {
 buffer: B,
 data_type_h: T::DataTypeHolder,
 }
 
 type NdBuffer<T> = NdBufferView<(), T>;
 
 type PooledNdBuffer<T> = Pooled<NdBuffer<T>>;
 
 struct LayerPage<L: LayerT> {
 // NOTE! ICE if this is PooledNdBuffer
 buffer: Arc<PooledNdBuffer<L::DataType>>,
 // These work fine:
 //buffer: Arc<Pooled<Vec<L::DataType>>>,
 //buffer: Arc<Vec<L::DataType>>,
 }
 
 type Layer<L> = HashMap<u32, LayerPage<L>>;
 
 // This function triggers the ICE.
 fn layer_from_proto<T, L: LayerT<DataType = T>>(
 _layer: &'static L,
 ) -> Result<Layer<L>, ()> {
 todo!()
 }","trait BaseWithAssoc {
 type Assoc;
 }
 
 trait WrapperWithAssoc {
 type BaseAssoc: BaseWithAssoc;
 }
 
 struct Wrapper<B> {
 inner: B,
 }
 
 struct ProjectToBase<T: BaseWithAssoc> {
 data_type_h: T::Assoc,
 }
 
 struct DoubleProject<L: WrapperWithAssoc> {
 buffer: Wrapper<ProjectToBase<L::BaseAssoc>>,
 }
 
 fn trigger<L: WrapperWithAssoc<BaseAssoc = ()>>() -> DoubleProject<L> {
 loop {}
 }
 
 fn main() {}",,,,,1,,,,
103790,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/103790,valid,developer,1. Crash-Front-end Panic,invalid,2. HIR-type & wf check,5. Exception Handling & Report,1,ICE: const parameter out of range,2022-10-31T05:44:55Z,2022-11-03T03:01:03Z,103870,https://github.com/rust-lang/rust/pull/103870,Fix `inferred_kind` ICE,2022/11/2 5:52,2022/11/3 3:01,2,78,"['mod.rs', 'issue-103790.rs', 'issue-103790.stderr']","['compiler/rustc_hir_analysis/src/astconv', 'src/test/ui/consts', 'src/test/ui/consts']",,0,"#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 struct S<const S: (), const S: S = {S}>;
 
 fn main() {}","#![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 
 struct S<const S: (), const S: S = {S}>;
 
 fn main() {}",,,,,,,,,#![feature(generic_const_exprs)]
103770,"{'requires-incomplete-features', 'I-hang', 'requires-nightly', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics', 'F-adt_const_params'}",https://github.com/rust-lang/rust/issues/103770,Not reproducible anymore,,,,,,,"Hang with ADT const param, self-mention in where clause",2022-10-30T18:39:35Z,2024-07-03T11:09:35Z,127245,https://github.com/rust-lang/rust/pull/127245,Add a test for `generic_const_exprs`,2024/7/2 16:11,2024/7/3 11:09,611,32,"['adt_wf_hang.rs', 'adt_wf_hang.stderr']","['tests/ui/const-generics/generic_const_exprs', 'tests/ui/const-generics/generic_const_exprs']",,0,,,,,,,,,,,
103555,"{'I-slow', 'A-codegen', 'A-array', 'T-compiler', 'C-bug', 'A-const-generics', 'T-libs'}",https://github.com/rust-lang/rust/issues/103555,exclude,,,,,,,`array::zip` in combination with `array::map` optimises very poorly,2022-10-26T00:39:03Z,2023-05-31T08:25:24Z,112096,https://github.com/rust-lang/rust/pull/112096,Remove array_zip,2023/5/30 7:47,2023/5/31 8:25,217,41,"['mod.rs', 'array-map.rs', 'autovectorize-f32x4.rs']","['library/core/src/array', 'tests/codegen', 'tests/codegen']",,0,,,,,,,,,,,
102734,"{'A-coherence', 'A-associated-items', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/102734,Not a bug,,,,,,,failing orphan check with associated types should suggest using the associated type directly.,2022-10-06T10:54:50Z,2024-09-28T17:05:53Z,,,,,,723,,,,,0,,,,,,,,,,,
102333,"{'I-ICE', 'F-generic_associated_types', 'A-GATs', 'P-medium', 'T-compiler', 'regression-from-stable-to-beta', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/102333,valid,members,1. Crash-Front-end Panic,valid,2. HIR-type & wf check,1. Type-Opaque Types,1,ICEs galore with const-generic associated type in trait bound,2022-09-26T22:58:12Z,2022-09-29T16:24:37Z,102336,https://github.com/rust-lang/rust/pull/102336,Fix associated type bindings with anon const in GAT position,2022/9/26 23:59,2022/9/29 16:24,2,132,"['type_of.rs', 'issue-102333.rs']","['compiler/rustc_hir_analysis/src/collect', 'src/test/ui/generic-associated-types']",P-medium,0,"#![crate_type = ""lib""]
 
 trait A {
 type T: B<U<1i32> = ()>;
 }
 
 trait B {
 type U<const C: i32>;
 }","#![crate_type = ""lib""]
 
 trait A {
 type T: B<U<1i32> = ()>;
 }
 
 trait B {
 type U<const C: i32>;
 }",,,,,,,,,
101972,"{'C-bug', 'A-coercions'}",https://github.com/rust-lang/rust/issues/101972,exclude,developer,2. Correctness Issues-Completeness Issues,,,,,Reference to trivial block coerces more than reference to a value,2022-09-18T09:31:49Z,2023-02-06T07:17:36Z,,,,,,140,,,,,0,,"use core::fmt::Debug;
fn foo(_: &Box<dyn Debug>) {}

fn main() {
    foo(&{ Box::new(()) });
    foo(&( Box::new(()) ));
    foo(&  Box::new(())  );
}",,,,,,,,,
101036,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/101036,duplicate,,,,,,,Const generics out of range when substituting substs=[],2022-08-26T12:05:07Z,2023-01-17T18:27:06Z,,,,,,144,,,,,0,,,,,,,,,,,
100270,"{'T-compiler', 'A-trait-objects', 'C-bug', 'L-type_alias_bounds'}",https://github.com/rust-lang/rust/issues/100270,Not a bug,,,,,,,Outlives-bounds in type aliases may affect object lifetime defaults which lint `type_alias_bounds` fails to acknowledge,2022-08-08T11:32:22Z,2024-07-26T10:48:50Z,,,,,,717,,,,,0,,,,,,,,,,,
100187,"{'I-ICE', 'glacier', 'A-impl-trait', 'P-critical', 'T-compiler', 'regression-from-stable-to-beta', 'C-bug'}",https://github.com/rust-lang/rust/issues/100187,valid,icemaker,1. Crash-Front-end Panic,invalid,1. AST,5. Exception Handling & Report,1,ICE: Region parameter out of range when substituting in region 'b (index=4),2022-08-06T05:05:02Z,2022-08-10T08:50:12Z,100340,https://github.com/rust-lang/rust/pull/100340,Iterate generics_def_id_map in reverse order to fix P-critical issue,2022/8/9 19:40,2022/8/10 8:50,4,27,"['lib.rs', 'issue-100187.rs']","['compiler/rustc_ast_lowering/src', 'src/test/ui/impl-trait']",P-critical,0,"trait Pattern<'a> {}
 
 async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}","trait Pattern<'a> {}
 
 async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}",,1,,,1,,"-Zsave-analysis
--edition=X",rustc ./async-fn.rs -Zsave-analysis --edition=2021 --crate-type lib,
99705,"{'F-generic_const_exprs', 'A-const-generics', 'C-bug'}",https://github.com/rust-lang/rust/issues/99705,valid,developer,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,1. Type-Opaque Types,1,No associated item found when the associated item was used as const generic parameter in return type,2022-07-25T09:40:42Z,2022-11-03T03:01:03Z,99801,https://github.com/rust-lang/rust/pull/99801,fix(generic_const_exprs): Fix predicate inheritance for children of opaque types,2022/7/27 9:31,2022/11/3 3:01,100,64,"['predicates_of.rs', 'issue-99705.rs']","['compiler/rustc_hir_analysis/src/collect', 'src/test/ui/const-generics/generic_const_exprs']",,0,"// build-pass
 #![crate_type = ""lib""]
 #![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 trait MyIterator {
 type Output;
 }
 
 trait Foo {
 const ABC: usize;
 }
 
 struct IteratorStruct<const N: usize>{
 
 }
 
 struct BarStruct<const N: usize> {
 data: [usize; N]
 }
 
 impl<const N: usize> MyIterator for IteratorStruct<N> {
 type Output = BarStruct<N>;
 }
 
 fn test<T: Foo>() -> impl MyIterator<Output = BarStruct<{T::ABC}>> where [(); {T::ABC}]: Sized {
 IteratorStruct::<{T::ABC}>{}
 }","// build-pass
 #![crate_type = ""lib""]
 #![feature(generic_const_exprs)]
 #![allow(incomplete_features)]
 trait MyIterator {
 type Output;
 }
 
 trait Foo {
 const ABC: usize;
 }
 
 struct IteratorStruct<const N: usize>{
 
 }
 
 struct BarStruct<const N: usize> {
 data: [usize; N]
 }
 
 impl<const N: usize> MyIterator for IteratorStruct<N> {
 type Output = BarStruct<N>;
 }
 
 fn test<T: Foo>() -> impl MyIterator<Output = BarStruct<{T::ABC}>> where [(); {T::ABC}]: Sized {
 IteratorStruct::<{T::ABC}>{}
 }",,,,,,Sized,,,#![feature(generic_const_exprs)]
99566,"{'I-ICE', 'glacier', 'requires-nightly', 'F-closure_lifetime_binder', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/99566,valid,members,2. Correctness Issues-Completeness Issues,,2. HIR-type & wf check,2. Ownership-Lifetime,1,Const parameter inside `for<>` closure parameter list (feature `closure_lifetime_binder`) crashes the compiler,2022-07-21T16:22:26Z,2022-08-14T14:37:16Z,99582,https://github.com/rust-lang/rust/pull/99582,Delay a span bug if we see ty/const generic params during writeback,2022/7/22 0:57,2022/8/14 14:37,23,39,"['writeback.rs', 'disallow-const.rs', 'disallow-const.stderr', 'disallow-ty.rs', 'disallow-ty.stderr']","['compiler/rustc_typeck/src/check', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder', 'src/test/ui/closures/binder']",,0,"#![feature(closure_lifetime_binder)]
 
 fn main() {
 for<const N: i32> || -> () {}; 
 }","#![feature(closure_lifetime_binder)]
 
 fn main() {
 for<const N: i32> || -> () {}; 
 }",,,,,,,,,#![feature(closure_lifetime_binder)]
98629,"{'P-high', 'T-compiler', 'regression-from-stable-to-beta', 'A-const-generics', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/98629,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-trait solving,5. Exception Handling & Report,2,"evaluation error hides ""impl item missing"" error",2022-06-28T16:14:17Z,2022-07-24T01:22:32Z,99449,https://github.com/rust-lang/rust/pull/99449,Do not resolve associated const when there is no provided value,2022/7/19 5:08,2022/7/24 1:22,25,93,"['const_evaluatable.rs', 'instance.rs', 'issue-86530.rs', 'issue-86530.stderr', 'issue-98629.rs', 'issue-98629.stderr', 'issue-77919.rs', 'issue-77919.stderr', 'ice-6252.stderr']","['compiler/rustc_trait_selection/src/traits', 'compiler/rustc_ty_utils/src', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics/issues', 'src/test/ui/issues', 'src/test/ui/issues', 'src/tools/clippy/tests/ui/crashes']",P-high,0,"trait Trait {
 const N: usize;
 }
 
 impl Trait for i32 {}
 
 fn f()
 where
 [(); <i32 as Trait>::N]:,
 {}
 
 fn main() {}","trait Trait {
 const N: usize;
 }
 
 impl Trait for i32 {}
 
 fn f()
 where
 [(); <i32 as Trait>::N]:,
 {}
 
 fn main() {}",,,,,,,,,
96699,"{'I-ICE', 'requires-incomplete-features', 'E-needs-test', 'T-compiler', 'C-bug', 'E-easy', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/96699,duplicate,,,,,,,Test needed for linker error in associated function with generic_const_exprs,2022-05-04T10:54:43Z,2023-06-25T11:27:17Z,112990,https://github.com/rust-lang/rust/pull/112990,Add a regression test for #96699,2023/6/24 5:46,2023/6/25 11:27,417,87,['issue-96699.rs'],['tests/ui/const-generics/generic_const_exprs'],,0,,,,,,,,,,,
95486,"{'F-const_generics', 'T-compiler', 'F-const_generics_defaults', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/95486,duplicate,,,,,,,Cannot infer type with a default const parameter,2022-03-30T17:52:47Z,2022-04-18T20:54:18Z,,,,,,19,,,,,0,,,,,,,,,,,
95150,"{'E-mentor', 'A-const-generics', 'T-compiler', 'A-diagnostics'}",https://github.com/rust-lang/rust/issues/95150,valid,members,4. Diagnostic Issues-Incorrect Warning/Error,,2. HIR-type & wf check,1. Type-WF,1,"Diagnostic for const generic enum on stable suggests requirements for nightly-only feature (PartialEq, Eq)",2022-03-20T20:13:33Z,2022-04-12T15:33:39Z,95820,https://github.com/rust-lang/rust/pull/95820,simplify const params diagnostic on stable,2022/4/8 18:14,2022/4/12 15:33,22,176,"['wfcheck.rs', 'issue-63322-forbid-dyn.min.stderr', 'issue-63322-forbid-dyn.rs', 'nested-type.min.stderr', 'nested-type.rs']","['compiler/rustc_typeck/src/check', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics/issues', 'src/test/ui/const-generics', 'src/test/ui/const-generics']",,0,"enum E {
 V1,
 V2,
 }
 
 struct S<const X: E>;","enum E {
 V1,
 V2,
 }
 
 struct S<const X: E>;",,,,,,,,,
94846,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/94846,duplicate,,,,,,,"ICE on stable/nightly: const parameter `C/#0` (Const { ty: (), val: Param(C/#0) }/0) out of range when substituting substs=[]",2022-03-11T13:52:08Z,2023-01-17T18:26:16Z,,,,,,312,,,,,0,,,,,,,,,,,
94293,"{'A-const-generics', 'E-needs-test'}",https://github.com/rust-lang/rust/issues/94293,Not reproducible anymore,,,,,,,`const_evaluatable_unchecked` doesn't correctly deal with non default substs,2022-02-23T13:59:56Z,2022-12-23T00:02:14Z,106037,https://github.com/rust-lang/rust/pull/106037,Add regression test for #94293,2022/12/22 11:30,2022/12/23 0:02,302,31,['issue-94293.rs'],['src/test/ui/const-generics/generic_const_exprs'],,0,,,,,,,,,,,
94187,"{'E-medium', 'A-const-eval', 'C-bug', 'E-easy', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/94187,valid,developer,4. Diagnostic Issues-Incorrect Warning/Error,,5. Utils: Middle & ty utils & apfloat & metadata &macros,5. Exception Handling & Report,2,`type_name` depends on `-Zverbose` flag,2022-02-20T14:58:38Z,2022-10-31T06:28:28Z,103764,https://github.com/rust-lang/rust/pull/103764,All verbosity checks in `PrettyPrinter` now go through `PrettyPrinter::should_print_verbose`,2022/10/30 15:26,2022/10/31 6:28,252,61,"['type_name.rs', 'pretty.rs', 'issue-94187-verbose-type-name.rs']","['compiler/rustc_const_eval/src/interpret/intrinsics', 'compiler/rustc_middle/src/ty/print', 'src/test/ui/type']",,0,"#![feature(adt_const_params)]
 #![feature(const_type_name)]
 #![allow(incomplete_features)]
 
 pub trait True {}
 
 pub struct Equal<const A: &'static str, const B: &'static str>;
 
 impl<const A: &'static str> True for Equal<{A}, {A}> {}
 
 pub fn assert<T: True>(_: T) {}
 
 fn main() {
 assert(Equal::<{std::any::type_name::<[u32; 0]>()}, ""[u32; 0]"">);
 }","#![feature(adt_const_params)]
 #![feature(const_type_name)]
 #![allow(incomplete_features)]
 
 pub trait True {}
 
 pub struct Equal<const A: &'static str, const B: &'static str>;
 
 impl<const A: &'static str> True for Equal<{A}, {A}> {}
 
 pub fn assert<T: True>(_: T) {}
 
 fn main() {
 assert(Equal::<{std::any::type_name::<[u32; 0]>()}, ""[u32; 0]"">);
 }",,,,1,1,,,,"#![feature(adt_const_params)]
#![feature(const_type_name)]"
93720,"{'I-ICE', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/93720,Not reproducible anymore,,,,,,,Overflow should be caught earlier in standard query mode: ErrorReporting,2022-02-07T00:44:24Z,2022-06-24T15:00:33Z,,,,,,137,,,,,0,,,,,,,,,,,
93646,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/93646,valid,developer,1. Crash-Front-end Panic,invalid,3. MIR-Borrow Check,3. Opt-Wrong Implementations,6,Const generic default ICE: The type checker should prevent reading from a never-written local,2022-02-04T14:07:59Z,2022-02-12T07:47:38Z,93691,https://github.com/rust-lang/rust/pull/93691,"Implement `tainted_by_errors` in MIR borrowck, use it to skip CTFE",2022/2/6 5:03,2022/2/12 7:47,7,468,"['borrowck_errors.rs', 'bound_region_errors.rs', 'conflict_errors.rs', 'move_errors.rs', 'mutability_errors.rs', 'outlives_suggestion.rs', 'region_errors.rs', 'lib.rs', 'nll.rs', 'eval_queries.rs', 'machine.rs', 'eval_context.rs', 'check.rs', 'qualifs.rs', 'promote_consts.rs', 'mod.rs', 'query.rs', 'context.rs', 'structural_impls.rs', 'mod.rs', 'const_prop.rs', 'lib.rs', 'shim.rs', 'const-generic-default-wont-borrowck.rs', 'const-generic-default-wont-borrowck.stderr', 'const-fn-error.rs', 'const-fn-error.stderr', 'issue-76510.32bit.stderr', 'issue-76510.64bit.stderr', 'issue-76510.rs', 'issue-78655.rs', 'issue-78655.stderr']","['compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src/diagnostics', 'compiler/rustc_borrowck/src', 'compiler/rustc_borrowck/src', 'compiler/rustc_const_eval/src/const_eval', 'compiler/rustc_const_eval/src/const_eval', 'compiler/rustc_const_eval/src/interpret', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform/check_consts', 'compiler/rustc_const_eval/src/transform', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/mir', 'compiler/rustc_middle/src/ty', 'compiler/rustc_middle/src/ty', 'compiler/rustc_mir_build/src/build', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'compiler/rustc_mir_transform/src', 'src/test/ui/const-generics', 'src/test/ui/const-generics', 'src/test/ui/consts', 'src/test/ui/consts', 'src/test/ui/consts/const-mut-refs', 'src/test/ui/consts/const-mut-refs', 'src/test/ui/consts/const-mut-refs', 'src/test/ui/consts', 'src/test/ui/consts']",,0,"struct X<const N: usize = {
 let s: &str; s.len()
 }>;","struct X<const N: usize = {
 let s: &str; s.len()
 }>;",,,,,,,,,
93199,"{'T-compiler', 'A-coercions'}",https://github.com/rust-lang/rust/issues/93199,Not a bug,,,,,,,Iterator.cloned() doesn't work for Iterator.Item = &mut T,2022-01-22T13:17:27Z,2024-01-24T11:03:57Z,,,,,,731,,,,,0,,,,,,,,,,,
93182,"{'I-ICE', 'glacier', 'T-compiler', 'C-bug', 'F-generic_const_exprs', 'A-const-generics'}",https://github.com/rust-lang/rust/issues/93182,duplicate,,,,,,,Const Default with `generic_const_exprs` & super trait,2022-01-22T01:13:41Z,2023-01-17T18:26:26Z,,,,,,360,,,,,0,,,,,,,,,,,